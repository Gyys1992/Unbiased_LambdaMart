!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
API_BEGIN	include/LightGBM/c_api.h	/^#define API_BEGIN(/;"	d
API_END	include/LightGBM/c_api.h	/^#define API_END(/;"	d
ARRAY	include/LightGBM/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::final::Type
AUCMetric	src/metric/binary_metric.hpp	/^  explicit AUCMetric(const MetricConfig&) {$/;"	f	class:LightGBM::AUCMetric
AUCMetric	src/metric/binary_metric.hpp	/^class AUCMetric: public Metric {$/;"	c	namespace:LightGBM
Accept	src/network/socket_wrapper.hpp	/^  inline TcpSocket Accept() {$/;"	f	class:LightGBM::TcpSocket
AddBias	include/LightGBM/tree.h	/^  inline void AddBias(double val) {$/;"	f	class:LightGBM::Tree
AddPredictionToScore	src/io/tree.cpp	/^void Tree::AddPredictionToScore(const Dataset* data, data_size_t num_data, double* score) const {$/;"	f	class:LightGBM::Tree
AddPredictionToScore	src/io/tree.cpp	/^void Tree::AddPredictionToScore(const Dataset* data,$/;"	f	class:LightGBM::Tree
AddScore	src/boosting/score_updater.hpp	/^  inline void AddScore(const Tree* tree, const data_size_t* data_indices,$/;"	f	class:LightGBM::ScoreUpdater
AddScore	src/boosting/score_updater.hpp	/^  inline void AddScore(const Tree* tree, int cur_tree_id) {$/;"	f	class:LightGBM::ScoreUpdater
AddScore	src/boosting/score_updater.hpp	/^  inline void AddScore(const TreeLearner* tree_learner, const Tree* tree, int cur_tree_id) {$/;"	f	class:LightGBM::ScoreUpdater
AddScore	src/boosting/score_updater.hpp	/^  inline void AddScore(double val, int cur_tree_id) {$/;"	f	class:LightGBM::ScoreUpdater
AddValidData	src/c_api.cpp	/^  void AddValidData(const Dataset* valid_data) {$/;"	f	class:LightGBM::Booster
AddValidDataset	src/boosting/gbdt.cpp	/^void GBDT::AddValidDataset(const Dataset* valid_data,$/;"	f	class:LightGBM::GBDT
Allgather	src/network/network.cpp	/^void Network::Allgather(char* input, comm_size_t send_size, char* output) {$/;"	f	class:LightGBM::Network
Allgather	src/network/network.cpp	/^void Network::Allgather(char* input, const comm_size_t* block_start, const comm_size_t* block_len, char* output, comm_size_t all_size) {$/;"	f	class:LightGBM::Network
AllgatherBruck	src/network/network.cpp	/^void Network::AllgatherBruck(char* input, const comm_size_t* block_start, const comm_size_t* block_len, char* output, comm_size_t all_size) {$/;"	f	class:LightGBM::Network
AllgatherFunction	include/LightGBM/meta.h	/^typedef void(*AllgatherFunction)(char* input, comm_size_t input_size, const comm_size_t* block_start,$/;"	t	namespace:LightGBM
AllgatherRecursiveDoubling	src/network/network.cpp	/^void Network::AllgatherRecursiveDoubling(char* input, const comm_size_t* block_start, const comm_size_t* block_len, char* output, comm_size_t) {$/;"	f	class:LightGBM::Network
AllgatherRing	src/network/network.cpp	/^void Network::AllgatherRing(char* input, const comm_size_t* block_start, const comm_size_t* block_len, char* output, comm_size_t) {$/;"	f	class:LightGBM::Network
AllocateGPUMemory	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::AllocateGPUMemory() {$/;"	f	class:LightGBM::GPUTreeLearner
Allreduce	src/network/network.cpp	/^void Network::Allreduce(char* input, comm_size_t input_size, int type_size, char* output, const ReduceFunction& reducer) {$/;"	f	class:LightGBM::Network
AllreduceByAllGather	src/network/network.cpp	/^void Network::AllreduceByAllGather(char* input, comm_size_t input_size, int type_size, char* output, const ReduceFunction& reducer) {$/;"	f	class:LightGBM::Network
Application	include/LightGBM/application.h	/^class Application {$/;"	c	namespace:LightGBM
Application	src/application/application.cpp	/^Application::Application(int argc, char** argv) {$/;"	f	class:LightGBM::Application
ArgMax	include/LightGBM/utils/array_args.h	/^  inline static size_t ArgMax(const VAL_T* array, size_t n) {$/;"	f	class:LightGBM::ArrayArgs
ArgMax	include/LightGBM/utils/array_args.h	/^  inline static size_t ArgMax(const std::vector<VAL_T>& array) {$/;"	f	class:LightGBM::ArrayArgs
ArgMaxAtK	include/LightGBM/utils/array_args.h	/^  inline static int ArgMaxAtK(std::vector<VAL_T>* arr, int start, int end, int k) {$/;"	f	class:LightGBM::ArrayArgs
ArgMaxMT	include/LightGBM/utils/array_args.h	/^  inline static size_t ArgMaxMT(const std::vector<VAL_T>& array) {$/;"	f	class:LightGBM::ArrayArgs
ArgMin	include/LightGBM/utils/array_args.h	/^  inline static size_t ArgMin(const VAL_T* array, size_t n) {$/;"	f	class:LightGBM::ArrayArgs
ArgMin	include/LightGBM/utils/array_args.h	/^  inline static size_t ArgMin(const std::vector<VAL_T>& array) {$/;"	f	class:LightGBM::ArrayArgs
ArrayArgs	include/LightGBM/utils/array_args.h	/^class ArrayArgs {$/;"	c	namespace:LightGBM
ArrayCast	include/LightGBM/utils/common.h	/^inline static std::vector<T2> ArrayCast(const std::vector<T>& arr) {$/;"	f	namespace:LightGBM::Common
ArrayToString	include/LightGBM/utils/common.h	/^inline static std::string ArrayToString(const std::vector<double>& arr, size_t n) {$/;"	f	namespace:LightGBM::Common
ArrayToStringFast	include/LightGBM/utils/common.h	/^inline static std::string ArrayToStringFast(const std::vector<T>& arr, size_t n) {$/;"	f	namespace:LightGBM::Common
AsConstantTree	include/LightGBM/tree.h	/^  inline void AsConstantTree(double val) {$/;"	f	class:LightGBM::Tree
Assign	include/LightGBM/utils/array_args.h	/^  inline static void Assign(std::vector<VAL_T>* array, VAL_T t, size_t n) {$/;"	f	class:LightGBM::ArrayArgs
Atof	include/LightGBM/utils/common.h	/^inline static const char* Atof(const char* p, double* out) {$/;"	f	namespace:LightGBM::Common
AtofAndCheck	include/LightGBM/utils/common.h	/^inline static bool AtofAndCheck(const char* p, double* out) {$/;"	f	namespace:LightGBM::Common
Atoi	include/LightGBM/utils/common.h	/^inline static const char* Atoi(const char* p, T* out) {$/;"	f	namespace:LightGBM::Common
AtoiAndCheck	include/LightGBM/utils/common.h	/^inline static bool AtoiAndCheck(const char* p, int* out) {$/;"	f	namespace:LightGBM::Common
AverageLoss	src/metric/regression_metric.hpp	/^  inline static double AverageLoss(double sum_loss, double sum_weights) {$/;"	f	class:LightGBM::RMSEMetric
AverageLoss	src/metric/regression_metric.hpp	/^  inline static double AverageLoss(double sum_loss, double sum_weights) {$/;"	f	class:LightGBM::RegressionMetric
AverageLoss	src/metric/regression_metric.hpp	/^  inline static double AverageLoss(double sum_loss, double) {$/;"	f	class:LightGBM::GammaDevianceMetric
AvoidInf	include/LightGBM/utils/common.h	/^inline static double AvoidInf(double x) {$/;"	f	namespace:LightGBM::Common
AvoidInf	include/LightGBM/utils/common.h	/^inline static float AvoidInf(float x) {$/;"	f	namespace:LightGBM::Common
BOOL	include/LightGBM/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::final::Type
BOOST_COMPUTE_HAVE_THREAD_LOCAL	src/treelearner/gpu_tree_learner.h	/^#define BOOST_COMPUTE_HAVE_THREAD_LOCAL$/;"	d
BOOST_COMPUTE_THREAD_SAFE	src/treelearner/gpu_tree_learner.h	/^#define BOOST_COMPUTE_THREAD_SAFE$/;"	d
BOOST_COMPUTE_USE_OFFLINE_CACHE	src/treelearner/gpu_tree_learner.h	/^#define BOOST_COMPUTE_USE_OFFLINE_CACHE$/;"	d
BUILDDIR	docs/Makefile	/^BUILDDIR      = _build$/;"	m
BUILDDIR	docs/make.bat	/^set BUILDDIR=_build$/;"	v
Bagging	src/boosting/gbdt.cpp	/^void GBDT::Bagging(int iter) {$/;"	f	class:LightGBM::GBDT
BaggingHelper	src/boosting/gbdt.cpp	/^data_size_t GBDT::BaggingHelper(Random& cur_rand, data_size_t start, data_size_t cnt, data_size_t* buffer) {$/;"	f	class:LightGBM::GBDT
BaggingHelper	src/boosting/goss.hpp	/^  data_size_t BaggingHelper(Random& cur_rand, data_size_t start, data_size_t cnt, data_size_t* buffer, data_size_t* buffer_right) {$/;"	f	class:LightGBM::GOSS
BaseEstimator	python-package/lightgbm/compat.py	/^    from sklearn.base import BaseEstimator$/;"	i
BeforeFindBestSplit	src/treelearner/gpu_tree_learner.cpp	/^bool GPUTreeLearner::BeforeFindBestSplit(const Tree* tree, int left_leaf, int right_leaf) {$/;"	f	class:LightGBM::GPUTreeLearner
BeforeFindBestSplit	src/treelearner/serial_tree_learner.cpp	/^bool SerialTreeLearner::BeforeFindBestSplit(const Tree* tree, int left_leaf, int right_leaf) {$/;"	f	class:LightGBM::SerialTreeLearner
BeforeFindBestSplit	src/treelearner/voting_parallel_tree_learner.cpp	/^bool VotingParallelTreeLearner<TREELEARNER_T>::BeforeFindBestSplit(const Tree* tree, int left_leaf, int right_leaf) {$/;"	f	class:LightGBM::VotingParallelTreeLearner
BeforeTrain	src/treelearner/data_parallel_tree_learner.cpp	/^void DataParallelTreeLearner<TREELEARNER_T>::BeforeTrain() {$/;"	f	class:LightGBM::DataParallelTreeLearner
BeforeTrain	src/treelearner/feature_parallel_tree_learner.cpp	/^void FeatureParallelTreeLearner<TREELEARNER_T>::BeforeTrain() {$/;"	f	class:LightGBM::FeatureParallelTreeLearner
BeforeTrain	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::BeforeTrain() {$/;"	f	class:LightGBM::GPUTreeLearner
BeforeTrain	src/treelearner/serial_tree_learner.cpp	/^void SerialTreeLearner::BeforeTrain() {$/;"	f	class:LightGBM::SerialTreeLearner
BeforeTrain	src/treelearner/voting_parallel_tree_learner.cpp	/^void VotingParallelTreeLearner<TREELEARNER_T>::BeforeTrain() {$/;"	f	class:LightGBM::VotingParallelTreeLearner
Bin	include/LightGBM/bin.h	/^class Bin {$/;"	c	namespace:LightGBM
BinIterator	include/LightGBM/bin.h	/^class BinIterator {$/;"	c	namespace:LightGBM
BinMapper	include/LightGBM/bin.h	/^class BinMapper {$/;"	c	namespace:LightGBM
BinMapper	src/io/bin.cpp	/^  BinMapper::BinMapper() {$/;"	f	class:LightGBM::BinMapper
BinMapper	src/io/bin.cpp	/^  BinMapper::BinMapper(const BinMapper& other) {$/;"	f	class:LightGBM::BinMapper
BinMapper	src/io/bin.cpp	/^  BinMapper::BinMapper(const void* memory) {$/;"	f	class:LightGBM::BinMapper
BinThreshold	include/LightGBM/dataset.h	/^  inline uint32_t BinThreshold(int i, double threshold_double) const {$/;"	f	class:LightGBM::Dataset
BinToValue	include/LightGBM/bin.h	/^  inline double BinToValue(uint32_t bin) const {$/;"	f	class:LightGBM::BinMapper
BinToValue	include/LightGBM/feature_group.h	/^  inline double BinToValue(int sub_feature_idx, uint32_t bin) const {$/;"	f	class:LightGBM::FeatureGroup
BinType	include/LightGBM/bin.h	/^enum BinType {$/;"	g	namespace:LightGBM
BinaryErrorMetric	src/metric/binary_metric.hpp	/^  explicit BinaryErrorMetric(const MetricConfig& config) :BinaryMetric<BinaryErrorMetric>(config) {}$/;"	f	class:LightGBM::BinaryErrorMetric
BinaryErrorMetric	src/metric/binary_metric.hpp	/^class BinaryErrorMetric: public BinaryMetric<BinaryErrorMetric> {$/;"	c	namespace:LightGBM
BinaryLogloss	src/objective/binary_objective.hpp	/^  explicit BinaryLogloss(const ObjectiveConfig& config, std::function<bool(label_t)> is_pos = nullptr) {$/;"	f	class:LightGBM::BinaryLogloss
BinaryLogloss	src/objective/binary_objective.hpp	/^  explicit BinaryLogloss(const std::vector<std::string>& strs) {$/;"	f	class:LightGBM::BinaryLogloss
BinaryLogloss	src/objective/binary_objective.hpp	/^class BinaryLogloss: public ObjectiveFunction {$/;"	c	namespace:LightGBM
BinaryLoglossMetric	src/metric/binary_metric.hpp	/^  explicit BinaryLoglossMetric(const MetricConfig& config) :BinaryMetric<BinaryLoglossMetric>(config) {}$/;"	f	class:LightGBM::BinaryLoglossMetric
BinaryLoglossMetric	src/metric/binary_metric.hpp	/^class BinaryLoglossMetric: public BinaryMetric<BinaryLoglossMetric> {$/;"	c	namespace:LightGBM
BinaryMetric	src/metric/binary_metric.hpp	/^  explicit BinaryMetric(const MetricConfig&) {$/;"	f	class:LightGBM::BinaryMetric
BinaryMetric	src/metric/binary_metric.hpp	/^class BinaryMetric: public Metric {$/;"	c	namespace:LightGBM
Bind	src/network/socket_wrapper.hpp	/^  inline bool Bind(int port) {$/;"	f	class:LightGBM::TcpSocket
BoostFromAverage	src/boosting/gbdt.cpp	/^double GBDT::BoostFromAverage() {$/;"	f	class:LightGBM::GBDT
BoostFromScore	include/LightGBM/objective_function.h	/^  virtual double BoostFromScore() const { return 0.0f; }$/;"	f	class:LightGBM::ObjectiveFunction
Booster	python-package/lightgbm/__init__.py	/^from .basic import Booster, Dataset$/;"	i
Booster	python-package/lightgbm/basic.py	/^class Booster(object):$/;"	c
Booster	python-package/lightgbm/engine.py	/^from .basic import Booster, Dataset, LightGBMError, _InnerPredictor$/;"	i
Booster	python-package/lightgbm/plotting.py	/^from .basic import Booster$/;"	i
Booster	src/c_api.cpp	/^  Booster(const Dataset* train_data,$/;"	f	class:LightGBM::Booster
Booster	src/c_api.cpp	/^  explicit Booster(const char* filename) {$/;"	f	class:LightGBM::Booster
Booster	src/c_api.cpp	/^class Booster {$/;"	c	namespace:LightGBM	file:
BoosterHandle	include/LightGBM/c_api.h	/^typedef void* BoosterHandle;$/;"	t
Boosting	include/LightGBM/boosting.h	/^class LIGHTGBM_EXPORT Boosting {$/;"	c	namespace:LightGBM
Boosting	src/boosting/gbdt.cpp	/^void GBDT::Boosting() { \/\/\/ 计算全部样本的gradients和hessians$/;"	f	class:LightGBM::GBDT
BoostingConfig	include/LightGBM/config.h	/^struct BoostingConfig: public ConfigBase {$/;"	s	namespace:LightGBM
BruckMap	include/LightGBM/network.h	/^class BruckMap {$/;"	c	namespace:LightGBM
BruckMap	src/network/linker_topo.cpp	/^BruckMap::BruckMap() {$/;"	f	class:LightGBM::BruckMap
BruckMap	src/network/linker_topo.cpp	/^BruckMap::BruckMap(int n) {$/;"	f	class:LightGBM::BruckMap
BuildGPUKernels	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::BuildGPUKernels() {$/;"	f	class:LightGBM::GPUTreeLearner
BytesIO	python-package/lightgbm/plotting.py	/^from io import BytesIO$/;"	i
CHECK	include/LightGBM/utils/log.h	/^#define CHECK(/;"	d
CHECK_CALL	src/lightgbm_R.cpp	/^#define CHECK_CALL(/;"	d	file:
CHECK_NOTNULL	include/LightGBM/utils/log.h	/^#define CHECK_NOTNULL(/;"	d
COL_MAJOR	src/lightgbm_R.cpp	/^#define COL_MAJOR /;"	d	file:
COMMENTS	include/LightGBM/json11.hpp	/^    STANDARD, COMMENTS$/;"	e	enum:json11::JsonParse
CSC_RowIterator	src/c_api.cpp	/^CSC_RowIterator::CSC_RowIterator(const void* col_ptr, int col_ptr_type, const int32_t* indices,$/;"	f	class:CSC_RowIterator
CSC_RowIterator	src/c_api.cpp	/^class CSC_RowIterator {$/;"	c	file:
CSV	src/io/parser.cpp	/^  CSV,$/;"	e	enum:LightGBM::DataType	file:
CSVParser	src/io/parser.hpp	/^  explicit CSVParser(int label_idx, int total_columns)$/;"	f	class:LightGBM::CSVParser
CSVParser	src/io/parser.hpp	/^class CSVParser: public Parser {$/;"	c	namespace:LightGBM
CVBooster	python-package/lightgbm/engine.py	/^class CVBooster(object):$/;"	c
C_API_DTYPE_FLOAT32	include/LightGBM/c_api.h	/^#define C_API_DTYPE_FLOAT32 /;"	d
C_API_DTYPE_FLOAT32	python-package/lightgbm/basic.py	/^C_API_DTYPE_FLOAT32 = 0$/;"	v
C_API_DTYPE_FLOAT64	include/LightGBM/c_api.h	/^#define C_API_DTYPE_FLOAT64 /;"	d
C_API_DTYPE_FLOAT64	python-package/lightgbm/basic.py	/^C_API_DTYPE_FLOAT64 = 1$/;"	v
C_API_DTYPE_INT32	include/LightGBM/c_api.h	/^#define C_API_DTYPE_INT32 /;"	d
C_API_DTYPE_INT32	python-package/lightgbm/basic.py	/^C_API_DTYPE_INT32 = 2$/;"	v
C_API_DTYPE_INT64	include/LightGBM/c_api.h	/^#define C_API_DTYPE_INT64 /;"	d
C_API_DTYPE_INT64	python-package/lightgbm/basic.py	/^C_API_DTYPE_INT64 = 3$/;"	v
C_API_IS_ROW_MAJOR	python-package/lightgbm/basic.py	/^C_API_IS_ROW_MAJOR = 1$/;"	v
C_API_PREDICT_CONTRIB	include/LightGBM/c_api.h	/^#define C_API_PREDICT_CONTRIB /;"	d
C_API_PREDICT_CONTRIB	python-package/lightgbm/basic.py	/^C_API_PREDICT_CONTRIB = 3$/;"	v
C_API_PREDICT_LEAF_INDEX	include/LightGBM/c_api.h	/^#define C_API_PREDICT_LEAF_INDEX /;"	d
C_API_PREDICT_LEAF_INDEX	python-package/lightgbm/basic.py	/^C_API_PREDICT_LEAF_INDEX = 2$/;"	v
C_API_PREDICT_NORMAL	include/LightGBM/c_api.h	/^#define C_API_PREDICT_NORMAL /;"	d
C_API_PREDICT_NORMAL	python-package/lightgbm/basic.py	/^C_API_PREDICT_NORMAL = 0$/;"	v
C_API_PREDICT_RAW_SCORE	include/LightGBM/c_api.h	/^#define C_API_PREDICT_RAW_SCORE /;"	d
C_API_PREDICT_RAW_SCORE	python-package/lightgbm/basic.py	/^C_API_PREDICT_RAW_SCORE = 1$/;"	v
CalDCG	src/metric/dcg_calculator.cpp	/^void DCGCalculator::CalDCG(const std::vector<data_size_t>& ks, const label_t* label,$/;"	f	class:LightGBM::DCGCalculator
CalDCGAtK	src/metric/dcg_calculator.cpp	/^double DCGCalculator::CalDCGAtK(data_size_t k, const label_t* label,$/;"	f	class:LightGBM::DCGCalculator
CalMapAtK	src/metric/map_metric.hpp	/^  void CalMapAtK(std::vector<int> ks, data_size_t npos, const label_t* label,$/;"	f	class:LightGBM::MapMetric
CalMaxDCG	src/metric/dcg_calculator.cpp	/^void DCGCalculator::CalMaxDCG(const std::vector<data_size_t>& ks,$/;"	f	class:LightGBM::DCGCalculator
CalMaxDCGAtK	src/metric/dcg_calculator.cpp	/^double DCGCalculator::CalMaxDCGAtK(data_size_t k, const label_t* label, data_size_t num_data) {$/;"	f	class:LightGBM::DCGCalculator
CalculateSplittedLeafOutput	src/treelearner/feature_histogram.hpp	/^  static double CalculateSplittedLeafOutput(double sum_gradients, double sum_hessians, double l1, double l2, double max_delta_step) {$/;"	f	class:LightGBM::FeatureHistogram
CalculateSplittedLeafOutput	src/treelearner/feature_histogram.hpp	/^  static double CalculateSplittedLeafOutput(double sum_gradients, double sum_hessians, double l1, double l2, double max_delta_step,$/;"	f	class:LightGBM::FeatureHistogram
CallbackEnv	python-package/lightgbm/callback.py	/^CallbackEnv = collections.namedtuple($/;"	v
CaptureException	include/LightGBM/utils/openmp_wrapper.h	/^  void CaptureException() {$/;"	f	class:ThreadExceptionHelper
CategoricalBin	include/LightGBM/bin.h	/^  CategoricalBin$/;"	e	enum:LightGBM::BinType
CategoricalDecision	include/LightGBM/tree.h	/^  inline int CategoricalDecision(double fval, int node) const {$/;"	f	class:LightGBM::Tree
CategoricalDecisionIfElse	src/io/tree.cpp	/^std::string Tree::CategoricalDecisionIfElse(int node) const {$/;"	f	class:LightGBM::Tree
CategoricalDecisionInner	include/LightGBM/tree.h	/^  inline int CategoricalDecisionInner(uint32_t fval, int node) const {$/;"	f	class:LightGBM::Tree
CheckAlign	include/LightGBM/bin.h	/^  bool CheckAlign(const BinMapper& other) const {$/;"	f	class:LightGBM::BinMapper
CheckAlign	include/LightGBM/dataset.h	/^  LIGHTGBM_EXPORT bool CheckAlign(const Dataset& other) const {$/;"	f	class:LightGBM::Dataset
CheckAllZero	include/LightGBM/utils/array_args.h	/^  inline static bool CheckAllZero(const std::vector<VAL_T>& array) {$/;"	f	class:LightGBM::ArrayArgs
CheckCanLoadFromBin	src/io/dataset_loader.cpp	/^std::string DatasetLoader::CheckCanLoadFromBin(const char* filename) {$/;"	f	class:LightGBM::DatasetLoader
CheckDataset	src/io/dataset_loader.cpp	/^void DatasetLoader::CheckDataset(const Dataset* dataset) {$/;"	f	class:LightGBM::DatasetLoader
CheckDoubleEqualOrdered	include/LightGBM/utils/common.h	/^inline static bool CheckDoubleEqualOrdered(double a, double b) {$/;"	f	namespace:LightGBM::Common
CheckElementsIntervalClosed	include/LightGBM/utils/common.h	/^inline static void CheckElementsIntervalClosed(const T *y, T ymin, T ymax, int ny, const char *callername) {$/;"	f	namespace:LightGBM::Common
CheckLabel	src/metric/dcg_calculator.cpp	/^void DCGCalculator::CheckLabel(const label_t* label, data_size_t num_data) {$/;"	f	class:LightGBM::DCGCalculator
CheckLinker	src/network/linkers_socket.cpp	/^bool Linkers::CheckLinker(int rank) {$/;"	f	class:LightGBM::Linkers
CheckMultiClassObjective	src/io/config.cpp	/^bool CheckMultiClassObjective(const std::string& objective_type) {$/;"	f	namespace:LightGBM
CheckOrPartition	src/io/metadata.cpp	/^void Metadata::CheckOrPartition(data_size_t num_all_data, const std::vector<data_size_t>& used_data_indices) {$/;"	f	class:LightGBM::Metadata
CheckParamConflict	src/io/config.cpp	/^void OverallConfig::CheckParamConflict() {$/;"	f	class:LightGBM::OverallConfig
ClassifierMixin	python-package/lightgbm/compat.py	/^    from sklearn.base import RegressorMixin, ClassifierMixin$/;"	i
Clear	include/LightGBM/utils/text_reader.h	/^  inline void Clear() {$/;"	f	class:LightGBM::TextReader
ClearPredictBuffer	src/application/predictor.hpp	/^  void ClearPredictBuffer(double* pred_buf, size_t buf_size, const std::vector<std::pair<int, double>>& features) {$/;"	f	class:LightGBM::Predictor
Close	src/network/socket_wrapper.hpp	/^  inline void Close() {$/;"	f	class:LightGBM::TcpSocket
Common	include/LightGBM/utils/common.h	/^namespace Common {$/;"	n	namespace:LightGBM
CompareHistograms	src/treelearner/gpu_tree_learner.cpp	/^void CompareHistograms(HistogramBinEntry* h1, HistogramBinEntry* h2, size_t size, int feature_id) {$/;"	f	namespace:LightGBM
ConfigBase	include/LightGBM/config.h	/^struct ConfigBase {$/;"	s	namespace:LightGBM
ConfigSocket	src/network/socket_wrapper.hpp	/^  inline void ConfigSocket() {$/;"	f	class:LightGBM::TcpSocket
Connect	src/network/socket_wrapper.hpp	/^  inline bool Connect(const char *url, int port) {$/;"	f	class:LightGBM::TcpSocket
ConstPtrInVectorWrapper	include/LightGBM/utils/common.h	/^std::vector<const T*> ConstPtrInVectorWrapper(const std::vector<std::unique_ptr<T>>& input) {$/;"	f	namespace:LightGBM::Common
Construct	src/io/dataset.cpp	/^void Dataset::Construct($/;"	f	class:LightGBM::Dataset
Construct	src/network/linker_topo.cpp	/^BruckMap BruckMap::Construct(int rank, int num_machines) {$/;"	f	class:LightGBM::BruckMap
Construct	src/network/linker_topo.cpp	/^RecursiveHalvingMap RecursiveHalvingMap::Construct(int rank, int num_machines) {$/;"	f	class:LightGBM::RecursiveHalvingMap
Construct	src/network/linkers_socket.cpp	/^void Linkers::Construct() {$/;"	f	class:LightGBM::Linkers
ConstructBinMappersFromTextData	src/io/dataset_loader.cpp	/^void DatasetLoader::ConstructBinMappersFromTextData(int rank, int num_machines, const std::vector<std::string>& sample_data, const Parser* parser, Dataset* dataset) {$/;"	f	class:LightGBM::DatasetLoader
ConstructBitset	include/LightGBM/utils/common.h	/^inline static std::vector<uint32_t> ConstructBitset(const T* vals, int n) {$/;"	f	namespace:LightGBM::Common
ConstructGPUHistogramsAsync	src/treelearner/gpu_tree_learner.cpp	/^bool GPUTreeLearner::ConstructGPUHistogramsAsync($/;"	f	class:LightGBM::GPUTreeLearner
ConstructHistograms	src/io/dataset.cpp	/^void Dataset::ConstructHistograms(const std::vector<int8_t>& is_feature_used,$/;"	f	class:LightGBM::Dataset
ConstructHistograms	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::ConstructHistograms(const std::vector<int8_t>& is_feature_used, bool use_subtract) {$/;"	f	class:LightGBM::GPUTreeLearner
ConstructHistograms	src/treelearner/serial_tree_learner.cpp	/^void SerialTreeLearner::ConstructHistograms(const std::vector<int8_t>& is_feature_used, bool use_subtract) {$/;"	f	class:LightGBM::SerialTreeLearner
ConstructSigmoidTable	src/objective/IPWi_rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConstructSigmoidTable	src/objective/IPWij_rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConstructSigmoidTable	src/objective/SCOREwy_rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConstructSigmoidTable	src/objective/SCOREzn_rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConstructSigmoidTable	src/objective/e2e_IPWi_rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConstructSigmoidTable	src/objective/e2e_IPWij_rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConstructSigmoidTable	src/objective/rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConstructSigmoidTable	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConstructSigmoidTable	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConstructSigmoidTable	src/objective/zinu/ndcg_rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConstructSigmoidTable	src/objective/zinu/score_rank_objective.hpp	/^  void ConstructSigmoidTable() {$/;"	f	class:LightGBM::LambdarankNDCG
ConvertModel	src/application/application.cpp	/^void Application::ConvertModel() {$/;"	f	class:LightGBM::Application
ConvertOutput	include/LightGBM/objective_function.h	/^  virtual void ConvertOutput(const double* input, double* output) const {$/;"	f	class:LightGBM::ObjectiveFunction
ConvertTreeOutput	src/boosting/rf.hpp	/^  void ConvertTreeOutput(Tree* tree) {$/;"	f	class:LightGBM::RF
CopyFeatureMapperFrom	src/io/dataset.cpp	/^void Dataset::CopyFeatureMapperFrom(const Dataset* dataset) {$/;"	f	class:LightGBM::Dataset
CopyFrom	src/io/bin.cpp	/^  void BinMapper::CopyFrom(const char * buffer) {$/;"	f	class:LightGBM::BinMapper
CopyFrom	src/treelearner/split_info.hpp	/^  void CopyFrom(const SplitInfo& other) {$/;"	f	struct:LightGBM::LightSplitInfo
CopyFrom	src/treelearner/split_info.hpp	/^  void CopyFrom(const char* buffer) {$/;"	f	struct:LightGBM::LightSplitInfo
CopyFrom	src/treelearner/split_info.hpp	/^  void CopyFrom(const char* buffer) {$/;"	f	struct:LightGBM::SplitInfo
CopyLocalHistogram	src/treelearner/voting_parallel_tree_learner.cpp	/^void VotingParallelTreeLearner<TREELEARNER_T>::CopyLocalHistogram(const std::vector<int>& smaller_top_features, const std::vector<int>& larger_top_features) {$/;"	f	class:LightGBM::VotingParallelTreeLearner
CopySubset	include/LightGBM/feature_group.h	/^  inline void CopySubset(const FeatureGroup* full_feature, const data_size_t* used_indices, data_size_t num_used_indices) {$/;"	f	class:LightGBM::FeatureGroup
CopySubset	src/io/dataset.cpp	/^void Dataset::CopySubset(const Dataset* fullset, const data_size_t* used_indices, data_size_t num_used_indices, bool need_meta_data) {$/;"	f	class:LightGBM::Dataset
CopyTo	src/io/bin.cpp	/^  void BinMapper::CopyTo(char * buffer) const {$/;"	f	class:LightGBM::BinMapper
CopyTo	src/treelearner/split_info.hpp	/^  inline void CopyTo(char* buffer) const {$/;"	f	struct:LightGBM::SplitInfo
CopyToPredictBuffer	src/application/predictor.hpp	/^  void CopyToPredictBuffer(double* pred_buf, const std::vector<std::pair<int, double>>& features) {$/;"	f	class:LightGBM::Predictor
CopyToPredictMap	src/application/predictor.hpp	/^  std::unordered_map<int, double> CopyToPredictMap(const std::vector<std::pair<int, double>>& features) {$/;"	f	class:LightGBM::Predictor
CostructFromSampleData	src/io/dataset_loader.cpp	/^Dataset* DatasetLoader::CostructFromSampleData(double** sample_values,$/;"	f	class:LightGBM::DatasetLoader
CountDecimalDigit32	include/LightGBM/utils/common.h	/^inline static unsigned CountDecimalDigit32(uint32_t n) {$/;"	f	namespace:LightGBM::Common
CountLine	include/LightGBM/utils/text_reader.h	/^  INDEX_T CountLine() {$/;"	f	class:LightGBM::TextReader
CreateBin	src/io/bin.cpp	/^  Bin* Bin::CreateBin(data_size_t num_data, int num_bin, double sparse_rate,$/;"	f	class:LightGBM::Bin
CreateBinary	src/boosting/prediction_early_stop.cpp	/^PredictionEarlyStopInstance CreateBinary(const PredictionEarlyStopConfig& config) {$/;"	f	namespace:__anon4
CreateBoosting	src/boosting/boosting.cpp	/^Boosting* Boosting::CreateBoosting(const std::string& type, const char* filename) {$/;"	f	class:LightGBM::Boosting
CreateDenseBin	src/io/bin.cpp	/^  Bin* Bin::CreateDenseBin(data_size_t num_data, int num_bin) {$/;"	f	class:LightGBM::Bin
CreateMetric	src/metric/metric.cpp	/^Metric* Metric::CreateMetric(const std::string& type, const MetricConfig& config) {$/;"	f	class:LightGBM::Metric
CreateMulticlass	src/boosting/prediction_early_stop.cpp	/^PredictionEarlyStopInstance CreateMulticlass(const PredictionEarlyStopConfig& config) {$/;"	f	namespace:__anon4
CreateNone	src/boosting/prediction_early_stop.cpp	/^PredictionEarlyStopInstance CreateNone(const PredictionEarlyStopConfig&) {$/;"	f	namespace:__anon4
CreateObjectiveAndMetrics	src/c_api.cpp	/^  void CreateObjectiveAndMetrics() {$/;"	f	class:LightGBM::Booster
CreateObjectiveFunction	src/objective/objective_function.cpp	/^ObjectiveFunction* ObjectiveFunction::CreateObjectiveFunction(const std::string& str) {$/;"	f	class:LightGBM::ObjectiveFunction
CreateObjectiveFunction	src/objective/objective_function.cpp	/^ObjectiveFunction* ObjectiveFunction::CreateObjectiveFunction(const std::string& type, const ObjectiveConfig& config) {$/;"	f	class:LightGBM::ObjectiveFunction
CreateOrderedBin	src/io/ordered_sparse_bin.hpp	/^OrderedBin* SparseBin<VAL_T>::CreateOrderedBin() const {$/;"	f	class:LightGBM::SparseBin
CreateOrderedBins	include/LightGBM/dataset.h	/^  inline void CreateOrderedBins(std::vector<std::unique_ptr<OrderedBin>>* ordered_bins) const {$/;"	f	class:LightGBM::Dataset
CreateParser	src/io/parser.cpp	/^Parser* Parser::CreateParser(const char* filename, bool has_header, int num_features, int label_idx) {$/;"	f	class:LightGBM::Parser
CreatePredictionEarlyStopInstance	src/boosting/prediction_early_stop.cpp	/^PredictionEarlyStopInstance CreatePredictionEarlyStopInstance(const std::string& type,$/;"	f	namespace:LightGBM
CreateSparseBin	src/io/bin.cpp	/^  Bin* Bin::CreateSparseBin(data_size_t num_data, int num_bin) {$/;"	f	class:LightGBM::Bin
CreateTreeLearner	src/treelearner/tree_learner.cpp	/^TreeLearner* TreeLearner::CreateTreeLearner(const std::string& learner_type, const std::string& device_type, const TreeConfig* tree_config) {$/;"	f	class:LightGBM::TreeLearner
CreateValid	src/io/dataset.cpp	/^void Dataset::CreateValid(const Dataset* dataset) {$/;"	f	class:LightGBM::Dataset
CrossEntropy	src/objective/xentropy_objective.hpp	/^  explicit CrossEntropy(const ObjectiveConfig&) {$/;"	f	class:LightGBM::CrossEntropy
CrossEntropy	src/objective/xentropy_objective.hpp	/^  explicit CrossEntropy(const std::vector<std::string>&) {$/;"	f	class:LightGBM::CrossEntropy
CrossEntropy	src/objective/xentropy_objective.hpp	/^class CrossEntropy: public ObjectiveFunction {$/;"	c	namespace:LightGBM
CrossEntropyLambda	src/objective/xentropy_objective.hpp	/^  explicit CrossEntropyLambda(const ObjectiveConfig&) {$/;"	f	class:LightGBM::CrossEntropyLambda
CrossEntropyLambda	src/objective/xentropy_objective.hpp	/^  explicit CrossEntropyLambda(const std::vector<std::string>&) {$/;"	f	class:LightGBM::CrossEntropyLambda
CrossEntropyLambda	src/objective/xentropy_objective.hpp	/^class CrossEntropyLambda: public ObjectiveFunction {$/;"	c	namespace:LightGBM
CrossEntropyLambdaMetric	src/metric/xentropy_metric.hpp	/^  explicit CrossEntropyLambdaMetric(const MetricConfig&) {}$/;"	f	class:LightGBM::CrossEntropyLambdaMetric
CrossEntropyLambdaMetric	src/metric/xentropy_metric.hpp	/^class CrossEntropyLambdaMetric : public Metric {$/;"	c	namespace:LightGBM
CrossEntropyMetric	src/metric/xentropy_metric.hpp	/^	explicit CrossEntropyMetric(const MetricConfig&) {}$/;"	f	class:LightGBM::CrossEntropyMetric
CrossEntropyMetric	src/metric/xentropy_metric.hpp	/^class CrossEntropyMetric : public Metric {$/;"	c	namespace:LightGBM
CustomInstall	python-package/setup.py	/^class CustomInstall(install):$/;"	c
CustomInstallLib	python-package/setup.py	/^class CustomInstallLib(install_lib):$/;"	c
CustomSdist	python-package/setup.py	/^class CustomSdist(sdist):$/;"	c
DART	src/boosting/dart.hpp	/^  DART() : GBDT() { }$/;"	f	class:LightGBM::DART
DART	src/boosting/dart.hpp	/^class DART: public GBDT {$/;"	c	namespace:LightGBM
DATAPTR	include/LightGBM/R_object_helper.h	/^#define DATAPTR(/;"	d
DCGCalculator	include/LightGBM/metric.h	/^class DCGCalculator {$/;"	c	namespace:LightGBM
DataFrame	python-package/lightgbm/basic.py	/^from .compat import (DataFrame, LGBMDeprecationWarning, Series,$/;"	i
DataFrame	python-package/lightgbm/compat.py	/^    class DataFrame(object):$/;"	c	function:json_default_with_numpy
DataFrame	python-package/lightgbm/compat.py	/^    from pandas import Series, DataFrame$/;"	i
DataParallelTreeLearner	src/treelearner/data_parallel_tree_learner.cpp	/^DataParallelTreeLearner<TREELEARNER_T>::DataParallelTreeLearner(const TreeConfig* tree_config)$/;"	f	class:LightGBM::DataParallelTreeLearner
DataParallelTreeLearner	src/treelearner/parallel_tree_learner.h	/^class DataParallelTreeLearner: public TREELEARNER_T {$/;"	c	namespace:LightGBM
DataPartition	src/treelearner/data_partition.hpp	/^  DataPartition(data_size_t num_data, int num_leaves)$/;"	f	class:LightGBM::DataPartition
DataPartition	src/treelearner/data_partition.hpp	/^class DataPartition {$/;"	c	namespace:LightGBM
DataType	src/io/parser.cpp	/^enum DataType {$/;"	g	namespace:LightGBM	file:
Dataset	include/LightGBM/dataset.h	/^class Dataset {$/;"	c	namespace:LightGBM
Dataset	python-package/lightgbm/__init__.py	/^from .basic import Booster, Dataset$/;"	i
Dataset	python-package/lightgbm/basic.py	/^class Dataset(object):$/;"	c
Dataset	python-package/lightgbm/engine.py	/^from .basic import Booster, Dataset, LightGBMError, _InnerPredictor$/;"	i
Dataset	python-package/lightgbm/sklearn.py	/^from .basic import Dataset, LightGBMError$/;"	i
Dataset	src/io/dataset.cpp	/^Dataset::Dataset() {$/;"	f	class:LightGBM::Dataset
Dataset	src/io/dataset.cpp	/^Dataset::Dataset(data_size_t num_data) {$/;"	f	class:LightGBM::Dataset
DatasetHandle	include/LightGBM/c_api.h	/^typedef void* DatasetHandle;$/;"	t
DatasetLoader	include/LightGBM/dataset_loader.h	/^class DatasetLoader {$/;"	c	namespace:LightGBM
DatasetLoader	src/io/dataset_loader.cpp	/^DatasetLoader::DatasetLoader(const IOConfig& io_config, const PredictFunction& predict_fun, int num_class, const char* filename)$/;"	f	class:LightGBM::DatasetLoader
Debug	include/LightGBM/utils/log.h	/^  Debug = 2,$/;"	m	class:LightGBM::LogLevel
Debug	include/LightGBM/utils/log.h	/^  static void Debug(const char *format, ...) {$/;"	f	class:LightGBM::Log
Decision	include/LightGBM/tree.h	/^  inline int Decision(double fval, int node) const {$/;"	f	class:LightGBM::Tree
DecisionInner	include/LightGBM/tree.h	/^  inline int DecisionInner(uint32_t fval, int node, uint32_t default_bin, uint32_t max_bin) const {$/;"	f	class:LightGBM::Tree
Dense4bitsBin	src/io/dense_nbits_bin.hpp	/^  Dense4bitsBin(data_size_t num_data)$/;"	f	class:LightGBM::Dense4bitsBin
Dense4bitsBin	src/io/dense_nbits_bin.hpp	/^class Dense4bitsBin : public Bin {$/;"	c	namespace:LightGBM
Dense4bitsBinIterator	src/io/dense_nbits_bin.hpp	/^  explicit Dense4bitsBinIterator(const Dense4bitsBin* bin_data, uint32_t min_bin, uint32_t max_bin, uint32_t default_bin)$/;"	f	class:LightGBM::Dense4bitsBinIterator
Dense4bitsBinIterator	src/io/dense_nbits_bin.hpp	/^class Dense4bitsBinIterator : public BinIterator {$/;"	c	namespace:LightGBM
DenseBin	src/io/dense_bin.hpp	/^  DenseBin(data_size_t num_data)$/;"	f	class:LightGBM::DenseBin
DenseBin	src/io/dense_bin.hpp	/^class DenseBin: public Bin {$/;"	c	namespace:LightGBM
DenseBinIterator	src/io/dense_bin.hpp	/^  explicit DenseBinIterator(const DenseBin<VAL_T>* bin_data, uint32_t min_bin, uint32_t max_bin, uint32_t default_bin)$/;"	f	class:LightGBM::DenseBinIterator
DenseBinIterator	src/io/dense_bin.hpp	/^class DenseBinIterator: public BinIterator {$/;"	c	namespace:LightGBM
Digraph	python-package/lightgbm/plotting.py	/^        from graphviz import Digraph$/;"	i
Dispose	src/network/network.cpp	/^void Network::Dispose() {$/;"	f	class:LightGBM::Network
DoubleToStr	include/LightGBM/utils/common.h	/^inline static void DoubleToStr(double value, char* buffer, size_t $/;"	f	namespace:LightGBM::Common
DroppingTrees	src/boosting/dart.hpp	/^  void DroppingTrees() {$/;"	f	class:LightGBM::DART
DumpModel	src/boosting/gbdt_model_text.cpp	/^std::string GBDT::DumpModel(int num_iteration) const {$/;"	f	class:LightGBM::GBDT
DumpModel	src/c_api.cpp	/^  std::string DumpModel(int num_iteration) {$/;"	f	class:LightGBM::Booster
DynamicChangeSize	src/treelearner/feature_histogram.hpp	/^  void DynamicChangeSize(const Dataset* train_data, const TreeConfig* tree_config, int cache_size, int total_size) {$/;"	f	class:LightGBM::HistogramPool
EarlyStopException	python-package/lightgbm/callback.py	/^class EarlyStopException(Exception):$/;"	c
EncodeChar	src/lightgbm_R.cpp	/^LGBM_SE EncodeChar(LGBM_SE dest, const char* src, LGBM_SE buf_len, LGBM_SE actual_len, size_t str_len) {$/;"	f
EvalAndCheckEarlyStopping	src/boosting/gbdt.cpp	/^bool GBDT::EvalAndCheckEarlyStopping() {$/;"	f	class:LightGBM::GBDT
EvalOneMetric	src/boosting/gbdt.cpp	/^std::vector<double> GBDT::EvalOneMetric(const Metric* metric, const double* score) const { \/\/\/ 按metric评测一次$/;"	f	class:LightGBM::GBDT
Exists	src/io/file_io.cpp	/^  bool Exists() const {$/;"	f	struct:LightGBM::HDFSFile
Exists	src/io/file_io.cpp	/^  bool Exists() const {$/;"	f	struct:LightGBM::LocalFile
Exists	src/io/file_io.cpp	/^bool VirtualFileWriter::Exists(const std::string& filename) {$/;"	f	class:LightGBM::VirtualFileWriter
ExpectedValue	src/io/tree.cpp	/^double Tree::ExpectedValue() const {$/;"	f	class:LightGBM::Tree
ExtendPath	src/io/tree.cpp	/^void Tree::ExtendPath(PathElement *unique_path, int unique_depth,$/;"	f	class:LightGBM::Tree
ExtractFeaturesFromFile	src/io/dataset_loader.cpp	/^void DatasetLoader::ExtractFeaturesFromFile(const char* filename, const Parser* parser, const std::vector<data_size_t>& used_data_indices, Dataset* dataset) {$/;"	f	class:LightGBM::DatasetLoader
ExtractFeaturesFromMemory	src/io/dataset_loader.cpp	/^void DatasetLoader::ExtractFeaturesFromMemory(std::vector<std::string>& text_data, const Parser* parser, Dataset* dataset) {$/;"	f	class:LightGBM::DatasetLoader
FIELD_TYPE_MAPPER	python-package/lightgbm/basic.py	/^FIELD_TYPE_MAPPER = {"label": C_API_DTYPE_FLOAT32,$/;"	v
FREE	src/network/socket_wrapper.hpp	/^#define FREE(/;"	d
FairLossMetric	src/metric/regression_metric.hpp	/^  explicit FairLossMetric(const MetricConfig& config) :RegressionMetric<FairLossMetric>(config) {$/;"	f	class:LightGBM::FairLossMetric
FairLossMetric	src/metric/regression_metric.hpp	/^class FairLossMetric: public RegressionMetric<FairLossMetric> {$/;"	c	namespace:LightGBM
FastFeatureBundling	src/io/dataset.cpp	/^std::vector<std::vector<int>> FastFeatureBundling(std::vector<std::unique_ptr<BinMapper>>& bin_mappers,$/;"	f	namespace:LightGBM
Fatal	include/LightGBM/utils/log.h	/^  Fatal = -1,$/;"	m	class:LightGBM::LogLevel
Fatal	include/LightGBM/utils/log.h	/^  static void Fatal(const char *format, ...) {$/;"	f	class:LightGBM::Log
Feature2Group	include/LightGBM/dataset.h	/^  inline int Feature2Group(int feature_idx) const {$/;"	f	class:LightGBM::Dataset
Feature4	src/treelearner/gpu_tree_learner.h	/^  struct Feature4 {$/;"	s	class:LightGBM::GPUTreeLearner
FeatureBin	include/LightGBM/dataset.h	/^  inline const Bin* FeatureBin(int i) const {$/;"	f	class:LightGBM::Dataset
FeatureBinMapper	include/LightGBM/dataset.h	/^  inline const BinMapper* FeatureBinMapper(int i) const {$/;"	f	class:LightGBM::Dataset
FeatureGroup	include/LightGBM/feature_group.h	/^  FeatureGroup(const void* memory, data_size_t num_all_data,$/;"	f	class:LightGBM::FeatureGroup
FeatureGroup	include/LightGBM/feature_group.h	/^  FeatureGroup(int num_feature,$/;"	f	class:LightGBM::FeatureGroup
FeatureGroup	include/LightGBM/feature_group.h	/^class FeatureGroup {$/;"	c	namespace:LightGBM
FeatureGroupBin	include/LightGBM/dataset.h	/^  inline const Bin* FeatureGroupBin(int group) const {$/;"	f	class:LightGBM::Dataset
FeatureGroupIsSparse	include/LightGBM/dataset.h	/^  inline bool FeatureGroupIsSparse(int group) const {$/;"	f	class:LightGBM::Dataset
FeatureGroupIterator	include/LightGBM/dataset.h	/^  inline BinIterator* FeatureGroupIterator(int group) const {$/;"	f	class:LightGBM::Dataset
FeatureGroupIterator	include/LightGBM/feature_group.h	/^  inline BinIterator* FeatureGroupIterator() {$/;"	f	class:LightGBM::FeatureGroup
FeatureGroupNumBin	include/LightGBM/dataset.h	/^  inline int FeatureGroupNumBin(int group) const {$/;"	f	class:LightGBM::Dataset
FeatureHistogram	src/treelearner/feature_histogram.hpp	/^  FeatureHistogram() {$/;"	f	class:LightGBM::FeatureHistogram
FeatureHistogram	src/treelearner/feature_histogram.hpp	/^class FeatureHistogram {$/;"	c	namespace:LightGBM
FeatureImportance	src/boosting/gbdt_model_text.cpp	/^std::vector<double> GBDT::FeatureImportance(int num_iteration, int importance_type) const {$/;"	f	class:LightGBM::GBDT
FeatureImportance	src/c_api.cpp	/^  std::vector<double> FeatureImportance(int num_iteration, int importance_type) {$/;"	f	class:LightGBM::Booster
FeatureIterator	include/LightGBM/dataset.h	/^  inline BinIterator* FeatureIterator(int i) const {$/;"	f	class:LightGBM::Dataset
FeatureMetainfo	src/treelearner/feature_histogram.hpp	/^class FeatureMetainfo {$/;"	c	namespace:LightGBM
FeatureMonotone	include/LightGBM/dataset.h	/^  inline int8_t FeatureMonotone(int i) const {$/;"	f	class:LightGBM::Dataset
FeatureNumBin	include/LightGBM/dataset.h	/^  inline int FeatureNumBin(int i) const {$/;"	f	class:LightGBM::Dataset
FeatureParallelTreeLearner	src/treelearner/feature_parallel_tree_learner.cpp	/^FeatureParallelTreeLearner<TREELEARNER_T>::FeatureParallelTreeLearner(const TreeConfig* tree_config)$/;"	f	class:LightGBM::FeatureParallelTreeLearner
FeatureParallelTreeLearner	src/treelearner/parallel_tree_learner.h	/^class FeatureParallelTreeLearner: public TREELEARNER_T {$/;"	c	namespace:LightGBM
Feture2SubFeature	include/LightGBM/dataset.h	/^  inline int Feture2SubFeature(int feature_idx) const {$/;"	f	class:LightGBM::Dataset
FileLoader	tests/python_package_test/test_consistency.py	/^class FileLoader(object):$/;"	c
FileOperation	src/io/file_io.cpp	/^  inline size_t FileOperation(BufferType data, size_t bytes, fileOp<BufferType> op) const {$/;"	f	struct:LightGBM::HDFSFile	file:
Finalize	src/network/socket_wrapper.hpp	/^  inline static void Finalize() {$/;"	f	class:LightGBM::TcpSocket
FindBestSplits	src/treelearner/data_parallel_tree_learner.cpp	/^void DataParallelTreeLearner<TREELEARNER_T>::FindBestSplits() {$/;"	f	class:LightGBM::DataParallelTreeLearner
FindBestSplits	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::FindBestSplits() {$/;"	f	class:LightGBM::GPUTreeLearner
FindBestSplits	src/treelearner/serial_tree_learner.cpp	/^void SerialTreeLearner::FindBestSplits() {$/;"	f	class:LightGBM::SerialTreeLearner
FindBestSplits	src/treelearner/voting_parallel_tree_learner.cpp	/^void VotingParallelTreeLearner<TREELEARNER_T>::FindBestSplits() {$/;"	f	class:LightGBM::VotingParallelTreeLearner
FindBestSplitsFromHistograms	src/treelearner/data_parallel_tree_learner.cpp	/^void DataParallelTreeLearner<TREELEARNER_T>::FindBestSplitsFromHistograms(const std::vector<int8_t>&, bool) {$/;"	f	class:LightGBM::DataParallelTreeLearner
FindBestSplitsFromHistograms	src/treelearner/feature_parallel_tree_learner.cpp	/^void FeatureParallelTreeLearner<TREELEARNER_T>::FindBestSplitsFromHistograms(const std::vector<int8_t>& is_feature_used, bool use_subtract) {$/;"	f	class:LightGBM::FeatureParallelTreeLearner
FindBestSplitsFromHistograms	src/treelearner/serial_tree_learner.cpp	/^void SerialTreeLearner::FindBestSplitsFromHistograms(const std::vector<int8_t>& is_feature_used, bool use_subtract) {$/;"	f	class:LightGBM::SerialTreeLearner
FindBestSplitsFromHistograms	src/treelearner/voting_parallel_tree_learner.cpp	/^void VotingParallelTreeLearner<TREELEARNER_T>::FindBestSplitsFromHistograms(const std::vector<int8_t>&, bool) {$/;"	f	class:LightGBM::VotingParallelTreeLearner
FindBestThreshold	src/treelearner/feature_histogram.hpp	/^  void FindBestThreshold(double sum_gradient, double sum_hessian, data_size_t num_data, double min_constraint, double max_constraint,$/;"	f	class:LightGBM::FeatureHistogram
FindBestThresholdCategorical	src/treelearner/feature_histogram.hpp	/^  void FindBestThresholdCategorical(double sum_gradient, double sum_hessian, data_size_t num_data,$/;"	f	class:LightGBM::FeatureHistogram
FindBestThresholdNumerical	src/treelearner/feature_histogram.hpp	/^  void FindBestThresholdNumerical(double sum_gradient, double sum_hessian, data_size_t num_data, double min_constraint, double max_constraint,$/;"	f	class:LightGBM::FeatureHistogram
FindBestThresholdSequence	src/treelearner/feature_histogram.hpp	/^  void FindBestThresholdSequence(double sum_gradient, double sum_hessian, data_size_t num_data, double min_constraint, double max_constraint,$/;"	f	class:LightGBM::FeatureHistogram
FindBin	src/io/bin.cpp	/^  void BinMapper::FindBin(double* values, int num_sample_values, size_t total_sample_cnt,$/;"	f	class:LightGBM::BinMapper
FindBinWithZeroAsOneBin	src/io/bin.cpp	/^  std::vector<double> FindBinWithZeroAsOneBin(const double* distinct_values, const int* counts,$/;"	f	namespace:LightGBM
FindGroups	src/io/dataset.cpp	/^std::vector<std::vector<int>> FindGroups(const std::vector<std::unique_ptr<BinMapper>>& bin_mappers,$/;"	f	namespace:LightGBM
FindInBitset	include/LightGBM/utils/common.h	/^inline static bool FindInBitset(const uint32_t* bits, int n, T pos) {$/;"	f	namespace:LightGBM::Common
FinishLoad	src/io/dataset.cpp	/^void Dataset::FinishLoad() {$/;"	f	class:LightGBM::Dataset
FitByExistingTree	src/treelearner/serial_tree_learner.cpp	/^Tree* SerialTreeLearner::FitByExistingTree(const Tree* old_tree, const score_t* gradients, const score_t *hessians) const {$/;"	f	class:LightGBM::SerialTreeLearner
FitByExistingTree	src/treelearner/serial_tree_learner.cpp	/^Tree* SerialTreeLearner::FitByExistingTree(const Tree* old_tree, const std::vector<int>& leaf_pred, const score_t* gradients, const score_t *hessians) {$/;"	f	class:LightGBM::SerialTreeLearner
FixHistogram	src/io/dataset.cpp	/^void Dataset::FixHistogram(int feature_idx, double sum_gradient, double sum_hessian, data_size_t num_data,$/;"	f	class:LightGBM::Dataset
Float_t	src/treelearner/gpu_tree_learner.cpp	/^union Float_t$/;"	u	namespace:LightGBM	file:
For	include/LightGBM/utils/threading.h	/^  static inline void For(INDEX_T start, INDEX_T end, const std::function<void(int, INDEX_T, INDEX_T)>& inner_fun) {$/;"	f	class:LightGBM::Threading
ForceSplits	src/treelearner/serial_tree_learner.cpp	/^int32_t SerialTreeLearner::ForceSplits(Tree* tree, Json& forced_split_json, int* left_leaf,$/;"	f	class:LightGBM::SerialTreeLearner
FromMemory	src/treelearner/feature_histogram.hpp	/^  void FromMemory(char* memory_data) {$/;"	f	class:LightGBM::FeatureHistogram
GBDT	src/boosting/gbdt.cpp	/^GBDT::GBDT() : iter_(0),$/;"	f	class:LightGBM::GBDT
GBDT	src/boosting/gbdt.h	/^class GBDT : public GBDTBase {$/;"	c	namespace:LightGBM
GBDTBase	include/LightGBM/boosting.h	/^class GBDTBase : public Boosting {$/;"	c	namespace:LightGBM
GOSS	src/boosting/goss.hpp	/^  GOSS() : GBDT() {$/;"	f	class:LightGBM::GOSS
GOSS	src/boosting/goss.hpp	/^class GOSS: public GBDT {$/;"	c	namespace:LightGBM
GPUHistogram	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::GPUHistogram(data_size_t leaf_num_data, bool use_all_features) {$/;"	f	class:LightGBM::GPUTreeLearner
GPUHistogramBinEntry	src/treelearner/gpu_tree_learner.h	/^  struct GPUHistogramBinEntry {$/;"	s	class:LightGBM::GPUTreeLearner
GPUTreeLearner	src/treelearner/gpu_tree_learner.cpp	/^GPUTreeLearner::GPUTreeLearner(const TreeConfig* tree_config)$/;"	f	class:LightGBM::GPUTreeLearner
GPUTreeLearner	src/treelearner/gpu_tree_learner.h	/^class GPUTreeLearner: public SerialTreeLearner {$/;"	c	namespace:LightGBM
GPU_DEBUG	src/treelearner/gpu_tree_learner.cpp	/^#define GPU_DEBUG /;"	d	file:
GammaDevianceMetric	src/metric/regression_metric.hpp	/^  explicit GammaDevianceMetric(const MetricConfig& config) :RegressionMetric<GammaDevianceMetric>(config) {$/;"	f	class:LightGBM::GammaDevianceMetric
GammaDevianceMetric	src/metric/regression_metric.hpp	/^class GammaDevianceMetric : public RegressionMetric<GammaDevianceMetric> {$/;"	c	namespace:LightGBM
GammaMetric	src/metric/regression_metric.hpp	/^  explicit GammaMetric(const MetricConfig& config) :RegressionMetric<GammaMetric>(config) {$/;"	f	class:LightGBM::GammaMetric
GammaMetric	src/metric/regression_metric.hpp	/^class GammaMetric : public RegressionMetric<GammaMetric> {$/;"	c	namespace:LightGBM
GatherInfoForThreshold	src/treelearner/feature_histogram.hpp	/^  void GatherInfoForThreshold(double sum_gradient, double sum_hessian,$/;"	f	class:LightGBM::FeatureHistogram
GatherInfoForThresholdCategorical	src/treelearner/feature_histogram.hpp	/^  void GatherInfoForThresholdCategorical(double sum_gradient, double sum_hessian,$/;"	f	class:LightGBM::FeatureHistogram
GatherInfoForThresholdNumerical	src/treelearner/feature_histogram.hpp	/^  void GatherInfoForThresholdNumerical(double sum_gradient, double sum_hessian,$/;"	f	class:LightGBM::FeatureHistogram
Get	src/c_api.cpp	/^double CSC_RowIterator::Get(int idx) {$/;"	f	class:CSC_RowIterator
Get	src/io/dense_bin.hpp	/^uint32_t DenseBinIterator<VAL_T>::Get(data_size_t idx) {$/;"	f	class:LightGBM::DenseBinIterator
Get	src/io/dense_nbits_bin.hpp	/^uint32_t Dense4bitsBinIterator::Get(data_size_t idx) {$/;"	f	class:LightGBM::Dense4bitsBinIterator
Get	src/treelearner/feature_histogram.hpp	/^  bool Get(int idx, FeatureHistogram** out) {$/;"	f	class:LightGBM::HistogramPool
GetAddress	src/network/socket_wrapper.hpp	/^  inline static sockaddr_in GetAddress(const char* url, int port) {$/;"	f	class:LightGBM::TcpSocket
GetBool	include/LightGBM/config.h	/^inline bool ConfigBase::GetBool($/;"	f	class:LightGBM::ConfigBase
GetBoosting	src/c_api.cpp	/^  const Boosting* GetBoosting() const { return boosting_.get(); }$/;"	f	class:LightGBM::Booster
GetBoostingType	src/io/config.cpp	/^void GetBoostingType(const std::unordered_map<std::string, std::string>& params, std::string* boosting_type) {$/;"	f	namespace:LightGBM
GetBoostingTypeFromModelFile	src/boosting/boosting.cpp	/^std::string GetBoostingTypeFromModelFile(const char* filename) {$/;"	f	namespace:LightGBM
GetBuildLog	src/treelearner/gpu_tree_learner.cpp	/^std::string GPUTreeLearner::GetBuildLog(const std::string &opts) {$/;"	f	class:LightGBM::GPUTreeLearner
GetConfilctCount	src/io/dataset.cpp	/^int GetConfilctCount(const std::vector<bool>& mark, const int* indices, int num_indices, int max_cnt) {$/;"	f	namespace:LightGBM
GetDecisionType	include/LightGBM/tree.h	/^  inline static bool GetDecisionType(int8_t decision_type, int8_t mask) {$/;"	f	class:LightGBM::Tree
GetDefaultBin	include/LightGBM/bin.h	/^  inline uint32_t GetDefaultBin() const {$/;"	f	class:LightGBM::BinMapper
GetDeviceType	src/io/config.cpp	/^void GetDeviceType(const std::unordered_map<std::string, std::string>& params, std::string* device_type) {$/;"	f	namespace:LightGBM
GetDiscount	include/LightGBM/metric.h	/^  inline static double GetDiscount(data_size_t k) { return discount_[k]; }$/;"	f	class:LightGBM::DCGCalculator
GetDouble	include/LightGBM/config.h	/^inline bool ConfigBase::GetDouble($/;"	f	class:LightGBM::ConfigBase
GetDoubleField	src/io/dataset.cpp	/^bool Dataset::GetDoubleField(const char* field_name, data_size_t* out_len, const double** out_ptr) {$/;"	f	class:LightGBM::Dataset
GetDoubleUpperBound	include/LightGBM/utils/common.h	/^inline static double GetDoubleUpperBound(double a) {$/;"	f	namespace:LightGBM::Common
GetEvalAt	src/boosting/gbdt.cpp	/^std::vector<double> GBDT::GetEvalAt(int data_idx) const {$/;"	f	class:LightGBM::GBDT
GetEvalCounts	src/c_api.cpp	/^  int GetEvalCounts() const {$/;"	f	class:LightGBM::Booster
GetEvalNames	src/c_api.cpp	/^  int GetEvalNames(char** out_strs) const {$/;"	f	class:LightGBM::Booster
GetFastIndex	src/io/sparse_bin.hpp	/^  void GetFastIndex() {$/;"	f	class:LightGBM::SparseBin
GetFeatureNames	src/c_api.cpp	/^  int GetFeatureNames(char** out_strs) const {$/;"	f	class:LightGBM::Booster
GetFloatField	src/io/dataset.cpp	/^bool Dataset::GetFloatField(const char* field_name, data_size_t* out_len, const float** out_ptr) {$/;"	f	class:LightGBM::Dataset
GetGlobalDataCountInLeaf	src/treelearner/serial_tree_learner.h	/^inline data_size_t SerialTreeLearner::GetGlobalDataCountInLeaf(int leaf_idx) const {$/;"	f	class:LightGBM::SerialTreeLearner
GetGradientsForOneQuery	src/objective/IPWi_rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetGradientsForOneQuery	src/objective/IPWij_rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetGradientsForOneQuery	src/objective/SCOREwy_rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetGradientsForOneQuery	src/objective/SCOREzn_rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetGradientsForOneQuery	src/objective/e2e_IPWi_rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetGradientsForOneQuery	src/objective/e2e_IPWij_rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetGradientsForOneQuery	src/objective/rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetGradientsForOneQuery	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetGradientsForOneQuery	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetGradientsForOneQuery	src/objective/zinu/ndcg_rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetGradientsForOneQuery	src/objective/zinu/score_rank_objective.hpp	/^  inline void GetGradientsForOneQuery(const double* score,$/;"	f	class:LightGBM::LambdarankNDCG
GetHDFSFileSystem	src/io/file_io.cpp	/^  static hdfsFS GetHDFSFileSystem(const std::string& uri) {$/;"	f	struct:LightGBM::HDFSFile	file:
GetIndexOnLeaf	src/treelearner/data_partition.hpp	/^  const data_size_t* GetIndexOnLeaf(int leaf, data_size_t* out_len) const {$/;"	f	class:LightGBM::DataPartition
GetInt	include/LightGBM/config.h	/^inline bool ConfigBase::GetInt($/;"	f	class:LightGBM::ConfigBase
GetIntField	src/io/dataset.cpp	/^bool Dataset::GetIntField(const char* field_name, data_size_t* out_len, const int** out_ptr) {$/;"	f	class:LightGBM::Dataset
GetIterator	src/io/dense_bin.hpp	/^BinIterator* DenseBin<VAL_T>::GetIterator(uint32_t min_bin, uint32_t max_bin, uint32_t default_bin) const {$/;"	f	class:LightGBM::DenseBin
GetIterator	src/io/dense_nbits_bin.hpp	/^inline BinIterator* Dense4bitsBin::GetIterator(uint32_t min_bin, uint32_t max_bin, uint32_t default_bin) const {$/;"	f	class:LightGBM::Dense4bitsBin
GetIterator	src/io/sparse_bin.hpp	/^BinIterator* SparseBin<VAL_T>::GetIterator(uint32_t min_bin, uint32_t max_bin, uint32_t default_bin) const {$/;"	f	class:LightGBM::SparseBin
GetLabelIdxForCSV	src/io/parser.cpp	/^int GetLabelIdxForCSV(std::string& str, int num_features, int label_idx) {$/;"	f	namespace:LightGBM
GetLabelIdxForLibsvm	src/io/parser.cpp	/^int GetLabelIdxForLibsvm(std::string& str, int num_features, int label_idx) {$/;"	f	namespace:LightGBM
GetLabelIdxForTSV	src/io/parser.cpp	/^int GetLabelIdxForTSV(std::string& str, int num_features, int label_idx) {$/;"	f	namespace:LightGBM
GetLastError	src/network/socket_wrapper.hpp	/^  inline static int GetLastError() {$/;"	f	class:LightGBM::TcpSocket
GetLeaf	include/LightGBM/tree.h	/^inline int Tree::GetLeaf(const double* feature_values) const {$/;"	f	class:LightGBM::Tree
GetLeafByMap	include/LightGBM/tree.h	/^inline int Tree::GetLeafByMap(const std::unordered_map<int, double>& feature_values) const {$/;"	f	class:LightGBM::Tree
GetLeafSplitGain	src/treelearner/feature_histogram.hpp	/^  static double GetLeafSplitGain(double sum_gradients, double sum_hessians, double l1, double l2, double max_delta_step) {$/;"	f	class:LightGBM::FeatureHistogram
GetLeafSplitGainGivenOutput	src/treelearner/feature_histogram.hpp	/^  static double GetLeafSplitGainGivenOutput(double sum_gradients, double sum_hessians, double l1, double l2, double output) {$/;"	f	class:LightGBM::FeatureHistogram
GetLeafValue	src/c_api.cpp	/^  double GetLeafValue(int tree_idx, int leaf_idx) const {$/;"	f	class:LightGBM::Booster
GetLevel	include/LightGBM/utils/log.h	/^  static LogLevel& GetLevel() { static THREAD_LOCAL LogLevel level = LogLevel::Info; return level; }$/;"	f	class:LightGBM::Log
GetLine	include/LightGBM/utils/common.h	/^inline static size_t GetLine(const char* str) {$/;"	f	namespace:LightGBM::Common
GetLocalIpList	src/network/socket_wrapper.hpp	/^  inline static std::unordered_set<std::string> GetLocalIpList() {$/;"	f	class:LightGBM::TcpSocket
GetMetricType	src/io/config.cpp	/^void GetMetricType(const std::unordered_map<std::string, std::string>& params, std::vector<std::string>* metric_types) {$/;"	f	namespace:LightGBM
GetMissingType	include/LightGBM/tree.h	/^  inline static int8_t GetMissingType(int8_t decision_type) {$/;"	f	class:LightGBM::Tree
GetNumWorkgroupsPerFeature	src/treelearner/gpu_tree_learner.cpp	/^int GPUTreeLearner::GetNumWorkgroupsPerFeature(data_size_t leaf_num_data) {$/;"	f	class:LightGBM::GPUTreeLearner
GetObjectiveType	src/io/config.cpp	/^void GetObjectiveType(const std::unordered_map<std::string, std::string>& params, std::string* objective_type) {$/;"	f	namespace:LightGBM
GetPredictAt	src/boosting/gbdt.cpp	/^void GBDT::GetPredictAt(int data_idx, double* out_result, int64_t* out_len) {$/;"	f	class:LightGBM::GBDT
GetPredictAt	src/c_api.cpp	/^  void GetPredictAt(int data_idx, double* out_result, int64_t* out_len) {$/;"	f	class:LightGBM::Booster
GetPredictFunction	src/application/predictor.hpp	/^  inline const PredictFunction& GetPredictFunction() const {$/;"	f	class:LightGBM::Predictor
GetPredictType	src/lightgbm_R.cpp	/^int GetPredictType(LGBM_SE is_rawscore, LGBM_SE is_leafidx, LGBM_SE is_predcontrib) {$/;"	f
GetSigmoid	src/objective/IPWi_rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSigmoid	src/objective/IPWij_rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSigmoid	src/objective/SCOREwy_rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSigmoid	src/objective/SCOREzn_rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSigmoid	src/objective/e2e_IPWi_rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSigmoid	src/objective/e2e_IPWij_rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSigmoid	src/objective/rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSigmoid	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSigmoid	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSigmoid	src/objective/zinu/ndcg_rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSigmoid	src/objective/zinu/score_rank_objective.hpp	/^  inline double GetSigmoid(double score) const {$/;"	f	class:LightGBM::LambdarankNDCG
GetSplitGains	src/treelearner/feature_histogram.hpp	/^  static double GetSplitGains(double sum_left_gradients, double sum_left_hessians,$/;"	f	class:LightGBM::FeatureHistogram
GetStatistic	src/io/parser.cpp	/^void GetStatistic(const char* str, int* comma_cnt, int* tab_cnt, int* colon_cnt) {$/;"	f	namespace:LightGBM
GetString	include/LightGBM/config.h	/^inline bool ConfigBase::GetString($/;"	f	class:LightGBM::ConfigBase
GetTaskType	src/io/config.cpp	/^void GetTaskType(const std::unordered_map<std::string, std::string>& params, TaskType* task_type) {$/;"	f	namespace:LightGBM
GetTrainingScore	src/boosting/gbdt.cpp	/^const double* GBDT::GetTrainingScore(int64_t* out_len) {$/;"	f	class:LightGBM::GBDT
GetTreeLearnerType	src/io/config.cpp	/^void GetTreeLearnerType(const std::unordered_map<std::string, std::string>& params, std::string* tree_learner_type) {$/;"	f	namespace:LightGBM
GlobalSum	include/LightGBM/network.h	/^  static void GlobalSum(std::vector<T>& local) {$/;"	f	class:LightGBM::Network
GlobalSyncUpByMax	include/LightGBM/network.h	/^  static T GlobalSyncUpByMax(T& local) {$/;"	f	class:LightGBM::Network
GlobalSyncUpByMean	include/LightGBM/network.h	/^  static T GlobalSyncUpByMean(T& local) {$/;"	f	class:LightGBM::Network
GlobalSyncUpByMin	include/LightGBM/network.h	/^  static T GlobalSyncUpByMin(T& local) {$/;"	f	class:LightGBM::Network
GlobalVoting	src/treelearner/voting_parallel_tree_learner.cpp	/^void VotingParallelTreeLearner<TREELEARNER_T>::GlobalVoting(int leaf_idx, const std::vector<LightSplitInfo>& splits, std::vector<int>* out) {$/;"	f	class:LightGBM::VotingParallelTreeLearner
GreedyFindBin	src/io/bin.cpp	/^  std::vector<double> GreedyFindBin(const double* distinct_values, const int* counts,$/;"	f	namespace:LightGBM
GridSearchCV	examples/python-guide/sklearn_example.py	/^from sklearn.model_selection import GridSearchCV$/;"	i
GridSearchCV	tests/python_package_test/test_sklearn.py	/^from sklearn.model_selection import GridSearchCV, train_test_split$/;"	i
GroupBinBoundary	include/LightGBM/dataset.h	/^  inline uint64_t GroupBinBoundary(int group_idx) const {$/;"	f	class:LightGBM::Dataset
GroupKFold	python-package/lightgbm/compat.py	/^        from sklearn.cross_validation import StratifiedKFold, GroupKFold$/;"	i
GroupKFold	python-package/lightgbm/compat.py	/^        from sklearn.model_selection import StratifiedKFold, GroupKFold$/;"	i
GroupLeader	include/LightGBM/network.h	/^  GroupLeader,  \/\/ leader of group when number of machines in this group is 2.$/;"	e	enum:LightGBM::RecursiveHalvingNodeType
HDFSFile	src/io/file_io.cpp	/^  HDFSFile(const std::string& filename, int flags) : filename_(filename), flags_(flags) {}$/;"	f	struct:LightGBM::HDFSFile
HDFSFile	src/io/file_io.cpp	/^struct HDFSFile : VirtualFileReader, VirtualFileWriter {$/;"	s	namespace:LightGBM	file:
HasMonotone	include/LightGBM/dataset.h	/^  bool HasMonotone() const {$/;"	f	class:LightGBM::Dataset
HistogramBinEntry	include/LightGBM/bin.h	/^struct HistogramBinEntry {$/;"	s	namespace:LightGBM
HistogramPool	src/treelearner/feature_histogram.hpp	/^  HistogramPool() {$/;"	f	class:LightGBM::HistogramPool
HistogramPool	src/treelearner/feature_histogram.hpp	/^class HistogramPool {$/;"	c	namespace:LightGBM
HuberLossMetric	src/metric/regression_metric.hpp	/^  explicit HuberLossMetric(const MetricConfig& config) :RegressionMetric<HuberLossMetric>(config) {$/;"	f	class:LightGBM::HuberLossMetric
HuberLossMetric	src/metric/regression_metric.hpp	/^class HuberLossMetric: public RegressionMetric<HuberLossMetric> {$/;"	c	namespace:LightGBM
INVALID	src/io/parser.cpp	/^  INVALID,$/;"	e	enum:LightGBM::DataType	file:
INVALID_SOCKET	src/network/socket_wrapper.hpp	/^const int INVALID_SOCKET = -1;$/;"	m	namespace:LightGBM
IOConfig	include/LightGBM/config.h	/^struct IOConfig: public ConfigBase {$/;"	s	namespace:LightGBM
IS_PANDAS_INSTALLED	tests/python_package_test/test_engine.py	/^    IS_PANDAS_INSTALLED = False$/;"	v
IS_PANDAS_INSTALLED	tests/python_package_test/test_engine.py	/^    IS_PANDAS_INSTALLED = True$/;"	v
IS_PANDAS_INSTALLED	tests/python_package_test/test_sklearn.py	/^    IS_PANDAS_INSTALLED = False$/;"	v
IS_PANDAS_INSTALLED	tests/python_package_test/test_sklearn.py	/^    IS_PANDAS_INSTALLED = True$/;"	v
Info	include/LightGBM/utils/log.h	/^  Info = 1,$/;"	m	class:LightGBM::LogLevel
Info	include/LightGBM/utils/log.h	/^  static void Info(const char *format, ...) {$/;"	f	class:LightGBM::Log
Init	src/boosting/gbdt.cpp	/^void GBDT::Init(const BoostingConfig* config, const Dataset* train_data, const ObjectiveFunction* objective_function,$/;"	f	class:LightGBM::GBDT
Init	src/io/file_io.cpp	/^  bool Init() {$/;"	f	struct:LightGBM::HDFSFile
Init	src/io/file_io.cpp	/^  bool Init() {$/;"	f	struct:LightGBM::LocalFile
Init	src/io/metadata.cpp	/^void Metadata::Init(const Metadata& fullset, const data_size_t* used_indices, data_size_t num_used_indices) {$/;"	f	class:LightGBM::Metadata
Init	src/io/metadata.cpp	/^void Metadata::Init(const char * data_filename, const char* initscore_file) {$/;"	f	class:LightGBM::Metadata
Init	src/io/metadata.cpp	/^void Metadata::Init(data_size_t num_data, int weight_idx, int query_idx) {$/;"	f	class:LightGBM::Metadata
Init	src/metric/dcg_calculator.cpp	/^void DCGCalculator::Init(std::vector<double> input_label_gain) { \/\/\/ 2^label - 1, label=0,1,2,3,4,5$/;"	f	class:LightGBM::DCGCalculator
Init	src/network/network.cpp	/^void Network::Init(NetworkConfig config) {$/;"	f	class:LightGBM::Network
Init	src/network/network.cpp	/^void Network::Init(int num_machines, int rank,$/;"	f	class:LightGBM::Network
Init	src/treelearner/data_parallel_tree_learner.cpp	/^void DataParallelTreeLearner<TREELEARNER_T>::Init(const Dataset* train_data, bool is_constant_hessian) {$/;"	f	class:LightGBM::DataParallelTreeLearner
Init	src/treelearner/data_partition.hpp	/^  void Init() {$/;"	f	class:LightGBM::DataPartition
Init	src/treelearner/feature_histogram.hpp	/^  void Init(HistogramBinEntry* data, const FeatureMetainfo* meta) {$/;"	f	class:LightGBM::FeatureHistogram
Init	src/treelearner/feature_parallel_tree_learner.cpp	/^void FeatureParallelTreeLearner<TREELEARNER_T>::Init(const Dataset* train_data, bool is_constant_hessian) {$/;"	f	class:LightGBM::FeatureParallelTreeLearner
Init	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::Init(const Dataset* train_data, bool is_constant_hessian) {$/;"	f	class:LightGBM::GPUTreeLearner
Init	src/treelearner/leaf_splits.hpp	/^  void Init() {$/;"	f	class:LightGBM::LeafSplits
Init	src/treelearner/leaf_splits.hpp	/^  void Init(const score_t* gradients, const score_t* hessians) {$/;"	f	class:LightGBM::LeafSplits
Init	src/treelearner/leaf_splits.hpp	/^  void Init(double sum_gradients, double sum_hessians) {$/;"	f	class:LightGBM::LeafSplits
Init	src/treelearner/leaf_splits.hpp	/^  void Init(int leaf, const DataPartition* data_partition, const score_t* gradients, const score_t* hessians) {$/;"	f	class:LightGBM::LeafSplits
Init	src/treelearner/leaf_splits.hpp	/^  void Init(int leaf, const DataPartition* data_partition, double sum_gradients, double sum_hessians) {$/;"	f	class:LightGBM::LeafSplits
Init	src/treelearner/serial_tree_learner.cpp	/^void SerialTreeLearner::Init(const Dataset* train_data, bool is_constant_hessian) {$/;"	f	class:LightGBM::SerialTreeLearner
Init	src/treelearner/voting_parallel_tree_learner.cpp	/^void VotingParallelTreeLearner<TREELEARNER_T>::Init(const Dataset* train_data, bool is_constant_hessian) {$/;"	f	class:LightGBM::VotingParallelTreeLearner
InitGPU	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::InitGPU(int platform_id, int device_id) {$/;"	f	class:LightGBM::GPUTreeLearner
InitPositionBiases	src/objective/IPWij_rank_objective.hpp	/^  void InitPositionBiases() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionBiases	src/objective/e2e_IPWi_rank_objective.hpp	/^  void InitPositionBiases() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionBiases	src/objective/e2e_IPWij_rank_objective.hpp	/^  void InitPositionBiases() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionBiases	src/objective/rank_objective.hpp	/^  void InitPositionBiases() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionBiases	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  void InitPositionBiases() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionBiases	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  void InitPositionBiases() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionGradients	src/objective/IPWij_rank_objective.hpp	/^  void InitPositionGradients() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionGradients	src/objective/e2e_IPWi_rank_objective.hpp	/^  void InitPositionGradients() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionGradients	src/objective/e2e_IPWij_rank_objective.hpp	/^  void InitPositionGradients() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionGradients	src/objective/rank_objective.hpp	/^  void InitPositionGradients() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionGradients	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  void InitPositionGradients() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPositionGradients	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  void InitPositionGradients() { \/\/\/$/;"	f	class:LightGBM::LambdarankNDCG
InitPredict	src/application/application.cpp	/^void Application::InitPredict() {$/;"	f	class:LightGBM::Application
InitTrain	src/application/application.cpp	/^void Application::InitTrain() { \/\/\/ 训练初始化$/;"	f	class:LightGBM::Application
InnerFeatureIndex	include/LightGBM/dataset.h	/^  inline int InnerFeatureIndex(int col_idx) const {$/;"	f	class:LightGBM::Dataset
InnerRawGet	src/io/sparse_bin.hpp	/^inline VAL_T SparseBinIterator<VAL_T>::InnerRawGet(data_size_t idx) {$/;"	f	class:LightGBM::SparseBinIterator
Int32ToStr	include/LightGBM/utils/common.h	/^inline static void Int32ToStr(int32_t value, char* buffer) {$/;"	f	namespace:LightGBM::Common
IsClosed	src/network/socket_wrapper.hpp	/^  inline bool IsClosed() {$/;"	f	class:LightGBM::TcpSocket
IsConstantHessian	include/LightGBM/objective_function.h	/^  virtual bool IsConstantHessian() const { return false; }$/;"	f	class:LightGBM::ObjectiveFunction
IsRenewTreeOutput	include/LightGBM/objective_function.h	/^  virtual bool IsRenewTreeOutput() const { return false; }$/;"	f	class:LightGBM::ObjectiveFunction
IsZero	include/LightGBM/tree.h	/^  inline static bool IsZero(double fval) {$/;"	f	class:LightGBM::Tree
IterateFunctionFromCSC	src/c_api.cpp	/^IterateFunctionFromCSC(const void* col_ptr, int col_ptr_type, const int32_t* indices, const void* data, int data_type, int64_t ncol_ptr, int64_t nelem, int col_idx) {$/;"	f
IteratorValType	include/LightGBM/utils/common.h	/^static typename std::iterator_traits<_Iter>::value_type* IteratorValType(_Iter) {$/;"	f	namespace:LightGBM::Common
Join	include/LightGBM/utils/common.h	/^inline static std::string Join(const std::vector<T>& strs, const char* delimiter) {$/;"	f	namespace:LightGBM::Common
Join	include/LightGBM/utils/common.h	/^inline static std::string Join(const std::vector<T>& strs, size_t start, size_t end, const char* delimiter) {$/;"	f	namespace:LightGBM::Common
Json	include/LightGBM/json11.hpp	/^    Json(const T & t) : Json(t.to_json()) {}$/;"	f	class:json11::final
Json	src/io/json11.cpp	/^Json::Json(Json::array &&values)       : m_ptr(make_shared<JsonArray>(move(values))) {}$/;"	f	class:json11::Json
Json	src/io/json11.cpp	/^Json::Json(Json::object &&values)      : m_ptr(make_shared<JsonObject>(move(values))) {}$/;"	f	class:json11::Json
Json	src/io/json11.cpp	/^Json::Json(bool value)                 : m_ptr(value ? statics().t : statics().f) {}$/;"	f	class:json11::Json
Json	src/io/json11.cpp	/^Json::Json(const Json::array &values)  : m_ptr(make_shared<JsonArray>(values)) {}$/;"	f	class:json11::Json
Json	src/io/json11.cpp	/^Json::Json(const Json::object &values) : m_ptr(make_shared<JsonObject>(values)) {}$/;"	f	class:json11::Json
Json	src/io/json11.cpp	/^Json::Json(const char * value)         : m_ptr(make_shared<JsonString>(value)) {}$/;"	f	class:json11::Json
Json	src/io/json11.cpp	/^Json::Json(const string &value)        : m_ptr(make_shared<JsonString>(value)) {}$/;"	f	class:json11::Json
Json	src/io/json11.cpp	/^Json::Json(double value)               : m_ptr(make_shared<JsonDouble>(value)) {}$/;"	f	class:json11::Json
Json	src/io/json11.cpp	/^Json::Json(int value)                  : m_ptr(make_shared<JsonInt>(value)) {}$/;"	f	class:json11::Json
Json	src/io/json11.cpp	/^Json::Json(string &&value)             : m_ptr(make_shared<JsonString>(move(value))) {}$/;"	f	class:json11::Json
JsonArray	src/io/json11.cpp	/^    explicit JsonArray(Json::array &&value)      : Value(move(value)) {}$/;"	f	class:json11::final
JsonArray	src/io/json11.cpp	/^    explicit JsonArray(const Json::array &value) : Value(value) {}$/;"	f	class:json11::final
JsonBoolean	src/io/json11.cpp	/^    explicit JsonBoolean(bool value) : Value(value) {}$/;"	f	class:json11::final
JsonDouble	src/io/json11.cpp	/^    explicit JsonDouble(double value) : Value(value) {}$/;"	f	class:json11::final
JsonInt	src/io/json11.cpp	/^    explicit JsonInt(int value) : Value(value) {}$/;"	f	class:json11::final
JsonNull	src/io/json11.cpp	/^    JsonNull() : Value({}) {}$/;"	f	class:json11::final
JsonObject	src/io/json11.cpp	/^    explicit JsonObject(Json::object &&value)      : Value(move(value)) {}$/;"	f	class:json11::final
JsonObject	src/io/json11.cpp	/^    explicit JsonObject(const Json::object &value) : Value(value) {}$/;"	f	class:json11::final
JsonParse	include/LightGBM/json11.hpp	/^enum JsonParse {$/;"	g	namespace:json11
JsonString	src/io/json11.cpp	/^    explicit JsonString(const string &value) : Value(value) {}$/;"	f	class:json11::final
JsonString	src/io/json11.cpp	/^    explicit JsonString(string &&value)      : Value(move(value)) {}$/;"	f	class:json11::final
JsonValue	include/LightGBM/json11.hpp	/^class JsonValue {$/;"	c	namespace:json11
KRefitTree	include/LightGBM/config.h	/^  kTrain, kPredict, kConvertModel, KRefitTree$/;"	e	enum:LightGBM::TaskType
KV2Map	src/io/config.cpp	/^void ConfigBase::KV2Map(std::unordered_map<std::string, std::string>& params, const char* kv) {$/;"	f	class:LightGBM::ConfigBase
KeyAliasTransform	include/LightGBM/config.h	/^  static void KeyAliasTransform(std::unordered_map<std::string, std::string>* params) {$/;"	f	struct:LightGBM::ParameterAlias
KullbackLeiblerDivergence	src/metric/xentropy_metric.hpp	/^  explicit KullbackLeiblerDivergence(const MetricConfig&) {}$/;"	f	class:LightGBM::KullbackLeiblerDivergence
KullbackLeiblerDivergence	src/metric/xentropy_metric.hpp	/^class KullbackLeiblerDivergence : public Metric {$/;"	c	namespace:LightGBM
L1Metric	src/metric/regression_metric.hpp	/^  explicit L1Metric(const MetricConfig& config) :RegressionMetric<L1Metric>(config) {}$/;"	f	class:LightGBM::L1Metric
L1Metric	src/metric/regression_metric.hpp	/^class L1Metric: public RegressionMetric<L1Metric> {$/;"	c	namespace:LightGBM
L2Metric	src/metric/regression_metric.hpp	/^  explicit L2Metric(const MetricConfig& config) :RegressionMetric<L2Metric>(config) {}$/;"	f	class:LightGBM::L2Metric
L2Metric	src/metric/regression_metric.hpp	/^class L2Metric: public RegressionMetric<L2Metric> {$/;"	c	namespace:LightGBM
LGBMClassifier	python-package/lightgbm/__init__.py	/^    from .sklearn import LGBMModel, LGBMRegressor, LGBMClassifier, LGBMRanker$/;"	i
LGBMClassifier	python-package/lightgbm/sklearn.py	/^class LGBMClassifier(LGBMModel, _LGBMClassifierBase):$/;"	c
LGBMDeprecationWarning	python-package/lightgbm/basic.py	/^from .compat import (DataFrame, LGBMDeprecationWarning, Series,$/;"	i
LGBMDeprecationWarning	python-package/lightgbm/compat.py	/^class LGBMDeprecationWarning(UserWarning):$/;"	c
LGBMModel	python-package/lightgbm/__init__.py	/^    from .sklearn import LGBMModel, LGBMRegressor, LGBMClassifier, LGBMRanker$/;"	i
LGBMModel	python-package/lightgbm/plotting.py	/^from .sklearn import LGBMModel$/;"	i
LGBMModel	python-package/lightgbm/sklearn.py	/^class LGBMModel(_LGBMModelBase):$/;"	c
LGBMNotFittedError	python-package/lightgbm/compat.py	/^    LGBMNotFittedError = NotFittedError$/;"	v
LGBMNotFittedError	python-package/lightgbm/compat.py	/^    LGBMNotFittedError = ValueError$/;"	v
LGBMRanker	python-package/lightgbm/__init__.py	/^    from .sklearn import LGBMModel, LGBMRegressor, LGBMClassifier, LGBMRanker$/;"	i
LGBMRanker	python-package/lightgbm/sklearn.py	/^class LGBMRanker(LGBMModel):$/;"	c
LGBMRegressor	python-package/lightgbm/__init__.py	/^    from .sklearn import LGBMModel, LGBMRegressor, LGBMClassifier, LGBMRanker$/;"	i
LGBMRegressor	python-package/lightgbm/sklearn.py	/^class LGBMRegressor(LGBMModel, _LGBMRegressorBase):$/;"	c
LGBM_APIHandleException	include/LightGBM/c_api.h	/^inline int LGBM_APIHandleException(const std::exception& ex) {$/;"	f
LGBM_APIHandleException	include/LightGBM/c_api.h	/^inline int LGBM_APIHandleException(const std::string& ex) {$/;"	f
LGBM_BoosterAddValidData	src/c_api.cpp	/^int LGBM_BoosterAddValidData(BoosterHandle handle,$/;"	f
LGBM_BoosterAddValidData_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterAddValidData_R(LGBM_SE handle,$/;"	f
LGBM_BoosterCalcNumPredict	src/c_api.cpp	/^int LGBM_BoosterCalcNumPredict(BoosterHandle handle,$/;"	f
LGBM_BoosterCalcNumPredict_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterCalcNumPredict_R(LGBM_SE handle,$/;"	f
LGBM_BoosterCreate	src/c_api.cpp	/^int LGBM_BoosterCreate(const DatasetHandle train_data,$/;"	f
LGBM_BoosterCreateFromModelfile	src/c_api.cpp	/^int LGBM_BoosterCreateFromModelfile($/;"	f
LGBM_BoosterCreateFromModelfile_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterCreateFromModelfile_R(LGBM_SE filename,$/;"	f
LGBM_BoosterCreate_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterCreate_R(LGBM_SE train_data,$/;"	f
LGBM_BoosterDumpModel	src/c_api.cpp	/^int LGBM_BoosterDumpModel(BoosterHandle handle,$/;"	f
LGBM_BoosterDumpModel_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterDumpModel_R(LGBM_SE handle,$/;"	f
LGBM_BoosterFeatureImportance	src/c_api.cpp	/^int LGBM_BoosterFeatureImportance(BoosterHandle handle,$/;"	f
LGBM_BoosterFree	src/c_api.cpp	/^int LGBM_BoosterFree(BoosterHandle handle) {$/;"	f
LGBM_BoosterFree_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterFree_R(LGBM_SE handle,$/;"	f
LGBM_BoosterGetCurrentIteration	src/c_api.cpp	/^int LGBM_BoosterGetCurrentIteration(BoosterHandle handle, int* out_iteration) {$/;"	f
LGBM_BoosterGetCurrentIteration_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterGetCurrentIteration_R(LGBM_SE handle,$/;"	f
LGBM_BoosterGetEval	src/c_api.cpp	/^int LGBM_BoosterGetEval(BoosterHandle handle,$/;"	f
LGBM_BoosterGetEvalCounts	src/c_api.cpp	/^int LGBM_BoosterGetEvalCounts(BoosterHandle handle, int* out_len) {$/;"	f
LGBM_BoosterGetEvalNames	src/c_api.cpp	/^int LGBM_BoosterGetEvalNames(BoosterHandle handle, int* out_len, char** out_strs) {$/;"	f
LGBM_BoosterGetEvalNames_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterGetEvalNames_R(LGBM_SE handle,$/;"	f
LGBM_BoosterGetEval_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterGetEval_R(LGBM_SE handle,$/;"	f
LGBM_BoosterGetFeatureNames	src/c_api.cpp	/^int LGBM_BoosterGetFeatureNames(BoosterHandle handle, int* out_len, char** out_strs) {$/;"	f
LGBM_BoosterGetLeafValue	src/c_api.cpp	/^int LGBM_BoosterGetLeafValue(BoosterHandle handle,$/;"	f
LGBM_BoosterGetNumClasses	src/c_api.cpp	/^int LGBM_BoosterGetNumClasses(BoosterHandle handle, int* out_len) {$/;"	f
LGBM_BoosterGetNumClasses_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterGetNumClasses_R(LGBM_SE handle,$/;"	f
LGBM_BoosterGetNumFeature	src/c_api.cpp	/^int LGBM_BoosterGetNumFeature(BoosterHandle handle, int* out_len) {$/;"	f
LGBM_BoosterGetNumPredict	src/c_api.cpp	/^int LGBM_BoosterGetNumPredict(BoosterHandle handle,$/;"	f
LGBM_BoosterGetNumPredict_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterGetNumPredict_R(LGBM_SE handle,$/;"	f
LGBM_BoosterGetPredict	src/c_api.cpp	/^int LGBM_BoosterGetPredict(BoosterHandle handle,$/;"	f
LGBM_BoosterGetPredict_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterGetPredict_R(LGBM_SE handle,$/;"	f
LGBM_BoosterLoadModelFromString	src/c_api.cpp	/^int LGBM_BoosterLoadModelFromString($/;"	f
LGBM_BoosterLoadModelFromString_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterLoadModelFromString_R(LGBM_SE model_str,$/;"	f
LGBM_BoosterMerge	src/c_api.cpp	/^int LGBM_BoosterMerge(BoosterHandle handle,$/;"	f
LGBM_BoosterMerge_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterMerge_R(LGBM_SE handle,$/;"	f
LGBM_BoosterPredictForCSC	src/c_api.cpp	/^int LGBM_BoosterPredictForCSC(BoosterHandle handle,$/;"	f
LGBM_BoosterPredictForCSC_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterPredictForCSC_R(LGBM_SE handle,$/;"	f
LGBM_BoosterPredictForCSR	src/c_api.cpp	/^int LGBM_BoosterPredictForCSR(BoosterHandle handle,$/;"	f
LGBM_BoosterPredictForFile	src/c_api.cpp	/^int LGBM_BoosterPredictForFile(BoosterHandle handle,$/;"	f
LGBM_BoosterPredictForFile_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterPredictForFile_R(LGBM_SE handle,$/;"	f
LGBM_BoosterPredictForMat	src/c_api.cpp	/^int LGBM_BoosterPredictForMat(BoosterHandle handle,$/;"	f
LGBM_BoosterPredictForMat_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterPredictForMat_R(LGBM_SE handle,$/;"	f
LGBM_BoosterResetParameter	src/c_api.cpp	/^int LGBM_BoosterResetParameter(BoosterHandle handle, const char* parameters) {$/;"	f
LGBM_BoosterResetParameter_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterResetParameter_R(LGBM_SE handle,$/;"	f
LGBM_BoosterResetTrainingData	src/c_api.cpp	/^int LGBM_BoosterResetTrainingData(BoosterHandle handle,$/;"	f
LGBM_BoosterResetTrainingData_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterResetTrainingData_R(LGBM_SE handle,$/;"	f
LGBM_BoosterRollbackOneIter	src/c_api.cpp	/^int LGBM_BoosterRollbackOneIter(BoosterHandle handle) {$/;"	f
LGBM_BoosterRollbackOneIter_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterRollbackOneIter_R(LGBM_SE handle,$/;"	f
LGBM_BoosterSaveModel	src/c_api.cpp	/^int LGBM_BoosterSaveModel(BoosterHandle handle,$/;"	f
LGBM_BoosterSaveModelToString	src/c_api.cpp	/^int LGBM_BoosterSaveModelToString(BoosterHandle handle,$/;"	f
LGBM_BoosterSaveModelToString_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterSaveModelToString_R(LGBM_SE handle,$/;"	f
LGBM_BoosterSaveModel_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterSaveModel_R(LGBM_SE handle,$/;"	f
LGBM_BoosterSetLeafValue	src/c_api.cpp	/^int LGBM_BoosterSetLeafValue(BoosterHandle handle,$/;"	f
LGBM_BoosterUpdateOneIter	src/c_api.cpp	/^int LGBM_BoosterUpdateOneIter(BoosterHandle handle, int* is_finished) {$/;"	f
LGBM_BoosterUpdateOneIterCustom	src/c_api.cpp	/^int LGBM_BoosterUpdateOneIterCustom(BoosterHandle handle,$/;"	f
LGBM_BoosterUpdateOneIterCustom_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterUpdateOneIterCustom_R(LGBM_SE handle,$/;"	f
LGBM_BoosterUpdateOneIter_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_BoosterUpdateOneIter_R(LGBM_SE handle,$/;"	f
LGBM_DatasetCreateByReference	src/c_api.cpp	/^int LGBM_DatasetCreateByReference(const DatasetHandle reference,$/;"	f
LGBM_DatasetCreateFromCSC	src/c_api.cpp	/^int LGBM_DatasetCreateFromCSC(const void* col_ptr,$/;"	f
LGBM_DatasetCreateFromCSC_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetCreateFromCSC_R(LGBM_SE indptr,$/;"	f
LGBM_DatasetCreateFromCSR	src/c_api.cpp	/^int LGBM_DatasetCreateFromCSR(const void* indptr,$/;"	f
LGBM_DatasetCreateFromFile	src/c_api.cpp	/^int LGBM_DatasetCreateFromFile(const char* filename,$/;"	f
LGBM_DatasetCreateFromFile_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetCreateFromFile_R(LGBM_SE filename,$/;"	f
LGBM_DatasetCreateFromMat	src/c_api.cpp	/^int LGBM_DatasetCreateFromMat(const void* data,$/;"	f
LGBM_DatasetCreateFromMat_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetCreateFromMat_R(LGBM_SE data,$/;"	f
LGBM_DatasetCreateFromSampledColumn	src/c_api.cpp	/^int LGBM_DatasetCreateFromSampledColumn(double** sample_data,$/;"	f
LGBM_DatasetFree	src/c_api.cpp	/^int LGBM_DatasetFree(DatasetHandle handle) {$/;"	f
LGBM_DatasetFree_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetFree_R(LGBM_SE handle,$/;"	f
LGBM_DatasetGetFeatureNames	src/c_api.cpp	/^int LGBM_DatasetGetFeatureNames($/;"	f
LGBM_DatasetGetFeatureNames_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetGetFeatureNames_R(LGBM_SE handle,$/;"	f
LGBM_DatasetGetField	src/c_api.cpp	/^int LGBM_DatasetGetField(DatasetHandle handle,$/;"	f
LGBM_DatasetGetFieldSize_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetGetFieldSize_R(LGBM_SE handle,$/;"	f
LGBM_DatasetGetField_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetGetField_R(LGBM_SE handle,$/;"	f
LGBM_DatasetGetNumData	src/c_api.cpp	/^int LGBM_DatasetGetNumData(DatasetHandle handle,$/;"	f
LGBM_DatasetGetNumData_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetGetNumData_R(LGBM_SE handle, LGBM_SE out,$/;"	f
LGBM_DatasetGetNumFeature	src/c_api.cpp	/^int LGBM_DatasetGetNumFeature(DatasetHandle handle,$/;"	f
LGBM_DatasetGetNumFeature_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetGetNumFeature_R(LGBM_SE handle,$/;"	f
LGBM_DatasetGetSubset	src/c_api.cpp	/^int LGBM_DatasetGetSubset($/;"	f
LGBM_DatasetGetSubset_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetGetSubset_R(LGBM_SE handle,$/;"	f
LGBM_DatasetPushRows	src/c_api.cpp	/^int LGBM_DatasetPushRows(DatasetHandle dataset,$/;"	f
LGBM_DatasetPushRowsByCSR	src/c_api.cpp	/^int LGBM_DatasetPushRowsByCSR(DatasetHandle dataset,$/;"	f
LGBM_DatasetSaveBinary	src/c_api.cpp	/^int LGBM_DatasetSaveBinary(DatasetHandle handle,$/;"	f
LGBM_DatasetSaveBinary_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetSaveBinary_R(LGBM_SE handle,$/;"	f
LGBM_DatasetSetFeatureNames	src/c_api.cpp	/^int LGBM_DatasetSetFeatureNames($/;"	f
LGBM_DatasetSetFeatureNames_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetSetFeatureNames_R(LGBM_SE handle,$/;"	f
LGBM_DatasetSetField	src/c_api.cpp	/^int LGBM_DatasetSetField(DatasetHandle handle,$/;"	f
LGBM_DatasetSetField_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_DatasetSetField_R(LGBM_SE handle,$/;"	f
LGBM_GetLastError	src/c_api.cpp	/^const char* LGBM_GetLastError() {$/;"	f
LGBM_GetLastError_R	src/lightgbm_R.cpp	/^LGBM_SE LGBM_GetLastError_R(LGBM_SE buf_len, LGBM_SE actual_len, LGBM_SE err_msg) {$/;"	f
LGBM_NetworkFree	src/c_api.cpp	/^int LGBM_NetworkFree() {$/;"	f
LGBM_NetworkInit	src/c_api.cpp	/^int LGBM_NetworkInit(const char* machines,$/;"	f
LGBM_NetworkInitWithFunctions	src/c_api.cpp	/^int LGBM_NetworkInitWithFunctions(int num_machines, int rank,$/;"	f
LGBM_SE	include/LightGBM/R_object_helper.h	/^} LGBM_SER, *LGBM_SE;$/;"	t	typeref:struct:LGBM_SER
LGBM_SER	include/LightGBM/R_object_helper.h	/^typedef struct LGBM_SER {$/;"	s
LGBM_SER	include/LightGBM/R_object_helper.h	/^} LGBM_SER, *LGBM_SE;$/;"	t	typeref:struct:LGBM_SER
LGBM_SetLastError	include/LightGBM/c_api.h	/^inline void LGBM_SetLastError(const char* msg) {$/;"	f
LIB	tests/c_api_test/test_.py	/^LIB = LoadDll()$/;"	v
LIBSVM	src/io/parser.cpp	/^  LIBSVM$/;"	e	enum:LightGBM::DataType	file:
LIGHTGBM_APPLICATION_H_	include/LightGBM/application.h	/^#define LIGHTGBM_APPLICATION_H_$/;"	d
LIGHTGBM_BIN_H_	include/LightGBM/bin.h	/^#define LIGHTGBM_BIN_H_$/;"	d
LIGHTGBM_BOOSTING_DART_H_	src/boosting/dart.hpp	/^#define LIGHTGBM_BOOSTING_DART_H_$/;"	d
LIGHTGBM_BOOSTING_GBDT_H_	src/boosting/gbdt.h	/^#define LIGHTGBM_BOOSTING_GBDT_H_$/;"	d
LIGHTGBM_BOOSTING_GOSS_H_	src/boosting/goss.hpp	/^#define LIGHTGBM_BOOSTING_GOSS_H_$/;"	d
LIGHTGBM_BOOSTING_H_	include/LightGBM/boosting.h	/^#define LIGHTGBM_BOOSTING_H_$/;"	d
LIGHTGBM_BOOSTING_RF_H_	src/boosting/rf.hpp	/^#define LIGHTGBM_BOOSTING_RF_H_$/;"	d
LIGHTGBM_BOOSTING_SCORE_UPDATER_HPP_	src/boosting/score_updater.hpp	/^#define LIGHTGBM_BOOSTING_SCORE_UPDATER_HPP_$/;"	d
LIGHTGBM_CONFIG_H_	include/LightGBM/config.h	/^#define LIGHTGBM_CONFIG_H_$/;"	d
LIGHTGBM_C_API_H_	include/LightGBM/c_api.h	/^#define LIGHTGBM_C_API_H_$/;"	d
LIGHTGBM_C_EXPORT	include/LightGBM/export.h	/^#define LIGHTGBM_C_EXPORT /;"	d
LIGHTGBM_DATASET_H_	include/LightGBM/dataset.h	/^#define LIGHTGBM_DATASET_H_$/;"	d
LIGHTGBM_DATASET_LOADER_H_	include/LightGBM/dataset_loader.h	/^#define LIGHTGBM_DATASET_LOADER_H_$/;"	d
LIGHTGBM_EXPORT	include/LightGBM/export.h	/^#define LIGHTGBM_EXPORT /;"	d
LIGHTGBM_EXPORT_H_	include/LightGBM/export.h	/^#define LIGHTGBM_EXPORT_H_$/;"	d
LIGHTGBM_EXTERN_C	include/LightGBM/export.h	/^#define LIGHTGBM_EXTERN_C /;"	d
LIGHTGBM_EXTERN_C	include/LightGBM/export.h	/^#define LIGHTGBM_EXTERN_C$/;"	d
LIGHTGBM_FEATURE_GROUP_H_	include/LightGBM/feature_group.h	/^#define LIGHTGBM_FEATURE_GROUP_H_$/;"	d
LIGHTGBM_IO_DENSE_BIN_HPP_	src/io/dense_bin.hpp	/^#define LIGHTGBM_IO_DENSE_BIN_HPP_$/;"	d
LIGHTGBM_IO_DENSE_NBITS_BIN_HPP_	src/io/dense_nbits_bin.hpp	/^#define LIGHTGBM_IO_DENSE_NBITS_BIN_HPP_$/;"	d
LIGHTGBM_IO_ORDERED_SPARSE_BIN_HPP_	src/io/ordered_sparse_bin.hpp	/^#define LIGHTGBM_IO_ORDERED_SPARSE_BIN_HPP_$/;"	d
LIGHTGBM_IO_PARSER_HPP_	src/io/parser.hpp	/^#define LIGHTGBM_IO_PARSER_HPP_$/;"	d
LIGHTGBM_IO_SPARSE_BIN_HPP_	src/io/sparse_bin.hpp	/^#define LIGHTGBM_IO_SPARSE_BIN_HPP_$/;"	d
LIGHTGBM_META_H_	include/LightGBM/meta.h	/^#define LIGHTGBM_META_H_$/;"	d
LIGHTGBM_METRIC_BINARY_METRIC_HPP_	src/metric/binary_metric.hpp	/^#define LIGHTGBM_METRIC_BINARY_METRIC_HPP_$/;"	d
LIGHTGBM_METRIC_H_	include/LightGBM/metric.h	/^#define LIGHTGBM_METRIC_H_$/;"	d
LIGHTGBM_METRIC_MAP_METRIC_HPP_	src/metric/map_metric.hpp	/^#define LIGHTGBM_METRIC_MAP_METRIC_HPP_$/;"	d
LIGHTGBM_METRIC_MULTICLASS_METRIC_HPP_	src/metric/multiclass_metric.hpp	/^#define LIGHTGBM_METRIC_MULTICLASS_METRIC_HPP_$/;"	d
LIGHTGBM_METRIC_RANK_METRIC_HPP_	src/metric/rank_metric.hpp	/^#define LIGHTGBM_METRIC_RANK_METRIC_HPP_$/;"	d
LIGHTGBM_METRIC_REGRESSION_METRIC_HPP_	src/metric/regression_metric.hpp	/^#define LIGHTGBM_METRIC_REGRESSION_METRIC_HPP_$/;"	d
LIGHTGBM_METRIC_XENTROPY_METRIC_HPP_	src/metric/xentropy_metric.hpp	/^#define LIGHTGBM_METRIC_XENTROPY_METRIC_HPP_$/;"	d
LIGHTGBM_NETWORK_H_	include/LightGBM/network.h	/^#define LIGHTGBM_NETWORK_H_$/;"	d
LIGHTGBM_NETWORK_LINKERS_H_	src/network/linkers.h	/^#define LIGHTGBM_NETWORK_LINKERS_H_$/;"	d
LIGHTGBM_NETWORK_SOCKET_WRAPPER_HPP_	src/network/socket_wrapper.hpp	/^#define LIGHTGBM_NETWORK_SOCKET_WRAPPER_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_BINARY_OBJECTIVE_HPP_	src/objective/binary_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_BINARY_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_FUNCTION_H_	include/LightGBM/objective_function.h	/^#define LIGHTGBM_OBJECTIVE_FUNCTION_H_$/;"	d
LIGHTGBM_OBJECTIVE_MULTICLASS_OBJECTIVE_HPP_	src/objective/multiclass_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_MULTICLASS_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/IPWi_rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/IPWij_rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/SCOREwy_rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/SCOREzn_rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/e2e_IPWi_rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/e2e_IPWij_rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/zinu/ndcg_rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_	src/objective/zinu/score_rank_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_RANK_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_REGRESSION_OBJECTIVE_HPP_	src/objective/regression_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_REGRESSION_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OBJECTIVE_XENTROPY_OBJECTIVE_HPP_	src/objective/xentropy_objective.hpp	/^#define LIGHTGBM_OBJECTIVE_XENTROPY_OBJECTIVE_HPP_$/;"	d
LIGHTGBM_OPENMP_WRAPPER_H_	include/LightGBM/utils/openmp_wrapper.h	/^#define LIGHTGBM_OPENMP_WRAPPER_H_$/;"	d
LIGHTGBM_PREDICTION_EARLY_STOP_H_	include/LightGBM/prediction_early_stop.h	/^#define LIGHTGBM_PREDICTION_EARLY_STOP_H_$/;"	d
LIGHTGBM_PREDICTOR_HPP_	src/application/predictor.hpp	/^#define LIGHTGBM_PREDICTOR_HPP_$/;"	d
LIGHTGBM_R_H_	include/LightGBM/lightgbm_R.h	/^#define LIGHTGBM_R_H_$/;"	d
LIGHTGBM_TREELEARNER_DATA_PARTITION_HPP_	src/treelearner/data_partition.hpp	/^#define LIGHTGBM_TREELEARNER_DATA_PARTITION_HPP_$/;"	d
LIGHTGBM_TREELEARNER_FEATURE_HISTOGRAM_HPP_	src/treelearner/feature_histogram.hpp	/^#define LIGHTGBM_TREELEARNER_FEATURE_HISTOGRAM_HPP_$/;"	d
LIGHTGBM_TREELEARNER_GPU_TREE_LEARNER_H_	src/treelearner/gpu_tree_learner.h	/^#define LIGHTGBM_TREELEARNER_GPU_TREE_LEARNER_H_$/;"	d
LIGHTGBM_TREELEARNER_LEAF_SPLITS_HPP_	src/treelearner/leaf_splits.hpp	/^#define LIGHTGBM_TREELEARNER_LEAF_SPLITS_HPP_$/;"	d
LIGHTGBM_TREELEARNER_PARALLEL_TREE_LEARNER_H_	src/treelearner/parallel_tree_learner.h	/^#define LIGHTGBM_TREELEARNER_PARALLEL_TREE_LEARNER_H_$/;"	d
LIGHTGBM_TREELEARNER_SERIAL_TREE_LEARNER_H_	src/treelearner/serial_tree_learner.h	/^#define LIGHTGBM_TREELEARNER_SERIAL_TREE_LEARNER_H_$/;"	d
LIGHTGBM_TREELEARNER_SPLIT_INFO_HPP_	src/treelearner/split_info.hpp	/^#define LIGHTGBM_TREELEARNER_SPLIT_INFO_HPP_$/;"	d
LIGHTGBM_TREE_H_	include/LightGBM/tree.h	/^#define LIGHTGBM_TREE_H_$/;"	d
LIGHTGBM_TREE_LEARNER_H_	include/LightGBM/tree_learner.h	/^#define LIGHTGBM_TREE_LEARNER_H_$/;"	d
LIGHTGBM_UTILS_ARRAY_AGRS_H_	include/LightGBM/utils/array_args.h	/^#define LIGHTGBM_UTILS_ARRAY_AGRS_H_$/;"	d
LIGHTGBM_UTILS_COMMON_FUN_H_	include/LightGBM/utils/common.h	/^#define LIGHTGBM_UTILS_COMMON_FUN_H_$/;"	d
LIGHTGBM_UTILS_FILE_IO_H_	include/LightGBM/utils/file_io.h	/^#define LIGHTGBM_UTILS_FILE_IO_H_$/;"	d
LIGHTGBM_UTILS_LOG_H_	include/LightGBM/utils/log.h	/^#define LIGHTGBM_UTILS_LOG_H_$/;"	d
LIGHTGBM_UTILS_PIPELINE_READER_H_	include/LightGBM/utils/pipeline_reader.h	/^#define LIGHTGBM_UTILS_PIPELINE_READER_H_$/;"	d
LIGHTGBM_UTILS_RANDOM_H_	include/LightGBM/utils/random.h	/^#define LIGHTGBM_UTILS_RANDOM_H_$/;"	d
LIGHTGBM_UTILS_TEXT_READER_H_	include/LightGBM/utils/text_reader.h	/^#define LIGHTGBM_UTILS_TEXT_READER_H_$/;"	d
LIGHTGBM_UTILS_THREADING_H_	include/LightGBM/utils/threading.h	/^#define LIGHTGBM_UTILS_THREADING_H_$/;"	d
LabelEncoder	python-package/lightgbm/compat.py	/^    from sklearn.preprocessing import LabelEncoder$/;"	i
LambdarankNDCG	src/objective/IPWi_rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/IPWi_rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/IPWi_rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LambdarankNDCG	src/objective/IPWij_rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/IPWij_rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/IPWij_rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LambdarankNDCG	src/objective/SCOREwy_rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/SCOREwy_rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/SCOREwy_rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LambdarankNDCG	src/objective/SCOREzn_rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/SCOREzn_rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/SCOREzn_rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LambdarankNDCG	src/objective/e2e_IPWi_rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/e2e_IPWi_rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/e2e_IPWi_rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LambdarankNDCG	src/objective/e2e_IPWij_rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/e2e_IPWij_rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/e2e_IPWij_rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LambdarankNDCG	src/objective/rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LambdarankNDCG	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LambdarankNDCG	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LambdarankNDCG	src/objective/zinu/ndcg_rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/zinu/ndcg_rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/zinu/ndcg_rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LambdarankNDCG	src/objective/zinu/score_rank_objective.hpp	/^  explicit LambdarankNDCG(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/zinu/score_rank_objective.hpp	/^  explicit LambdarankNDCG(const std::vector<std::string>&) {$/;"	f	class:LightGBM::LambdarankNDCG
LambdarankNDCG	src/objective/zinu/score_rank_objective.hpp	/^class LambdarankNDCG: public ObjectiveFunction {$/;"	c	namespace:LightGBM
LastErrorMsg	include/LightGBM/c_api.h	/^static char* LastErrorMsg() { static THREAD_LOCAL char err_msg[512] = "Everything is fine"; return err_msg; }$/;"	f
LeafIndex	src/treelearner/leaf_splits.hpp	/^  int LeafIndex() const { return leaf_index_; }$/;"	f	class:LightGBM::LeafSplits
LeafOutput	include/LightGBM/tree.h	/^  inline double LeafOutput(int leaf) const { return leaf_value_[leaf]; }$/;"	f	class:LightGBM::Tree
LeafSplits	src/treelearner/leaf_splits.hpp	/^  LeafSplits(data_size_t num_data)$/;"	f	class:LightGBM::LeafSplits
LeafSplits	src/treelearner/leaf_splits.hpp	/^class LeafSplits {$/;"	c	namespace:LightGBM
LibSVMParser	src/io/parser.hpp	/^  explicit LibSVMParser(int label_idx)$/;"	f	class:LightGBM::LibSVMParser
LibSVMParser	src/io/parser.hpp	/^class LibSVMParser: public Parser {$/;"	c	namespace:LightGBM
LightGBM	include/LightGBM/application.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/bin.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/boosting.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/config.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/dataset.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/dataset_loader.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/feature_group.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/meta.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/metric.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/network.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/objective_function.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/prediction_early_stop.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/tree.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/tree_learner.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/utils/array_args.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/utils/common.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/utils/file_io.h	/^namespace LightGBM{$/;"	n
LightGBM	include/LightGBM/utils/log.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/utils/pipeline_reader.h	/^namespace LightGBM{$/;"	n
LightGBM	include/LightGBM/utils/random.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/utils/text_reader.h	/^namespace LightGBM {$/;"	n
LightGBM	include/LightGBM/utils/threading.h	/^namespace LightGBM {$/;"	n
LightGBM	src/application/application.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/application/predictor.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/boosting/boosting.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/boosting/dart.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/boosting/gbdt.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/boosting/gbdt.h	/^namespace LightGBM {$/;"	n
LightGBM	src/boosting/gbdt_model_text.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/boosting/gbdt_prediction.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/boosting/goss.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/boosting/prediction_early_stop.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/boosting/rf.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/boosting/score_updater.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/c_api.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/io/bin.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/io/config.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/io/dataset.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/io/dataset_loader.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/io/dense_bin.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/io/dense_nbits_bin.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/io/file_io.cpp	/^namespace LightGBM{$/;"	n	file:
LightGBM	src/io/metadata.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/io/ordered_sparse_bin.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/io/parser.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/io/parser.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/io/sparse_bin.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/io/tree.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/metric/binary_metric.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/metric/dcg_calculator.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/metric/map_metric.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/metric/metric.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/metric/multiclass_metric.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/metric/rank_metric.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/metric/regression_metric.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/metric/xentropy_metric.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/network/linker_topo.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/network/linkers.h	/^namespace LightGBM {$/;"	n
LightGBM	src/network/linkers_mpi.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/network/linkers_socket.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/network/network.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/network/socket_wrapper.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/IPWi_rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/IPWij_rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/SCOREwy_rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/SCOREzn_rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/binary_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/e2e_IPWi_rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/e2e_IPWij_rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/multiclass_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/objective_function.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/objective/rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/regression_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/xentropy_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/zinu/ndcg_rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/objective/zinu/score_rank_objective.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/treelearner/data_parallel_tree_learner.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/treelearner/data_partition.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/treelearner/feature_histogram.hpp	/^namespace LightGBM$/;"	n
LightGBM	src/treelearner/feature_parallel_tree_learner.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/treelearner/gpu_tree_learner.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/treelearner/gpu_tree_learner.h	/^namespace LightGBM {$/;"	n
LightGBM	src/treelearner/leaf_splits.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/treelearner/parallel_tree_learner.h	/^namespace LightGBM {$/;"	n
LightGBM	src/treelearner/serial_tree_learner.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/treelearner/serial_tree_learner.h	/^namespace LightGBM {$/;"	n
LightGBM	src/treelearner/split_info.hpp	/^namespace LightGBM {$/;"	n
LightGBM	src/treelearner/tree_learner.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBM	src/treelearner/voting_parallel_tree_learner.cpp	/^namespace LightGBM {$/;"	n	file:
LightGBMError	python-package/lightgbm/basic.py	/^class LightGBMError(Exception):$/;"	c
LightGBMError	python-package/lightgbm/engine.py	/^from .basic import Booster, Dataset, LightGBMError, _InnerPredictor$/;"	i
LightGBMError	python-package/lightgbm/sklearn.py	/^from .basic import Dataset, LightGBMError$/;"	i
LightSplitInfo	src/treelearner/split_info.hpp	/^struct LightSplitInfo {$/;"	s	namespace:LightGBM
Lines	include/LightGBM/utils/text_reader.h	/^  inline std::vector<std::string>& Lines() { return lines_; }$/;"	f	class:LightGBM::TextReader
Linkers	src/network/linkers.h	/^  Linkers() {$/;"	f	class:LightGBM::Linkers
Linkers	src/network/linkers.h	/^class Linkers {$/;"	c	namespace:LightGBM
Linkers	src/network/linkers_mpi.cpp	/^Linkers::Linkers(NetworkConfig) {$/;"	f	class:LightGBM::Linkers
Linkers	src/network/linkers_socket.cpp	/^Linkers::Linkers(NetworkConfig config) {$/;"	f	class:LightGBM::Linkers
Listen	src/network/socket_wrapper.hpp	/^  inline void Listen(int backlog = 128) {$/;"	f	class:LightGBM::TcpSocket
ListenThread	src/network/linkers_socket.cpp	/^void Linkers::ListenThread(int incoming_cnt) {$/;"	f	class:LightGBM::Linkers
LoadData	src/application/application.cpp	/^void Application::LoadData() {$/;"	f	class:LightGBM::Application
LoadDll	tests/c_api_test/test_.py	/^def LoadDll():$/;"	f
LoadFileToBoosting	src/boosting/boosting.cpp	/^bool Boosting::LoadFileToBoosting(Boosting* boosting, const char* filename) {$/;"	f	class:LightGBM::Boosting
LoadFromBinFile	src/io/dataset_loader.cpp	/^Dataset* DatasetLoader::LoadFromBinFile(const char* data_filename, const char* bin_filename, int rank, int num_machines, int* num_global_data, std::vector<data_size_t>* used_data_indices) {$/;"	f	class:LightGBM::DatasetLoader
LoadFromFile	include/LightGBM/dataset_loader.h	/^  LIGHTGBM_EXPORT Dataset* LoadFromFile(const char* filename, const char* initscore_file) {$/;"	f	class:LightGBM::DatasetLoader
LoadFromFile	src/io/dataset_loader.cpp	/^Dataset* DatasetLoader::LoadFromFile(const char* filename, const char* initscore_file, int rank, int num_machines) {$/;"	f	class:LightGBM::DatasetLoader
LoadFromFileAlignWithOtherDataset	src/io/dataset_loader.cpp	/^Dataset* DatasetLoader::LoadFromFileAlignWithOtherDataset(const char* filename, const char* initscore_file, const Dataset* train_data) {$/;"	f	class:LightGBM::DatasetLoader
LoadFromMemory	src/io/metadata.cpp	/^void Metadata::LoadFromMemory(const void* memory) {$/;"	f	class:LightGBM::Metadata
LoadFromPair	src/io/sparse_bin.hpp	/^  void LoadFromPair(const std::vector<std::pair<data_size_t, VAL_T>>& idx_val_pairs) {$/;"	f	class:LightGBM::SparseBin
LoadInitialScore	src/io/metadata.cpp	/^void Metadata::LoadInitialScore(const char* initscore_file) {$/;"	f	class:LightGBM::Metadata
LoadModelFromString	src/boosting/gbdt_model_text.cpp	/^bool GBDT::LoadModelFromString(const char* buffer, size_t len) {$/;"	f	class:LightGBM::GBDT
LoadModelFromString	src/c_api.cpp	/^  void LoadModelFromString(const char* model_str) {$/;"	f	class:LightGBM::Booster
LoadParameters	src/application/application.cpp	/^void Application::LoadParameters(int argc, char** argv) {$/;"	f	class:LightGBM::Application
LoadQueryBoundaries	src/io/metadata.cpp	/^void Metadata::LoadQueryBoundaries() {$/;"	f	class:LightGBM::Metadata
LoadQueryWeights	src/io/metadata.cpp	/^void Metadata::LoadQueryWeights() {$/;"	f	class:LightGBM::Metadata
LoadRanks	src/io/metadata.cpp	/^void Metadata::LoadRanks() { \/\/\/$/;"	f	class:LightGBM::Metadata
LoadTextDataToMemory	src/io/dataset_loader.cpp	/^std::vector<std::string> DatasetLoader::LoadTextDataToMemory(const char* filename, const Metadata& metadata,$/;"	f	class:LightGBM::DatasetLoader
LoadWeights	src/io/metadata.cpp	/^void Metadata::LoadWeights() {$/;"	f	class:LightGBM::Metadata
LocalFile	src/io/file_io.cpp	/^  LocalFile(const std::string& filename, const std::string& mode) : filename_(filename), mode_(mode) {}$/;"	f	struct:LightGBM::LocalFile
LocalFile	src/io/file_io.cpp	/^struct LocalFile : VirtualFileReader, VirtualFileWriter {$/;"	s	namespace:LightGBM	file:
Log	include/LightGBM/utils/log.h	/^class Log {$/;"	c	namespace:LightGBM
LogLevel	include/LightGBM/utils/log.h	/^enum class LogLevel: int {$/;"	c	namespace:LightGBM
LossOnPoint	src/metric/binary_metric.hpp	/^  inline static double LossOnPoint(label_t label, double prob) {$/;"	f	class:LightGBM::BinaryErrorMetric
LossOnPoint	src/metric/binary_metric.hpp	/^  inline static double LossOnPoint(label_t label, double prob) {$/;"	f	class:LightGBM::BinaryLoglossMetric
LossOnPoint	src/metric/multiclass_metric.hpp	/^  inline static double LossOnPoint(label_t label, std::vector<double>& score) {$/;"	f	class:LightGBM::MultiErrorMetric
LossOnPoint	src/metric/multiclass_metric.hpp	/^  inline static double LossOnPoint(label_t label, std::vector<double>& score) {$/;"	f	class:LightGBM::MultiSoftmaxLoglossMetric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig& config) {$/;"	f	class:LightGBM::FairLossMetric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig& config) {$/;"	f	class:LightGBM::HuberLossMetric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig& config) {$/;"	f	class:LightGBM::QuantileMetric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig& config) {$/;"	f	class:LightGBM::TweedieMetric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig&) {$/;"	f	class:LightGBM::GammaDevianceMetric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig&) {$/;"	f	class:LightGBM::GammaMetric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig&) {$/;"	f	class:LightGBM::L1Metric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig&) {$/;"	f	class:LightGBM::L2Metric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig&) {$/;"	f	class:LightGBM::MAPEMetric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig&) {$/;"	f	class:LightGBM::PoissonMetric
LossOnPoint	src/metric/regression_metric.hpp	/^  inline static double LossOnPoint(label_t label, double score, const MetricConfig&) {$/;"	f	class:LightGBM::RMSEMetric
MALLOC	src/network/socket_wrapper.hpp	/^#define MALLOC(/;"	d
MAPEMetric	src/metric/regression_metric.hpp	/^  explicit MAPEMetric(const MetricConfig& config) :RegressionMetric<MAPEMetric>(config) {$/;"	f	class:LightGBM::MAPEMetric
MAPEMetric	src/metric/regression_metric.hpp	/^class MAPEMetric : public RegressionMetric<MAPEMetric> {$/;"	c	namespace:LightGBM
MOCK_MODULES	docs/conf.py	/^MOCK_MODULES = ['numpy', 'scipy', 'scipy.sparse',$/;"	v
MPI_SAFE_CALL	src/network/linkers.h	/^#define MPI_SAFE_CALL(/;"	d
Make	src/io/file_io.cpp	/^std::unique_ptr<VirtualFileReader> VirtualFileReader::Make(const std::string& filename) {$/;"	f	class:LightGBM::VirtualFileReader
Make	src/io/file_io.cpp	/^std::unique_ptr<VirtualFileWriter> VirtualFileWriter::Make(const std::string& filename) {$/;"	f	class:LightGBM::VirtualFileWriter
MakeHDFSFileSystem	src/io/file_io.cpp	/^  static hdfsFS MakeHDFSFileSystem(const std::string& hostport) {$/;"	f	struct:LightGBM::HDFSFile	file:
MapMetric	src/metric/map_metric.hpp	/^  explicit MapMetric(const MetricConfig& config) {$/;"	f	class:LightGBM::MapMetric
MapMetric	src/metric/map_metric.hpp	/^class MapMetric:public Metric {$/;"	c	namespace:LightGBM
MarkUsed	src/io/dataset.cpp	/^void MarkUsed(std::vector<bool>& mark, const int* indices, int num_indices) {$/;"	f	namespace:LightGBM
MaxK	include/LightGBM/utils/array_args.h	/^  inline static void MaxK(const std::vector<VAL_T>& array, int k, std::vector<VAL_T>* out) {$/;"	f	class:LightGBM::ArrayArgs
MergeFrom	src/c_api.cpp	/^  void MergeFrom(const Booster* other) {$/;"	f	class:LightGBM::Booster
Metadata	include/LightGBM/dataset.h	/^class Metadata {$/;"	c	namespace:LightGBM
Metadata	src/io/metadata.cpp	/^Metadata::Metadata() {$/;"	f	class:LightGBM::Metadata
Metric	include/LightGBM/metric.h	/^class Metric {$/;"	c	namespace:LightGBM
MetricConfig	include/LightGBM/config.h	/^struct MetricConfig: public ConfigBase {$/;"	s	namespace:LightGBM
MissingType	include/LightGBM/bin.h	/^enum MissingType {$/;"	g	namespace:LightGBM
Mock	docs/conf.py	/^    from mock import Mock  # Python 2.x$/;"	i
Mock	docs/conf.py	/^    from unittest.mock import Mock  # Python 3.x$/;"	i
ModelToIfElse	src/boosting/gbdt_model_text.cpp	/^std::string GBDT::ModelToIfElse(int num_iteration) const {$/;"	f	class:LightGBM::GBDT
Move	src/treelearner/feature_histogram.hpp	/^  void Move(int src_idx, int dst_idx) {$/;"	f	class:LightGBM::HistogramPool
MultiErrorMetric	src/metric/multiclass_metric.hpp	/^  explicit MultiErrorMetric(const MetricConfig& config) :MulticlassMetric<MultiErrorMetric>(config) {}$/;"	f	class:LightGBM::MultiErrorMetric
MultiErrorMetric	src/metric/multiclass_metric.hpp	/^class MultiErrorMetric: public MulticlassMetric<MultiErrorMetric> {$/;"	c	namespace:LightGBM
MultiSoftmaxLoglossMetric	src/metric/multiclass_metric.hpp	/^  explicit MultiSoftmaxLoglossMetric(const MetricConfig& config) :MulticlassMetric<MultiSoftmaxLoglossMetric>(config) {}$/;"	f	class:LightGBM::MultiSoftmaxLoglossMetric
MultiSoftmaxLoglossMetric	src/metric/multiclass_metric.hpp	/^class MultiSoftmaxLoglossMetric: public MulticlassMetric<MultiSoftmaxLoglossMetric> {$/;"	c	namespace:LightGBM
MulticlassMetric	src/metric/multiclass_metric.hpp	/^  explicit MulticlassMetric(const MetricConfig& config) {$/;"	f	class:LightGBM::MulticlassMetric
MulticlassMetric	src/metric/multiclass_metric.hpp	/^class MulticlassMetric: public Metric {$/;"	c	namespace:LightGBM
MulticlassOVA	src/objective/multiclass_objective.hpp	/^  explicit MulticlassOVA(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::MulticlassOVA
MulticlassOVA	src/objective/multiclass_objective.hpp	/^  explicit MulticlassOVA(const std::vector<std::string>& strs) {$/;"	f	class:LightGBM::MulticlassOVA
MulticlassOVA	src/objective/multiclass_objective.hpp	/^class MulticlassOVA: public ObjectiveFunction {$/;"	c	namespace:LightGBM
MulticlassSoftmax	src/objective/multiclass_objective.hpp	/^  explicit MulticlassSoftmax(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::MulticlassSoftmax
MulticlassSoftmax	src/objective/multiclass_objective.hpp	/^  explicit MulticlassSoftmax(const std::vector<std::string>& strs) {$/;"	f	class:LightGBM::MulticlassSoftmax
MulticlassSoftmax	src/objective/multiclass_objective.hpp	/^class MulticlassSoftmax: public ObjectiveFunction {$/;"	c	namespace:LightGBM
MultiplyScore	src/boosting/rf.hpp	/^  void MultiplyScore(const int cur_tree_id, double val) {$/;"	f	class:LightGBM::RF
MultiplyScore	src/boosting/score_updater.hpp	/^  inline void MultiplyScore(double val, int cur_tree_id) {$/;"	f	class:LightGBM::ScoreUpdater
NAMED_BITS	include/LightGBM/R_object_helper.h	/^#define NAMED_BITS /;"	d
NDCGMetric	src/metric/rank_metric.hpp	/^  explicit NDCGMetric(const MetricConfig& config) {$/;"	f	class:LightGBM::NDCGMetric
NDCGMetric	src/metric/rank_metric.hpp	/^class NDCGMetric:public Metric {$/;"	c	namespace:LightGBM
NOMINMAX	src/network/socket_wrapper.hpp	/^#define NOMINMAX$/;"	d
NO_SPECIFIC	include/LightGBM/meta.h	/^#define NO_SPECIFIC /;"	d
NUL	include/LightGBM/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::final::Type
NUMBER	include/LightGBM/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::final::Type
NaN	include/LightGBM/bin.h	/^  NaN$/;"	e	enum:LightGBM::MissingType
Name	src/metric/binary_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::BinaryErrorMetric
Name	src/metric/binary_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::BinaryLoglossMetric
Name	src/metric/multiclass_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::MultiErrorMetric
Name	src/metric/multiclass_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::MultiSoftmaxLoglossMetric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::FairLossMetric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::GammaDevianceMetric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::GammaMetric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::HuberLossMetric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::L1Metric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::L2Metric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::MAPEMetric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::PoissonMetric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::QuantileMetric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::RMSEMetric
Name	src/metric/regression_metric.hpp	/^  inline static const char* Name() {$/;"	f	class:LightGBM::TweedieMetric
NamedTemporaryFile	python-package/lightgbm/basic.py	/^from tempfile import NamedTemporaryFile$/;"	i
NeedAccuratePrediction	include/LightGBM/objective_function.h	/^  virtual bool NeedAccuratePrediction() const { return true; }$/;"	f	class:LightGBM::ObjectiveFunction
NeedFilter	src/io/bin.cpp	/^  bool NeedFilter(const std::vector<int>& cnt_in_bin, int total_cnt, int filter_cnt, BinType bin_type) {$/;"	f	namespace:LightGBM
Network	include/LightGBM/network.h	/^class Network {$/;"	c	namespace:LightGBM
NetworkConfig	include/LightGBM/config.h	/^struct NetworkConfig: public ConfigBase {$/;"	s	namespace:LightGBM
NextFloat	include/LightGBM/utils/random.h	/^  inline float NextFloat() {$/;"	f	class:LightGBM::Random
NextInt	include/LightGBM/utils/random.h	/^  inline int NextInt(int lower_bound, int upper_bound) {$/;"	f	class:LightGBM::Random
NextNonZero	src/c_api.cpp	/^std::pair<int, double> CSC_RowIterator::NextNonZero() {$/;"	f	class:CSC_RowIterator
NextNonzero	src/io/sparse_bin.hpp	/^  inline bool NextNonzero(data_size_t* i_delta,$/;"	f	class:LightGBM::SparseBin
NextShort	include/LightGBM/utils/random.h	/^  inline int NextShort(int lower_bound, int upper_bound) {$/;"	f	class:LightGBM::Random
NoGroup	src/io/dataset.cpp	/^std::vector<std::vector<int>> NoGroup($/;"	f	namespace:LightGBM
NodeToIfElse	src/io/tree.cpp	/^std::string Tree::NodeToIfElse(int index, bool is_predict_leaf_index) const {$/;"	f	class:LightGBM::Tree
NodeToIfElseByMap	src/io/tree.cpp	/^std::string Tree::NodeToIfElseByMap(int index, bool is_predict_leaf_index) const {$/;"	f	class:LightGBM::Tree
NodeToJSON	src/io/tree.cpp	/^std::string Tree::NodeToJSON(int index) const {$/;"	f	class:LightGBM::Tree
None	include/LightGBM/bin.h	/^  None,$/;"	e	enum:LightGBM::MissingType
Normal	include/LightGBM/network.h	/^  Normal,  \/\/ normal node, 1 group only have 1 machine$/;"	e	enum:LightGBM::RecursiveHalvingNodeType
Normalize	src/boosting/dart.hpp	/^  void Normalize() {$/;"	f	class:LightGBM::DART
NotFittedError	python-package/lightgbm/compat.py	/^        from sklearn.exceptions import NotFittedError$/;"	i
NotFittedError	python-package/lightgbm/compat.py	/^        from sklearn.utils.validation import NotFittedError$/;"	i
NullStruct	src/io/json11.cpp	/^struct NullStruct {$/;"	s	namespace:json11	file:
NumModelPerIteration	include/LightGBM/objective_function.h	/^  virtual int NumModelPerIteration() const { return 1; }$/;"	f	class:LightGBM::ObjectiveFunction
NumPredictOneRow	include/LightGBM/objective_function.h	/^  virtual int NumPredictOneRow() const { return 1; }$/;"	f	class:LightGBM::ObjectiveFunction
NumTotalBin	include/LightGBM/dataset.h	/^  inline uint64_t NumTotalBin() const {$/;"	f	class:LightGBM::Dataset
NumericalBin	include/LightGBM/bin.h	/^  NumericalBin,$/;"	e	enum:LightGBM::BinType
NumericalDecision	include/LightGBM/tree.h	/^  inline int NumericalDecision(double fval, int node) const {$/;"	f	class:LightGBM::Tree
NumericalDecisionIfElse	src/io/tree.cpp	/^std::string Tree::NumericalDecisionIfElse(int node) const {$/;"	f	class:LightGBM::Tree
NumericalDecisionInner	include/LightGBM/tree.h	/^  inline int NumericalDecisionInner(uint32_t fval, int node, uint32_t default_bin, uint32_t max_bin) const {$/;"	f	class:LightGBM::Tree
OBJECT	include/LightGBM/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::final::Type
OMP_INIT_EX	include/LightGBM/utils/openmp_wrapper.h	/^#define OMP_INIT_EX(/;"	d
OMP_LOOP_EX_BEGIN	include/LightGBM/utils/openmp_wrapper.h	/^#define OMP_LOOP_EX_BEGIN(/;"	d
OMP_LOOP_EX_END	include/LightGBM/utils/openmp_wrapper.h	/^#define OMP_LOOP_EX_END(/;"	d
OMP_THROW_EX	include/LightGBM/utils/openmp_wrapper.h	/^#define OMP_THROW_EX(/;"	d
ObjectiveConfig	include/LightGBM/config.h	/^struct ObjectiveConfig: public ConfigBase {$/;"	s	namespace:LightGBM
ObjectiveFunction	include/LightGBM/objective_function.h	/^class ObjectiveFunction {$/;"	c	namespace:LightGBM
ObtainAutomaticInitialScore	src/boosting/gbdt.cpp	/^double ObtainAutomaticInitialScore(const ObjectiveFunction* fobj) {$/;"	f	namespace:LightGBM
ObtainMinMaxSum	include/LightGBM/utils/common.h	/^inline static void ObtainMinMaxSum(const T1 *w, int nw, T1 *mi, T1 *ma, T2 *su) {$/;"	f	namespace:LightGBM::Common
OrderedBin	include/LightGBM/bin.h	/^class OrderedBin {$/;"	c	namespace:LightGBM
OrderedSparseBin	src/io/ordered_sparse_bin.hpp	/^  OrderedSparseBin(const SparseBin<VAL_T>* bin_data)$/;"	f	class:LightGBM::OrderedSparseBin
OrderedSparseBin	src/io/ordered_sparse_bin.hpp	/^class OrderedSparseBin: public OrderedBin {$/;"	c	namespace:LightGBM
Other	include/LightGBM/network.h	/^  Other  \/\/ non-leader machines in group$/;"	e	enum:LightGBM::RecursiveHalvingNodeType
OutputMetric	src/boosting/gbdt.cpp	/^std::string GBDT::OutputMetric(int iter) { \/\/\/$/;"	f	class:LightGBM::GBDT
OverallConfig	include/LightGBM/config.h	/^struct OverallConfig: public ConfigBase {$/;"	s	namespace:LightGBM
PANDAS_DTYPE_MAPPER	python-package/lightgbm/basic.py	/^PANDAS_DTYPE_MAPPER = {'int8': 'int', 'int16': 'int', 'int32': 'int',$/;"	v
ParallelSort	include/LightGBM/utils/common.h	/^static void ParallelSort(_RanIt _First, _RanIt _Last, _Pr _Pred) {$/;"	f	namespace:LightGBM::Common
ParallelSort	include/LightGBM/utils/common.h	/^static void ParallelSort(_RanIt _First, _RanIt _Last, _Pr _Pred, _VTRanIt*) {$/;"	f	namespace:LightGBM::Common
ParameterAlias	include/LightGBM/config.h	/^struct ParameterAlias {$/;"	s	namespace:LightGBM
ParseMachineList	src/network/linkers_socket.cpp	/^void Linkers::ParseMachineList(const std::string& machines, const std::string& filename) {$/;"	f	class:LightGBM::Linkers
Parser	include/LightGBM/dataset.h	/^class Parser {$/;"	c	namespace:LightGBM
Partition	include/LightGBM/utils/array_args.h	/^  inline static void Partition(std::vector<VAL_T>* arr, int start, int end, int* l, int* r) {$/;"	f	class:LightGBM::ArrayArgs
PartitionLabel	src/io/metadata.cpp	/^void Metadata::PartitionLabel(const std::vector<data_size_t>& used_indices) {$/;"	f	class:LightGBM::Metadata
PathElement	include/LightGBM/tree.h	/^    PathElement() {}$/;"	f	struct:LightGBM::Tree::PathElement
PathElement	include/LightGBM/tree.h	/^    PathElement(int i, double z, double o, double w) : feature_index(i), zero_fraction(z), one_fraction(o), pweight(w) {}$/;"	f	struct:LightGBM::Tree::PathElement
PathElement	include/LightGBM/tree.h	/^  struct PathElement {$/;"	s	class:LightGBM::Tree
PercentileFun	src/objective/regression_objective.hpp	/^#define PercentileFun(/;"	d
PercentileFun	src/objective/regression_objective.hpp	/^#undef PercentileFun$/;"	d
PipelineReader	include/LightGBM/utils/pipeline_reader.h	/^class PipelineReader {$/;"	c	namespace:LightGBM
PoissonMetric	src/metric/regression_metric.hpp	/^  explicit PoissonMetric(const MetricConfig& config) :RegressionMetric<PoissonMetric>(config) {$/;"	f	class:LightGBM::PoissonMetric
PoissonMetric	src/metric/regression_metric.hpp	/^class PoissonMetric: public RegressionMetric<PoissonMetric> {$/;"	c	namespace:LightGBM
Pow	include/LightGBM/utils/common.h	/^inline static double Pow(T base, int power) {$/;"	f	namespace:LightGBM::Common
Pow2RoundUp	include/LightGBM/utils/common.h	/^inline static int64_t Pow2RoundUp(int64_t x) {$/;"	f	namespace:LightGBM::Common
Predict	include/LightGBM/tree.h	/^inline double Tree::Predict(const double* feature_values) const {$/;"	f	class:LightGBM::Tree
Predict	src/application/application.cpp	/^void Application::Predict() {$/;"	f	class:LightGBM::Application
Predict	src/application/predictor.hpp	/^  void Predict(const char* data_filename, const char* result_filename, bool has_header) {$/;"	f	class:LightGBM::Predictor
Predict	src/boosting/gbdt_prediction.cpp	/^void GBDT::Predict(const double* features, double* output, const PredictionEarlyStopInstance* early_stop) const {$/;"	f	class:LightGBM::GBDT
Predict	src/c_api.cpp	/^  void Predict(int num_iteration, int predict_type, const char* data_filename,$/;"	f	class:LightGBM::Booster
Predict	src/c_api.cpp	/^  void Predict(int num_iteration, int predict_type, int nrow,$/;"	f	class:LightGBM::Booster
PredictByMap	include/LightGBM/tree.h	/^inline double Tree::PredictByMap(const std::unordered_map<int, double>& feature_values) const {$/;"	f	class:LightGBM::Tree
PredictByMap	src/boosting/gbdt_prediction.cpp	/^void GBDT::PredictByMap(const std::unordered_map<int, double>& features, double* output, const PredictionEarlyStopInstance* early_stop) const {$/;"	f	class:LightGBM::GBDT
PredictContrib	include/LightGBM/tree.h	/^inline void Tree::PredictContrib(const double* feature_values, int num_features, double* output) {$/;"	f	class:LightGBM::Tree
PredictContrib	src/boosting/gbdt.cpp	/^void GBDT::PredictContrib(const double* features, double* output, const PredictionEarlyStopInstance* early_stop) const {$/;"	f	class:LightGBM::GBDT
PredictLeafIndex	include/LightGBM/tree.h	/^inline int Tree::PredictLeafIndex(const double* feature_values) const {$/;"	f	class:LightGBM::Tree
PredictLeafIndex	src/boosting/gbdt_prediction.cpp	/^void GBDT::PredictLeafIndex(const double* features, double* output) const {$/;"	f	class:LightGBM::GBDT
PredictLeafIndexByMap	include/LightGBM/tree.h	/^inline int Tree::PredictLeafIndexByMap(const std::unordered_map<int, double>& feature_values) const {$/;"	f	class:LightGBM::Tree
PredictLeafIndexByMap	src/boosting/gbdt_prediction.cpp	/^void GBDT::PredictLeafIndexByMap(const std::unordered_map<int, double>& features, double* output) const {$/;"	f	class:LightGBM::GBDT
PredictRaw	src/boosting/gbdt_prediction.cpp	/^void GBDT::PredictRaw(const double* features, double* output, const PredictionEarlyStopInstance* early_stop) const {$/;"	f	class:LightGBM::GBDT
PredictRawByMap	src/boosting/gbdt_prediction.cpp	/^void GBDT::PredictRawByMap(const std::unordered_map<int, double>& features, double* output, const PredictionEarlyStopInstance* early_stop) const {$/;"	f	class:LightGBM::GBDT
PredictionEarlyStopConfig	include/LightGBM/prediction_early_stop.h	/^struct PredictionEarlyStopConfig {$/;"	s	namespace:LightGBM
PredictionEarlyStopInstance	include/LightGBM/prediction_early_stop.h	/^struct PredictionEarlyStopInstance {$/;"	s	namespace:LightGBM
PredictionFun	src/io/tree.cpp	/^#define PredictionFun(/;"	d	file:
PredictionFun	src/io/tree.cpp	/^#undef PredictionFun$/;"	d	file:
Predictor	src/application/predictor.hpp	/^  Predictor(Boosting* boosting, int num_iteration,$/;"	f	class:LightGBM::Predictor
Predictor	src/application/predictor.hpp	/^class Predictor {$/;"	c	namespace:LightGBM
PrintHistograms	src/treelearner/gpu_tree_learner.cpp	/^void PrintHistograms(HistogramBinEntry* h, size_t size) {$/;"	f	namespace:LightGBM
PrintLinkers	src/network/linkers_socket.cpp	/^void Linkers::PrintLinkers() {$/;"	f	class:LightGBM::Linkers
PushData	include/LightGBM/feature_group.h	/^  inline void PushData(int tid, int sub_feature_idx, data_size_t line_idx, double value) {$/;"	f	class:LightGBM::FeatureGroup
PushOneData	include/LightGBM/dataset.h	/^  inline void PushOneData(int tid, data_size_t row_idx, int group, int sub_feature, double value) {$/;"	f	class:LightGBM::Dataset
PushOneRow	include/LightGBM/dataset.h	/^  inline void PushOneRow(int tid, data_size_t row_idx, const std::vector<double>& feature_values) {$/;"	f	class:LightGBM::Dataset
PushOneRow	include/LightGBM/dataset.h	/^  inline void PushOneRow(int tid, data_size_t row_idx, const std::vector<std::pair<int, double>>& feature_values) {$/;"	f	class:LightGBM::Dataset
Python	docs/conf.py	/^    from mock import Mock  # Python 2.x$/;"	i
Python	docs/conf.py	/^    from unittest.mock import Mock  # Python 3.x$/;"	i
QuantileMetric	src/metric/regression_metric.hpp	/^  explicit QuantileMetric(const MetricConfig& config) :RegressionMetric<QuantileMetric>(config) {$/;"	f	class:LightGBM::QuantileMetric
QuantileMetric	src/metric/regression_metric.hpp	/^class QuantileMetric : public RegressionMetric<QuantileMetric> {$/;"	c	namespace:LightGBM
RF	src/boosting/rf.hpp	/^  RF() : GBDT() { $/;"	f	class:LightGBM::RF
RF	src/boosting/rf.hpp	/^class RF: public GBDT {$/;"	c	namespace:LightGBM
RMSEMetric	src/metric/regression_metric.hpp	/^  explicit RMSEMetric(const MetricConfig& config) :RegressionMetric<RMSEMetric>(config) {}$/;"	f	class:LightGBM::RMSEMetric
RMSEMetric	src/metric/regression_metric.hpp	/^class RMSEMetric: public RegressionMetric<RMSEMetric> {$/;"	c	namespace:LightGBM
R_ADDR	include/LightGBM/R_object_helper.h	/^#define R_ADDR(/;"	d
R_API_BEGIN	src/lightgbm_R.cpp	/^#define R_API_BEGIN(/;"	d	file:
R_API_END	src/lightgbm_R.cpp	/^#define R_API_END(/;"	d	file:
R_AS_INT	include/LightGBM/R_object_helper.h	/^#define R_AS_INT(/;"	d
R_CHAR_PTR	include/LightGBM/R_object_helper.h	/^#define R_CHAR_PTR(/;"	d
R_GET_PTR	include/LightGBM/R_object_helper.h	/^inline void* R_GET_PTR(LGBM_SE x) {$/;"	f
R_INTERNALS_UUID	include/LightGBM/R_object_helper.h	/^#define R_INTERNALS_UUID /;"	d
R_INT_PTR	include/LightGBM/R_object_helper.h	/^#define R_INT_PTR(/;"	d
R_IS_NULL	include/LightGBM/R_object_helper.h	/^#define R_IS_NULL(/;"	d
R_OBJECT_HELPER_H_	include/LightGBM/R_object_helper.h	/^#define R_OBJECT_HELPER_H_$/;"	d
R_REAL_PTR	include/LightGBM/R_object_helper.h	/^#define R_REAL_PTR(/;"	d
R_SET_PTR	include/LightGBM/R_object_helper.h	/^inline void R_SET_PTR(LGBM_SE x, void* ptr) {$/;"	f
R_xlen_t	include/LightGBM/R_object_helper.h	/^typedef int R_xlen_t;$/;"	t
R_xlen_t	include/LightGBM/R_object_helper.h	/^typedef ptrdiff_t R_xlen_t;$/;"	t
RandInt16	include/LightGBM/utils/random.h	/^  inline int RandInt16() {$/;"	f	class:LightGBM::Random
RandInt32	include/LightGBM/utils/random.h	/^  inline int RandInt32() {$/;"	f	class:LightGBM::Random
Random	include/LightGBM/utils/random.h	/^  Random() {$/;"	f	class:LightGBM::Random
Random	include/LightGBM/utils/random.h	/^  Random(int seed) {$/;"	f	class:LightGBM::Random
Random	include/LightGBM/utils/random.h	/^class Random {$/;"	c	namespace:LightGBM
RawData	src/treelearner/feature_histogram.hpp	/^  HistogramBinEntry* RawData() {$/;"	f	class:LightGBM::FeatureHistogram
RawGet	src/io/dense_bin.hpp	/^inline uint32_t DenseBinIterator<VAL_T>::RawGet(data_size_t idx) {$/;"	f	class:LightGBM::DenseBinIterator
RawGet	src/io/dense_nbits_bin.hpp	/^uint32_t Dense4bitsBinIterator::RawGet(data_size_t idx) {$/;"	f	class:LightGBM::Dense4bitsBinIterator
RawGet	src/io/sparse_bin.hpp	/^inline uint32_t SparseBinIterator<VAL_T>::RawGet(data_size_t idx) {$/;"	f	class:LightGBM::SparseBinIterator
ReSize	src/io/dataset.cpp	/^void Dataset::ReSize(data_size_t num_data) {$/;"	f	class:LightGBM::Dataset
ReThrow	include/LightGBM/utils/openmp_wrapper.h	/^  void ReThrow() {$/;"	f	class:ThreadExceptionHelper
Read	include/LightGBM/utils/pipeline_reader.h	/^  static size_t Read(const char* filename, int skip_bytes, const std::function<size_t (const char*, size_t)>& process_fun) {$/;"	f	class:LightGBM::PipelineReader
Read	src/io/file_io.cpp	/^  size_t Read(void* buffer, size_t bytes) const {$/;"	f	struct:LightGBM::LocalFile
Read	src/io/file_io.cpp	/^  size_t Read(void* data, size_t bytes) const {$/;"	f	struct:LightGBM::HDFSFile
ReadAllAndProcess	include/LightGBM/utils/text_reader.h	/^  INDEX_T ReadAllAndProcess(const std::function<void(INDEX_T, const char*, size_t)>& process_fun) {$/;"	f	class:LightGBM::TextReader
ReadAllAndProcessParallel	include/LightGBM/utils/text_reader.h	/^  INDEX_T ReadAllAndProcessParallel(const std::function<void(INDEX_T, const std::vector<std::string>&)>& process_fun) {$/;"	f	class:LightGBM::TextReader
ReadAllAndProcessParallelWithFilter	include/LightGBM/utils/text_reader.h	/^  INDEX_T ReadAllAndProcessParallelWithFilter(const std::function<void(INDEX_T, const std::vector<std::string>&)>& process_fun, const std::function<bool(INDEX_T,INDEX_T)>& filter_fun) {$/;"	f	class:LightGBM::TextReader
ReadAllLines	include/LightGBM/utils/text_reader.h	/^  INDEX_T ReadAllLines() {$/;"	f	class:LightGBM::TextReader
ReadAndFilterLines	include/LightGBM/utils/text_reader.h	/^  INDEX_T ReadAndFilterLines(const std::function<bool(INDEX_T)>& filter_fun, std::vector<INDEX_T>* out_used_data_indices) {$/;"	f	class:LightGBM::TextReader
ReadContent	include/LightGBM/utils/text_reader.h	/^  std::vector<char> ReadContent(size_t* out_len) {$/;"	f	class:LightGBM::TextReader
ReadPartAndProcessParallel	include/LightGBM/utils/text_reader.h	/^  INDEX_T ReadPartAndProcessParallel(const std::vector<INDEX_T>& used_data_indices, const std::function<void(INDEX_T, const std::vector<std::string>&)>& process_fun) {$/;"	f	class:LightGBM::TextReader
RealFeatureIndex	include/LightGBM/dataset.h	/^  inline int RealFeatureIndex(int fidx) const {$/;"	f	class:LightGBM::Dataset
RealThreshold	include/LightGBM/dataset.h	/^  inline double RealThreshold(int i, uint32_t threshold) const {$/;"	f	class:LightGBM::Dataset
RecomputeLeafDepths	include/LightGBM/tree.h	/^inline void Tree::RecomputeLeafDepths(int node, int depth) {$/;"	f	class:LightGBM::Tree
RecomputeMaxDepth	src/io/tree.cpp	/^void Tree::RecomputeMaxDepth() {$/;"	f	class:LightGBM::Tree
RecursiveHalvingMap	include/LightGBM/network.h	/^class RecursiveHalvingMap {$/;"	c	namespace:LightGBM
RecursiveHalvingMap	src/network/linker_topo.cpp	/^RecursiveHalvingMap::RecursiveHalvingMap() {$/;"	f	class:LightGBM::RecursiveHalvingMap
RecursiveHalvingMap	src/network/linker_topo.cpp	/^RecursiveHalvingMap::RecursiveHalvingMap(int in_k, RecursiveHalvingNodeType _type, bool _is_power_of_2) {$/;"	f	class:LightGBM::RecursiveHalvingMap
RecursiveHalvingNodeType	include/LightGBM/network.h	/^enum RecursiveHalvingNodeType {$/;"	g	namespace:LightGBM
Recv	src/network/linkers.h	/^inline void Linkers::Recv(int rank, char* data, int len) const {$/;"	f	class:LightGBM::Linkers
Recv	src/network/linkers.h	/^inline void Linkers::Recv(int rank, char* data, int64_t len) const {$/;"	f	class:LightGBM::Linkers
Recv	src/network/socket_wrapper.hpp	/^  inline int Recv(char *buf_, int len, int flags = 0) {$/;"	f	class:LightGBM::TcpSocket
ReduceFunction	include/LightGBM/meta.h	/^typedef void(*ReduceFunction)(const char* input, char* output, int type_size, comm_size_t array_size);$/;"	t	namespace:LightGBM
ReduceScatter	src/network/network.cpp	/^void Network::ReduceScatter(char* input, comm_size_t input_size, int type_size,$/;"	f	class:LightGBM::Network
ReduceScatterFunction	include/LightGBM/meta.h	/^typedef void(*ReduceScatterFunction)(char* input, comm_size_t input_size, int type_size,$/;"	t	namespace:LightGBM
ReduceScatterRecursiveHalving	src/network/network.cpp	/^void Network::ReduceScatterRecursiveHalving(char* input, comm_size_t input_size, int type_size,$/;"	f	class:LightGBM::Network
ReduceScatterRing	src/network/network.cpp	/^void Network::ReduceScatterRing(char* input, comm_size_t, int type_size,$/;"	f	class:LightGBM::Network
RefitTree	src/boosting/gbdt.cpp	/^void GBDT::RefitTree(const std::vector<std::vector<int>>& tree_leaf_prediction) {$/;"	f	class:LightGBM::GBDT
RegressionFairLoss	src/objective/regression_objective.hpp	/^  explicit RegressionFairLoss(const ObjectiveConfig& config): RegressionL2loss(config) {$/;"	f	class:LightGBM::RegressionFairLoss
RegressionFairLoss	src/objective/regression_objective.hpp	/^  explicit RegressionFairLoss(const std::vector<std::string>& strs): RegressionL2loss(strs) {$/;"	f	class:LightGBM::RegressionFairLoss
RegressionFairLoss	src/objective/regression_objective.hpp	/^class RegressionFairLoss: public RegressionL2loss {$/;"	c	namespace:LightGBM
RegressionGammaLoss	src/objective/regression_objective.hpp	/^  explicit RegressionGammaLoss(const ObjectiveConfig& config) : RegressionPoissonLoss(config) {$/;"	f	class:LightGBM::RegressionGammaLoss
RegressionGammaLoss	src/objective/regression_objective.hpp	/^  explicit RegressionGammaLoss(const std::vector<std::string>& strs) : RegressionPoissonLoss(strs) {$/;"	f	class:LightGBM::RegressionGammaLoss
RegressionGammaLoss	src/objective/regression_objective.hpp	/^class RegressionGammaLoss : public RegressionPoissonLoss {$/;"	c	namespace:LightGBM
RegressionHuberLoss	src/objective/regression_objective.hpp	/^  explicit RegressionHuberLoss(const ObjectiveConfig& config): RegressionL2loss(config) {$/;"	f	class:LightGBM::RegressionHuberLoss
RegressionHuberLoss	src/objective/regression_objective.hpp	/^  explicit RegressionHuberLoss(const std::vector<std::string>& strs): RegressionL2loss(strs) {$/;"	f	class:LightGBM::RegressionHuberLoss
RegressionHuberLoss	src/objective/regression_objective.hpp	/^class RegressionHuberLoss: public RegressionL2loss {$/;"	c	namespace:LightGBM
RegressionL1loss	src/objective/regression_objective.hpp	/^  explicit RegressionL1loss(const ObjectiveConfig& config): RegressionL2loss(config) {$/;"	f	class:LightGBM::RegressionL1loss
RegressionL1loss	src/objective/regression_objective.hpp	/^  explicit RegressionL1loss(const std::vector<std::string>& strs): RegressionL2loss(strs) {$/;"	f	class:LightGBM::RegressionL1loss
RegressionL1loss	src/objective/regression_objective.hpp	/^class RegressionL1loss: public RegressionL2loss {$/;"	c	namespace:LightGBM
RegressionL2loss	src/objective/regression_objective.hpp	/^  explicit RegressionL2loss(const ObjectiveConfig& config) {$/;"	f	class:LightGBM::RegressionL2loss
RegressionL2loss	src/objective/regression_objective.hpp	/^  explicit RegressionL2loss(const std::vector<std::string>& strs) {$/;"	f	class:LightGBM::RegressionL2loss
RegressionL2loss	src/objective/regression_objective.hpp	/^class RegressionL2loss: public ObjectiveFunction {$/;"	c	namespace:LightGBM
RegressionMAPELOSS	src/objective/regression_objective.hpp	/^  explicit RegressionMAPELOSS(const ObjectiveConfig& config) : RegressionL1loss(config) {$/;"	f	class:LightGBM::RegressionMAPELOSS
RegressionMAPELOSS	src/objective/regression_objective.hpp	/^  explicit RegressionMAPELOSS(const std::vector<std::string>& strs) : RegressionL1loss(strs) {$/;"	f	class:LightGBM::RegressionMAPELOSS
RegressionMAPELOSS	src/objective/regression_objective.hpp	/^class RegressionMAPELOSS : public RegressionL1loss {$/;"	c	namespace:LightGBM
RegressionMetric	src/metric/regression_metric.hpp	/^  explicit RegressionMetric(const MetricConfig& config) :config_(config) {$/;"	f	class:LightGBM::RegressionMetric
RegressionMetric	src/metric/regression_metric.hpp	/^class RegressionMetric: public Metric {$/;"	c	namespace:LightGBM
RegressionPoissonLoss	src/objective/regression_objective.hpp	/^  explicit RegressionPoissonLoss(const ObjectiveConfig& config): RegressionL2loss(config) {$/;"	f	class:LightGBM::RegressionPoissonLoss
RegressionPoissonLoss	src/objective/regression_objective.hpp	/^  explicit RegressionPoissonLoss(const std::vector<std::string>& strs): RegressionL2loss(strs) {$/;"	f	class:LightGBM::RegressionPoissonLoss
RegressionPoissonLoss	src/objective/regression_objective.hpp	/^class RegressionPoissonLoss: public RegressionL2loss {$/;"	c	namespace:LightGBM
RegressionQuantileloss	src/objective/regression_objective.hpp	/^  explicit RegressionQuantileloss(const ObjectiveConfig& config): RegressionL2loss(config) {$/;"	f	class:LightGBM::RegressionQuantileloss
RegressionQuantileloss	src/objective/regression_objective.hpp	/^  explicit RegressionQuantileloss(const std::vector<std::string>& strs): RegressionL2loss(strs) {$/;"	f	class:LightGBM::RegressionQuantileloss
RegressionQuantileloss	src/objective/regression_objective.hpp	/^class RegressionQuantileloss : public RegressionL2loss {$/;"	c	namespace:LightGBM
RegressionTweedieLoss	src/objective/regression_objective.hpp	/^  explicit RegressionTweedieLoss(const ObjectiveConfig& config) : RegressionPoissonLoss(config) {$/;"	f	class:LightGBM::RegressionTweedieLoss
RegressionTweedieLoss	src/objective/regression_objective.hpp	/^  explicit RegressionTweedieLoss(const std::vector<std::string>& strs) : RegressionPoissonLoss(strs) {$/;"	f	class:LightGBM::RegressionTweedieLoss
RegressionTweedieLoss	src/objective/regression_objective.hpp	/^class RegressionTweedieLoss: public RegressionPoissonLoss {$/;"	c	namespace:LightGBM
RegressorMixin	python-package/lightgbm/compat.py	/^    from sklearn.base import RegressorMixin, ClassifierMixin$/;"	i
RemoveQuotationSymbol	include/LightGBM/utils/common.h	/^inline static std::string RemoveQuotationSymbol(std::string str) {$/;"	f	namespace:LightGBM::Common
RenewTreeOutput	include/LightGBM/objective_function.h	/^  virtual double RenewTreeOutput(double ori_output, const double*,$/;"	f	class:LightGBM::ObjectiveFunction
RenewTreeOutput	src/treelearner/serial_tree_learner.cpp	/^void SerialTreeLearner::RenewTreeOutput(Tree* tree, const ObjectiveFunction* obj, const double* prediction,$/;"	f	class:LightGBM::SerialTreeLearner
Reset	src/io/sparse_bin.hpp	/^inline void SparseBinIterator<VAL_T>::Reset(data_size_t start_idx) {$/;"	f	class:LightGBM::SparseBinIterator
Reset	src/treelearner/feature_histogram.hpp	/^  void Reset(int cache_size, int total_size) {$/;"	f	class:LightGBM::HistogramPool
Reset	src/treelearner/split_info.hpp	/^  inline void Reset() {$/;"	f	struct:LightGBM::LightSplitInfo
Reset	src/treelearner/split_info.hpp	/^  inline void Reset() {$/;"	f	struct:LightGBM::SplitInfo
ResetBaggingConfig	src/boosting/gbdt.cpp	/^void GBDT::ResetBaggingConfig(const BoostingConfig* config, bool is_change_dataset) {$/;"	f	class:LightGBM::GBDT
ResetByLeafPred	src/treelearner/data_partition.hpp	/^  void ResetByLeafPred(const std::vector<int>& leaf_pred, int num_leaves) {$/;"	f	class:LightGBM::DataPartition
ResetConfig	src/boosting/gbdt.cpp	/^void GBDT::ResetConfig(const BoostingConfig* config) {$/;"	f	class:LightGBM::GBDT
ResetConfig	src/c_api.cpp	/^  void ResetConfig(const char* parameters) {$/;"	f	class:LightGBM::Booster
ResetConfig	src/treelearner/data_parallel_tree_learner.cpp	/^void DataParallelTreeLearner<TREELEARNER_T>::ResetConfig(const TreeConfig* tree_config) {$/;"	f	class:LightGBM::DataParallelTreeLearner
ResetConfig	src/treelearner/feature_histogram.hpp	/^  void ResetConfig(const TreeConfig* tree_config) {$/;"	f	class:LightGBM::HistogramPool
ResetConfig	src/treelearner/serial_tree_learner.cpp	/^void SerialTreeLearner::ResetConfig(const TreeConfig* tree_config) {$/;"	f	class:LightGBM::SerialTreeLearner
ResetConfig	src/treelearner/voting_parallel_tree_learner.cpp	/^void VotingParallelTreeLearner<TREELEARNER_T>::ResetConfig(const TreeConfig* tree_config) {$/;"	f	class:LightGBM::VotingParallelTreeLearner
ResetGoss	src/boosting/goss.hpp	/^  void ResetGoss() {$/;"	f	class:LightGBM::GOSS
ResetLeaves	src/treelearner/data_partition.hpp	/^  void ResetLeaves(int num_leaves) {$/;"	f	class:LightGBM::DataPartition
ResetLogLevel	include/LightGBM/utils/log.h	/^  static void ResetLogLevel(LogLevel level) {$/;"	f	class:LightGBM::Log
ResetMap	src/treelearner/feature_histogram.hpp	/^  void ResetMap() {$/;"	f	class:LightGBM::HistogramPool
ResetNumData	src/treelearner/data_partition.hpp	/^  void ResetNumData(int num_data) {$/;"	f	class:LightGBM::DataPartition
ResetNumData	src/treelearner/leaf_splits.hpp	/^  void ResetNumData(data_size_t num_data) {$/;"	f	class:LightGBM::LeafSplits
ResetTrainingData	src/boosting/gbdt.cpp	/^void GBDT::ResetTrainingData(const Dataset* train_data, const ObjectiveFunction* objective_function,$/;"	f	class:LightGBM::GBDT
ResetTrainingData	src/c_api.cpp	/^  void ResetTrainingData(const Dataset* train_data) {$/;"	f	class:LightGBM::Booster
ResetTrainingData	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::ResetTrainingData(const Dataset* train_data) {$/;"	f	class:LightGBM::GPUTreeLearner
ResetTrainingData	src/treelearner/serial_tree_learner.cpp	/^void SerialTreeLearner::ResetTrainingData(const Dataset* train_data) {$/;"	f	class:LightGBM::SerialTreeLearner
RollbackOneIter	src/boosting/gbdt.cpp	/^void GBDT::RollbackOneIter() {$/;"	f	class:LightGBM::GBDT
RollbackOneIter	src/c_api.cpp	/^  void RollbackOneIter() {$/;"	f	class:LightGBM::Booster
RowFunctionFromCSR	src/c_api.cpp	/^RowFunctionFromCSR(const void* indptr, int indptr_type, const int32_t* indices, const void* data, int data_type, int64_t nindptr, int64_t nelem) {$/;"	f
RowFunctionFromDenseMatric	src/c_api.cpp	/^RowFunctionFromDenseMatric(const void* data, int num_row, int num_col, int data_type, int is_row_major) {$/;"	f
RowPairFunctionFromDenseMatric	src/c_api.cpp	/^RowPairFunctionFromDenseMatric(const void* data, int num_row, int num_col, int data_type, int is_row_major) {$/;"	f
Run	include/LightGBM/application.h	/^inline void Application::Run() { \/\/\/$/;"	f	class:LightGBM::Application
SEXPREC_ALIGN	include/LightGBM/R_object_helper.h	/^typedef union { VECTOR_SER s; double align; } SEXPREC_ALIGN;$/;"	t	typeref:union:__anon2
SKLEARN_INSTALLED	python-package/lightgbm/compat.py	/^    SKLEARN_INSTALLED = False$/;"	v
SKLEARN_INSTALLED	python-package/lightgbm/compat.py	/^    SKLEARN_INSTALLED = True$/;"	v
SKLEARN_INSTALLED	python-package/lightgbm/engine.py	/^from .compat import (SKLEARN_INSTALLED, _LGBMGroupKFold, _LGBMStratifiedKFold,$/;"	i
SKLEARN_INSTALLED	python-package/lightgbm/sklearn.py	/^from .compat import (SKLEARN_INSTALLED, _LGBMClassifierBase,$/;"	i
SOCKET	src/network/socket_wrapper.hpp	/^typedef int SOCKET;$/;"	t	namespace:LightGBM
SOCKET_ERROR	src/network/socket_wrapper.hpp	/^#define SOCKET_ERROR /;"	d
SOURCEDIR	docs/Makefile	/^SOURCEDIR     = .$/;"	m
SOURCEDIR	docs/make.bat	/^set SOURCEDIR=.$/;"	v
SPHINXBUILD	docs/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXBUILD	docs/make.bat	/^	set SPHINXBUILD=sphinx-build$/;"	v
SPHINXOPTS	docs/Makefile	/^SPHINXOPTS    = -W$/;"	m
SPHINXOPTS	docs/make.bat	/^set SPHINXOPTS=-W$/;"	v
SPHINXPROJ	docs/Makefile	/^SPHINXPROJ    = LightGBM$/;"	m
SPHINXPROJ	docs/make.bat	/^set SPHINXPROJ=LightGBM$/;"	v
STANDARD	include/LightGBM/json11.hpp	/^    STANDARD, COMMENTS$/;"	e	enum:json11::JsonParse
STRING	include/LightGBM/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::final::Type
Sample	include/LightGBM/utils/random.h	/^  inline std::vector<int> Sample(int N, int K) {$/;"	f	class:LightGBM::Random
SampleAndFilterFromFile	include/LightGBM/utils/text_reader.h	/^  INDEX_T SampleAndFilterFromFile(const std::function<bool(INDEX_T)>& filter_fun, std::vector<INDEX_T>* out_used_data_indices,$/;"	f	class:LightGBM::TextReader
SampleFromFile	include/LightGBM/utils/text_reader.h	/^  INDEX_T SampleFromFile(Random& random, INDEX_T sample_cnt, std::vector<std::string>* out_sampled_data) {$/;"	f	class:LightGBM::TextReader
SampleTextDataFromFile	src/io/dataset_loader.cpp	/^std::vector<std::string> DatasetLoader::SampleTextDataFromFile(const char* filename, const Metadata& metadata, int rank, int num_machines, int* num_global_data, std::vector<data_size_t>* used_data_indices) {$/;"	f	class:LightGBM::DatasetLoader
SampleTextDataFromMemory	src/io/dataset_loader.cpp	/^std::vector<std::string> DatasetLoader::SampleTextDataFromMemory(const std::vector<std::string>& data) {$/;"	f	class:LightGBM::DatasetLoader
SaveBinaryFile	src/io/dataset.cpp	/^void Dataset::SaveBinaryFile(const char* bin_filename) {$/;"	f	class:LightGBM::Dataset
SaveBinaryToFile	include/LightGBM/feature_group.h	/^  void SaveBinaryToFile(const VirtualFileWriter* writer) const {$/;"	f	class:LightGBM::FeatureGroup
SaveBinaryToFile	src/io/bin.cpp	/^  void BinMapper::SaveBinaryToFile(const VirtualFileWriter* writer) const {$/;"	f	class:LightGBM::BinMapper
SaveBinaryToFile	src/io/metadata.cpp	/^void Metadata::SaveBinaryToFile(const VirtualFileWriter* writer) const {$/;"	f	class:LightGBM::Metadata
SaveModelToFile	src/boosting/gbdt_model_text.cpp	/^bool GBDT::SaveModelToFile(int num_iteration, const char* filename) const {$/;"	f	class:LightGBM::GBDT
SaveModelToFile	src/c_api.cpp	/^  void SaveModelToFile(int num_iteration, const char* filename) {$/;"	f	class:LightGBM::Booster
SaveModelToIfElse	src/boosting/gbdt_model_text.cpp	/^bool GBDT::SaveModelToIfElse(int num_iteration, const char* filename) const {$/;"	f	class:LightGBM::GBDT
SaveModelToString	src/boosting/gbdt_model_text.cpp	/^std::string GBDT::SaveModelToString(int num_iteration) const {$/;"	f	class:LightGBM::GBDT
SaveModelToString	src/c_api.cpp	/^  std::string SaveModelToString(int num_iteration) {$/;"	f	class:LightGBM::Booster
ScoreUpdater	src/boosting/score_updater.hpp	/^  ScoreUpdater(const Dataset* data, int num_tree_per_iteration) : data_(data) {$/;"	f	class:LightGBM::ScoreUpdater
ScoreUpdater	src/boosting/score_updater.hpp	/^class ScoreUpdater {$/;"	c	namespace:LightGBM
Send	src/network/linkers.h	/^inline void Linkers::Send(int rank, char* data, int len) const {$/;"	f	class:LightGBM::Linkers
Send	src/network/linkers.h	/^inline void Linkers::Send(int rank, char* data, int64_t len) const {$/;"	f	class:LightGBM::Linkers
Send	src/network/socket_wrapper.hpp	/^  inline int Send(const char *buf_, int len, int flag = 0) {$/;"	f	class:LightGBM::TcpSocket
SendRecv	src/network/linkers.h	/^inline void Linkers::SendRecv(int send_rank, char* send_data, int send_len,$/;"	f	class:LightGBM::Linkers
SendRecv	src/network/linkers.h	/^inline void Linkers::SendRecv(int send_rank, char* send_data, int64_t send_len,$/;"	f	class:LightGBM::Linkers
SerialTreeLearner	src/treelearner/serial_tree_learner.cpp	/^SerialTreeLearner::SerialTreeLearner(const TreeConfig* tree_config)$/;"	f	class:LightGBM::SerialTreeLearner
SerialTreeLearner	src/treelearner/serial_tree_learner.h	/^class SerialTreeLearner: public TreeLearner {$/;"	c	namespace:LightGBM
Series	python-package/lightgbm/basic.py	/^from .compat import (DataFrame, LGBMDeprecationWarning, Series,$/;"	i
Series	python-package/lightgbm/compat.py	/^    class Series(object):$/;"	c	function:json_default_with_numpy
Series	python-package/lightgbm/compat.py	/^    from pandas import Series, DataFrame$/;"	i
Set	src/io/config.cpp	/^void BoostingConfig::Set(const std::unordered_map<std::string, std::string>& params) {$/;"	f	class:LightGBM::BoostingConfig
Set	src/io/config.cpp	/^void IOConfig::Set(const std::unordered_map<std::string, std::string>& params) {$/;"	f	class:LightGBM::IOConfig
Set	src/io/config.cpp	/^void MetricConfig::Set(const std::unordered_map<std::string, std::string>& params) {$/;"	f	class:LightGBM::MetricConfig
Set	src/io/config.cpp	/^void NetworkConfig::Set(const std::unordered_map<std::string, std::string>& params) {$/;"	f	class:LightGBM::NetworkConfig
Set	src/io/config.cpp	/^void ObjectiveConfig::Set(const std::unordered_map<std::string, std::string>& params) {$/;"	f	class:LightGBM::ObjectiveConfig
Set	src/io/config.cpp	/^void OverallConfig::Set(const std::unordered_map<std::string, std::string>& params) { \/\/\/ set all configs$/;"	f	class:LightGBM::OverallConfig
Set	src/io/config.cpp	/^void TreeConfig::Set(const std::unordered_map<std::string, std::string>& params) {$/;"	f	class:LightGBM::TreeConfig
SetDecisionType	include/LightGBM/tree.h	/^  inline static void SetDecisionType(int8_t* decision_type, bool input, int8_t mask) {$/;"	f	class:LightGBM::Tree
SetDoubleField	src/io/dataset.cpp	/^bool Dataset::SetDoubleField(const char* field_name, const double* field_data, data_size_t num_element) {$/;"	f	class:LightGBM::Dataset
SetFloatField	src/io/dataset.cpp	/^bool Dataset::SetFloatField(const char* field_name, const float* field_data, data_size_t num_element) {$/;"	f	class:LightGBM::Dataset
SetHeader	src/io/dataset_loader.cpp	/^void DatasetLoader::SetHeader(const char* filename) {$/;"	f	class:LightGBM::DatasetLoader
SetInitScore	src/io/metadata.cpp	/^void Metadata::SetInitScore(const double* init_score, data_size_t len) {$/;"	f	class:LightGBM::Metadata
SetIntField	src/io/dataset.cpp	/^bool Dataset::SetIntField(const char* field_name, const int* field_data, data_size_t num_element) {$/;"	f	class:LightGBM::Dataset
SetLabel	src/io/metadata.cpp	/^void Metadata::SetLabel(const label_t* label, data_size_t len) {$/;"	f	class:LightGBM::Metadata
SetLabelAt	include/LightGBM/dataset.h	/^  inline void SetLabelAt(data_size_t idx, label_t value)$/;"	f	class:LightGBM::Metadata
SetLeafOutput	include/LightGBM/tree.h	/^  inline void SetLeafOutput(int leaf, double output) {$/;"	f	class:LightGBM::Tree
SetLeafValue	src/c_api.cpp	/^  void SetLeafValue(int tree_idx, int leaf_idx, double val) {$/;"	f	class:LightGBM::Booster
SetLinker	src/network/linkers_socket.cpp	/^void Linkers::SetLinker(int rank, const TcpSocket& socket) {$/;"	f	class:LightGBM::Linkers
SetMissingType	include/LightGBM/tree.h	/^  inline static void SetMissingType(int8_t* decision_type, int8_t input) {$/;"	f	class:LightGBM::Tree
SetQuery	src/io/metadata.cpp	/^void Metadata::SetQuery(const data_size_t* query, data_size_t len) {$/;"	f	class:LightGBM::Metadata
SetQueryAt	include/LightGBM/dataset.h	/^  inline void SetQueryAt(data_size_t idx, data_size_t value)$/;"	f	class:LightGBM::Metadata
SetTimeout	src/network/socket_wrapper.hpp	/^  inline void SetTimeout(int timeout) {$/;"	f	class:LightGBM::TcpSocket
SetUsedDataIndices	src/treelearner/data_partition.hpp	/^  void SetUsedDataIndices(const data_size_t* used_data_indices, data_size_t num_used_data) {$/;"	f	class:LightGBM::DataPartition
SetValueConstraint	src/treelearner/leaf_splits.hpp	/^  void SetValueConstraint(double min, double max) {$/;"	f	class:LightGBM::LeafSplits
SetWeightAt	include/LightGBM/dataset.h	/^  inline void SetWeightAt(data_size_t idx, label_t value)$/;"	f	class:LightGBM::Metadata
SetWeights	src/io/metadata.cpp	/^void Metadata::SetWeights(const label_t* weights, data_size_t len) {$/;"	f	class:LightGBM::Metadata
SetupKernelArguments	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::SetupKernelArguments() {$/;"	f	class:LightGBM::GPUTreeLearner
Shrinkage	include/LightGBM/tree.h	/^  inline void Shrinkage(double rate) {$/;"	f	class:LightGBM::Tree
Sign	include/LightGBM/utils/common.h	/^static int Sign(T x) {$/;"	f	namespace:LightGBM::Common
Size	src/treelearner/split_info.hpp	/^  inline static int Size(int max_cat_threshold) {$/;"	f	struct:LightGBM::SplitInfo
SizeForSpecificBin	src/io/bin.cpp	/^  int BinMapper::SizeForSpecificBin(int bin) {$/;"	f	class:LightGBM::BinMapper
SizeOfHistgram	src/treelearner/feature_histogram.hpp	/^  int SizeOfHistgram() const {$/;"	f	class:LightGBM::FeatureHistogram
SizesInByte	include/LightGBM/feature_group.h	/^  size_t SizesInByte() const {$/;"	f	class:LightGBM::FeatureGroup
SizesInByte	src/io/bin.cpp	/^  size_t BinMapper::SizesInByte() const {$/;"	f	class:LightGBM::BinMapper
SizesInByte	src/io/metadata.cpp	/^size_t Metadata::SizesInByte() const  {$/;"	f	class:LightGBM::Metadata
SkipEmptyClass	include/LightGBM/objective_function.h	/^  virtual bool SkipEmptyClass() const { return false; }$/;"	f	class:LightGBM::ObjectiveFunction
SkipNewLine	include/LightGBM/utils/common.h	/^inline static const char* SkipNewLine(const char* str) {$/;"	f	namespace:LightGBM::Common
SkipReturn	include/LightGBM/utils/common.h	/^inline static const char* SkipReturn(const char* p) {$/;"	f	namespace:LightGBM::Common
SkipSpaceAndTab	include/LightGBM/utils/common.h	/^inline static const char* SkipSpaceAndTab(const char* p) {$/;"	f	namespace:LightGBM::Common
SkipTest	tests/python_package_test/test_sklearn.py	/^from sklearn.utils.estimator_checks import (_yield_all_checks, SkipTest,$/;"	i
SocketConfig	src/network/socket_wrapper.hpp	/^namespace SocketConfig {$/;"	n	namespace:LightGBM
Softmax	include/LightGBM/utils/common.h	/^inline static void Softmax(const double* input, double* output, int len) {$/;"	f	namespace:LightGBM::Common
Softmax	include/LightGBM/utils/common.h	/^inline static void Softmax(std::vector<double>* p_rec) {$/;"	f	namespace:LightGBM::Common
SortForPair	include/LightGBM/utils/common.h	/^inline static void SortForPair(std::vector<T1>& keys, std::vector<T2>& values, size_t start, bool is_reverse = false) {$/;"	f	namespace:LightGBM::Common
SparseBin	src/io/sparse_bin.hpp	/^  SparseBin(data_size_t num_data)$/;"	f	class:LightGBM::SparseBin
SparseBin	src/io/sparse_bin.hpp	/^class SparseBin: public Bin {$/;"	c	namespace:LightGBM
SparseBinIterator	src/io/sparse_bin.hpp	/^  SparseBinIterator(const SparseBin<VAL_T>* bin_data, data_size_t start_idx)$/;"	f	class:LightGBM::SparseBinIterator
SparseBinIterator	src/io/sparse_bin.hpp	/^  SparseBinIterator(const SparseBin<VAL_T>* bin_data,$/;"	f	class:LightGBM::SparseBinIterator
SparseBinIterator	src/io/sparse_bin.hpp	/^class SparseBinIterator: public BinIterator {$/;"	c	namespace:LightGBM
SparsePair	src/io/ordered_sparse_bin.hpp	/^    SparsePair() : ridx(0), bin(0) {}$/;"	f	struct:LightGBM::OrderedSparseBin::SparsePair
SparsePair	src/io/ordered_sparse_bin.hpp	/^  struct SparsePair {$/;"	s	class:LightGBM::OrderedSparseBin
Split	include/LightGBM/dataset.h	/^  inline data_size_t Split(int feature,$/;"	f	class:LightGBM::Dataset
Split	include/LightGBM/feature_group.h	/^  inline data_size_t Split($/;"	f	class:LightGBM::FeatureGroup
Split	include/LightGBM/tree.h	/^inline void Tree::Split(int leaf, int feature, int real_feature,$/;"	f	class:LightGBM::Tree
Split	include/LightGBM/utils/common.h	/^inline static std::vector<std::string> Split(const char* c_str, char delimiter) {$/;"	f	namespace:LightGBM::Common
Split	include/LightGBM/utils/common.h	/^inline static std::vector<std::string> Split(const char* c_str, const char* delimiters) {$/;"	f	namespace:LightGBM::Common
Split	src/io/tree.cpp	/^int Tree::Split(int leaf, int feature, int real_feature, uint32_t threshold_bin,$/;"	f	class:LightGBM::Tree
Split	src/treelearner/data_parallel_tree_learner.cpp	/^void DataParallelTreeLearner<TREELEARNER_T>::Split(Tree* tree, int best_Leaf, int* left_leaf, int* right_leaf) {$/;"	f	class:LightGBM::DataParallelTreeLearner
Split	src/treelearner/data_partition.hpp	/^  void Split(int leaf, const Dataset* dataset, int feature, const uint32_t* threshold, int num_threshold, bool default_left, int right_leaf) {$/;"	f	class:LightGBM::DataPartition
Split	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::Split(Tree* tree, int best_Leaf, int* left_leaf, int* right_leaf) {$/;"	f	class:LightGBM::GPUTreeLearner
Split	src/treelearner/serial_tree_learner.cpp	/^void SerialTreeLearner::Split(Tree* tree, int best_leaf, int* left_leaf, int* right_leaf) {$/;"	f	class:LightGBM::SerialTreeLearner
Split	src/treelearner/voting_parallel_tree_learner.cpp	/^void VotingParallelTreeLearner<TREELEARNER_T>::Split(Tree* tree, int best_Leaf, int* left_leaf, int* right_leaf) {$/;"	f	class:LightGBM::VotingParallelTreeLearner
SplitCategorical	src/io/tree.cpp	/^int Tree::SplitCategorical(int leaf, int feature, int real_feature, const uint32_t* threshold_bin, int num_threshold_bin,$/;"	f	class:LightGBM::Tree
SplitInfo	src/treelearner/split_info.hpp	/^struct SplitInfo {$/;"	s	namespace:LightGBM
SplitLines	include/LightGBM/utils/common.h	/^inline static std::vector<std::string> SplitLines(const char* c_str) {$/;"	f	namespace:LightGBM::Common
StartsWith	include/LightGBM/utils/common.h	/^inline static bool StartsWith(const std::string& str, const std::string prefix) {$/;"	f	namespace:LightGBM::Common
Startup	src/network/socket_wrapper.hpp	/^  inline static void Startup() {$/;"	f	class:LightGBM::TcpSocket
Statics	src/io/json11.cpp	/^    Statics() {}$/;"	f	struct:json11::Statics
Statics	src/io/json11.cpp	/^struct Statics {$/;"	s	namespace:json11	file:
Str2Map	src/io/config.cpp	/^std::unordered_map<std::string, std::string> ConfigBase::Str2Map(const char* parameters) {$/;"	f	class:LightGBM::ConfigBase
StratifiedKFold	python-package/lightgbm/compat.py	/^        from sklearn.cross_validation import StratifiedKFold, GroupKFold$/;"	i
StratifiedKFold	python-package/lightgbm/compat.py	/^        from sklearn.model_selection import StratifiedKFold, GroupKFold$/;"	i
StringToArray	include/LightGBM/utils/common.h	/^inline static std::vector<T> StringToArray(const std::string& str, char delimiter) {$/;"	f	namespace:LightGBM::Common
StringToArray	include/LightGBM/utils/common.h	/^inline static std::vector<T> StringToArray(const std::string& str, int n) {$/;"	f	namespace:LightGBM::Common
StringToArrayFast	include/LightGBM/utils/common.h	/^inline static std::vector<T> StringToArrayFast(const std::string& str, int n) {$/;"	f	namespace:LightGBM::Common
SubFeatureBinOffset	include/LightGBM/dataset.h	/^  inline int SubFeatureBinOffset(int i) const {$/;"	f	class:LightGBM::Dataset
SubFeatureIterator	include/LightGBM/feature_group.h	/^  inline BinIterator* SubFeatureIterator(int sub_feature) {$/;"	f	class:LightGBM::FeatureGroup
Subtract	src/treelearner/feature_histogram.hpp	/^  void Subtract(const FeatureHistogram& other) {$/;"	f	class:LightGBM::FeatureHistogram
SumReducer	include/LightGBM/bin.h	/^  inline static void SumReducer(const char *src, char *dst, int type_size, comm_size_t len) {$/;"	f	struct:LightGBM::HistogramBinEntry
SyncUpGlobalBestSplit	src/treelearner/parallel_tree_learner.h	/^inline void SyncUpGlobalBestSplit(char* input_buffer_, char* output_buffer_, SplitInfo* smaller_best_split, SplitInfo* larger_best_split, int max_cat_threshold) {$/;"	f	namespace:LightGBM
THREAD_LOCAL	include/LightGBM/utils/log.h	/^#define THREAD_LOCAL /;"	d
TSV	src/io/parser.cpp	/^  TSV,$/;"	e	enum:LightGBM::DataType	file:
TSVParser	src/io/parser.hpp	/^  explicit TSVParser(int label_idx, int total_columns)$/;"	f	class:LightGBM::TSVParser
TSVParser	src/io/parser.hpp	/^class TSVParser: public Parser {$/;"	c	namespace:LightGBM
TYPE_BITS	include/LightGBM/R_object_helper.h	/^#define TYPE_BITS /;"	d
TaskType	include/LightGBM/config.h	/^enum TaskType {$/;"	g	namespace:LightGBM
TcpSocket	src/network/socket_wrapper.hpp	/^  TcpSocket() {$/;"	f	class:LightGBM::TcpSocket
TcpSocket	src/network/socket_wrapper.hpp	/^  TcpSocket(const TcpSocket &object) {$/;"	f	class:LightGBM::TcpSocket
TcpSocket	src/network/socket_wrapper.hpp	/^  explicit TcpSocket(SOCKET socket) {$/;"	f	class:LightGBM::TcpSocket
TcpSocket	src/network/socket_wrapper.hpp	/^class TcpSocket {$/;"	c	namespace:LightGBM
TestBasic	tests/python_package_test/test_basic.py	/^class TestBasic(unittest.TestCase):$/;"	c
TestBasic	tests/python_package_test/test_plotting.py	/^class TestBasic(unittest.TestCase):$/;"	c
TestEngine	tests/python_package_test/test_consistency.py	/^class TestEngine(unittest.TestCase):$/;"	c
TestEngine	tests/python_package_test/test_engine.py	/^class TestEngine(unittest.TestCase):$/;"	c
TestSklearn	tests/python_package_test/test_sklearn.py	/^class TestSklearn(unittest.TestCase):$/;"	c
TextReader	include/LightGBM/utils/text_reader.h	/^  TextReader(const char* filename, bool is_skip_first_line):$/;"	f	class:LightGBM::TextReader
TextReader	include/LightGBM/utils/text_reader.h	/^class TextReader {$/;"	c	namespace:LightGBM
ThreadExceptionHelper	include/LightGBM/utils/openmp_wrapper.h	/^  ThreadExceptionHelper() { $/;"	f	class:ThreadExceptionHelper
ThreadExceptionHelper	include/LightGBM/utils/openmp_wrapper.h	/^class ThreadExceptionHelper {$/;"	c
Threading	include/LightGBM/utils/threading.h	/^class Threading {$/;"	c	namespace:LightGBM
ThresholdL1	src/treelearner/feature_histogram.hpp	/^  static double ThresholdL1(double s, double l1) {$/;"	f	class:LightGBM::FeatureHistogram
TimeSeriesSplit	tests/python_package_test/test_engine.py	/^from sklearn.model_selection import train_test_split, TimeSeriesSplit$/;"	i
ToIfElse	src/io/tree.cpp	/^std::string Tree::ToIfElse(int index, bool is_predict_leaf_index) const {$/;"	f	class:LightGBM::Tree
ToJSON	src/io/tree.cpp	/^std::string Tree::ToJSON() const {$/;"	f	class:LightGBM::Tree
ToString	src/io/tree.cpp	/^std::string Tree::ToString() const {$/;"	f	class:LightGBM::Tree
Train	src/application/application.cpp	/^void Application::Train() { \/\/\/ 训练$/;"	f	class:LightGBM::Application
Train	src/boosting/gbdt.cpp	/^void GBDT::Train(int snapshot_freq, const std::string& model_output_path) { \/\/\/ GBDT训练$/;"	f	class:LightGBM::GBDT
Train	src/treelearner/gpu_tree_learner.cpp	/^Tree* GPUTreeLearner::Train(const score_t* gradients, const score_t *hessians,$/;"	f	class:LightGBM::GPUTreeLearner
Train	src/treelearner/serial_tree_learner.cpp	/^Tree* SerialTreeLearner::Train(const score_t* gradients, const score_t *hessians, bool is_constant_hessian, Json& forced_split_json) {$/;"	f	class:LightGBM::SerialTreeLearner
TrainOneIter	src/boosting/gbdt.cpp	/^bool GBDT::TrainOneIter(const score_t* gradients, const score_t* hessians) {$/;"	f	class:LightGBM::GBDT
TrainOneIter	src/c_api.cpp	/^  bool TrainOneIter() {$/;"	f	class:LightGBM::Booster
TrainOneIter	src/c_api.cpp	/^  bool TrainOneIter(const score_t* gradients, const score_t* hessians) {$/;"	f	class:LightGBM::Booster
Tree	include/LightGBM/tree.h	/^class Tree {$/;"	c	namespace:LightGBM
Tree	src/io/tree.cpp	/^Tree::Tree(const char* str, size_t* used_len) {$/;"	f	class:LightGBM::Tree
Tree	src/io/tree.cpp	/^Tree::Tree(int max_leaves)$/;"	f	class:LightGBM::Tree
TreeConfig	include/LightGBM/config.h	/^struct TreeConfig: public ConfigBase {$/;"	s	namespace:LightGBM
TreeLearner	include/LightGBM/tree_learner.h	/^class TreeLearner {$/;"	c	namespace:LightGBM
TreeSHAP	src/io/tree.cpp	/^void Tree::TreeSHAP(const double *feature_values, double *phi,$/;"	f	class:LightGBM::Tree
Trim	include/LightGBM/utils/common.h	/^inline static std::string Trim(std::string str) {$/;"	f	namespace:LightGBM::Common
TryBind	src/network/linkers_socket.cpp	/^void Linkers::TryBind(int port) {$/;"	f	class:LightGBM::Linkers
TweedieMetric	src/metric/regression_metric.hpp	/^  explicit TweedieMetric(const MetricConfig& config) :RegressionMetric<TweedieMetric>(config) {$/;"	f	class:LightGBM::TweedieMetric
TweedieMetric	src/metric/regression_metric.hpp	/^class TweedieMetric : public RegressionMetric<TweedieMetric> {$/;"	c	namespace:LightGBM
Type	include/LightGBM/json11.hpp	/^    enum Type {$/;"	g	class:json11::final
Uint32ToStr	include/LightGBM/utils/common.h	/^inline static void Uint32ToStr(uint32_t value, char* buffer) {$/;"	f	namespace:LightGBM::Common
UnwindPath	src/io/tree.cpp	/^void Tree::UnwindPath(PathElement *unique_path, int unique_depth, int path_index) {$/;"	f	class:LightGBM::Tree
UnwoundPathSum	src/io/tree.cpp	/^double Tree::UnwoundPathSum(const PathElement *unique_path, int unique_depth, int path_index) {$/;"	f	class:LightGBM::Tree
UpdatePositionBiases	src/objective/IPWij_rank_objective.hpp	/^  void UpdatePositionBiases() const { \/\/\/ const 只能调用const$/;"	f	class:LightGBM::LambdarankNDCG
UpdatePositionBiases	src/objective/e2e_IPWi_rank_objective.hpp	/^  void UpdatePositionBiases() const { \/\/\/ const 只能调用const$/;"	f	class:LightGBM::LambdarankNDCG
UpdatePositionBiases	src/objective/e2e_IPWij_rank_objective.hpp	/^  void UpdatePositionBiases() const { \/\/\/ const 只能调用const$/;"	f	class:LightGBM::LambdarankNDCG
UpdatePositionBiases	src/objective/rank_objective.hpp	/^  void UpdatePositionBiases() const { \/\/\/ const 只能调用const$/;"	f	class:LightGBM::LambdarankNDCG
UpdatePositionBiases	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  void UpdatePositionBiases() const { \/\/\/ const 只能调用const$/;"	f	class:LightGBM::LambdarankNDCG
UpdatePositionBiases	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  void UpdatePositionBiases() const { \/\/\/ const 只能调用const$/;"	f	class:LightGBM::LambdarankNDCG
UpdateScore	src/boosting/gbdt.cpp	/^void GBDT::UpdateScore(const Tree* tree, const int cur_tree_id) {$/;"	f	class:LightGBM::GBDT
VECSE	include/LightGBM/R_object_helper.h	/^} VECTOR_SER, *VECSE;$/;"	t	typeref:struct:VECTOR_SER
VECTOR_SER	include/LightGBM/R_object_helper.h	/^typedef struct VECTOR_SER {$/;"	s
VECTOR_SER	include/LightGBM/R_object_helper.h	/^} VECTOR_SER, *VECSE;$/;"	t	typeref:struct:VECTOR_SER
ValidFeatureIndices	include/LightGBM/dataset.h	/^  inline std::vector<int> ValidFeatureIndices() const {$/;"	f	class:LightGBM::Dataset
Value	src/io/json11.cpp	/^    explicit Value(T &&value)      : m_value(move(value)) {}$/;"	f	class:json11::Value
Value	src/io/json11.cpp	/^    explicit Value(const T &value) : m_value(value) {}$/;"	f	class:json11::Value
Value	src/io/json11.cpp	/^class Value : public JsonValue {$/;"	c	namespace:json11	file:
ValueToBin	include/LightGBM/bin.h	/^inline uint32_t BinMapper::ValueToBin(double value) const {$/;"	f	class:LightGBM::BinMapper
Vector2Ptr	include/LightGBM/utils/common.h	/^inline static std::vector<T*> Vector2Ptr(std::vector<std::vector<T>>& data) {$/;"	f	namespace:LightGBM::Common
VectorSize	include/LightGBM/utils/common.h	/^inline static std::vector<int> VectorSize(const std::vector<std::vector<T>>& data) {$/;"	f	namespace:LightGBM::Common
VersionRequirementError	docs/conf.py	/^from sphinx.errors import VersionRequirementError$/;"	i
VirtualFileReader	include/LightGBM/utils/file_io.h	/^struct VirtualFileReader {$/;"	s	namespace:LightGBM
VirtualFileWriter	include/LightGBM/utils/file_io.h	/^struct VirtualFileWriter {$/;"	s	namespace:LightGBM
VotingParallelTreeLearner	src/treelearner/parallel_tree_learner.h	/^class VotingParallelTreeLearner: public TREELEARNER_T {$/;"	c	namespace:LightGBM
VotingParallelTreeLearner	src/treelearner/voting_parallel_tree_learner.cpp	/^VotingParallelTreeLearner<TREELEARNER_T>::VotingParallelTreeLearner(const TreeConfig* tree_config)$/;"	f	class:LightGBM::VotingParallelTreeLearner
WITH_HDFS	src/io/file_io.cpp	/^#define WITH_HDFS(/;"	d	file:
W_test	examples/python-guide/advanced_example.py	/^W_test = pd.read_csv('..\/binary_classification\/binary.test.weight', header=None)[0]$/;"	v
W_train	examples/python-guide/advanced_example.py	/^W_train = pd.read_csv('..\/binary_classification\/binary.train.weight', header=None)[0]$/;"	v
WaitAndGetHistograms	src/treelearner/gpu_tree_learner.cpp	/^void GPUTreeLearner::WaitAndGetHistograms(HistogramBinEntry* histograms) {$/;"	f	class:LightGBM::GPUTreeLearner
Warning	include/LightGBM/utils/log.h	/^  Warning = 0,$/;"	m	class:LightGBM::LogLevel
Warning	include/LightGBM/utils/log.h	/^  static void Warning(const char *format, ...) {$/;"	f	class:LightGBM::Log
WeightedPercentileFun	src/objective/regression_objective.hpp	/^#define WeightedPercentileFun(/;"	d
WeightedPercentileFun	src/objective/regression_objective.hpp	/^#undef WeightedPercentileFun$/;"	d
Write	include/LightGBM/utils/log.h	/^  static void Write(LogLevel level, const char* level_str, const char *format, va_list val) {$/;"	f	class:LightGBM::Log
Write	src/io/file_io.cpp	/^  size_t Write(const void* buffer, size_t bytes) const {$/;"	f	struct:LightGBM::LocalFile
Write	src/io/file_io.cpp	/^  size_t Write(const void* data, size_t bytes) const {$/;"	f	struct:LightGBM::HDFSFile
X_test	examples/python-guide/advanced_example.py	/^X_test = df_test.drop(0, axis=1).values$/;"	v
X_test	examples/python-guide/plot_example.py	/^X_test = df_test.drop(0, axis=1).values$/;"	v
X_test	examples/python-guide/simple_example.py	/^X_test = df_test.drop(0, axis=1).values$/;"	v
X_test	examples/python-guide/sklearn_example.py	/^X_test = df_test.drop(0, axis=1).values$/;"	v
X_train	examples/python-guide/advanced_example.py	/^X_train = df_train.drop(0, axis=1).values$/;"	v
X_train	examples/python-guide/plot_example.py	/^X_train = df_train.drop(0, axis=1).values$/;"	v
X_train	examples/python-guide/simple_example.py	/^X_train = df_train.drop(0, axis=1).values$/;"	v
X_train	examples/python-guide/sklearn_example.py	/^X_train = df_train.drop(0, axis=1).values$/;"	v
XentLambdaLoss	src/metric/xentropy_metric.hpp	/^  inline static double XentLambdaLoss(label_t label, label_t weight, double hhat) {$/;"	f	namespace:LightGBM
XentLoss	src/metric/xentropy_metric.hpp	/^  inline static double XentLoss(label_t label, double prob) {$/;"	f	namespace:LightGBM
YentLoss	src/metric/xentropy_metric.hpp	/^  inline static double YentLoss(double p) {$/;"	f	namespace:LightGBM
Zero	include/LightGBM/bin.h	/^  Zero,$/;"	e	enum:LightGBM::MissingType
_InnerPredictor	python-package/lightgbm/basic.py	/^class _InnerPredictor(object):$/;"	c
_InnerPredictor	python-package/lightgbm/engine.py	/^from .basic import Booster, Dataset, LightGBMError, _InnerPredictor$/;"	i
_LGBMCheckArray	python-package/lightgbm/compat.py	/^    _LGBMCheckArray = None$/;"	v
_LGBMCheckArray	python-package/lightgbm/compat.py	/^    _LGBMCheckArray = check_array$/;"	v
_LGBMCheckClassificationTargets	python-package/lightgbm/compat.py	/^    _LGBMCheckClassificationTargets = None$/;"	v
_LGBMCheckClassificationTargets	python-package/lightgbm/compat.py	/^    _LGBMCheckClassificationTargets = check_classification_targets$/;"	v
_LGBMCheckConsistentLength	python-package/lightgbm/compat.py	/^    _LGBMCheckConsistentLength = None$/;"	v
_LGBMCheckConsistentLength	python-package/lightgbm/compat.py	/^    _LGBMCheckConsistentLength = check_consistent_length$/;"	v
_LGBMCheckXY	python-package/lightgbm/compat.py	/^    _LGBMCheckXY = None$/;"	v
_LGBMCheckXY	python-package/lightgbm/compat.py	/^    _LGBMCheckXY = check_X_y$/;"	v
_LGBMClassifierBase	python-package/lightgbm/compat.py	/^    _LGBMClassifierBase = ClassifierMixin$/;"	v
_LGBMClassifierBase	python-package/lightgbm/compat.py	/^    _LGBMClassifierBase = object$/;"	v
_LGBMClassifierBase	python-package/lightgbm/sklearn.py	/^from .compat import (SKLEARN_INSTALLED, _LGBMClassifierBase,$/;"	i
_LGBMComputeSampleWeight	python-package/lightgbm/compat.py	/^    _LGBMComputeSampleWeight = None$/;"	v
_LGBMComputeSampleWeight	python-package/lightgbm/compat.py	/^    _LGBMComputeSampleWeight = compute_sample_weight$/;"	v
_LGBMGroupKFold	python-package/lightgbm/compat.py	/^    _LGBMGroupKFold = GroupKFold$/;"	v
_LGBMGroupKFold	python-package/lightgbm/compat.py	/^    _LGBMGroupKFold = None$/;"	v
_LGBMGroupKFold	python-package/lightgbm/engine.py	/^from .compat import (SKLEARN_INSTALLED, _LGBMGroupKFold, _LGBMStratifiedKFold,$/;"	i
_LGBMLabelEncoder	python-package/lightgbm/compat.py	/^    _LGBMLabelEncoder = LabelEncoder$/;"	v
_LGBMLabelEncoder	python-package/lightgbm/compat.py	/^    _LGBMLabelEncoder = None$/;"	v
_LGBMModelBase	python-package/lightgbm/compat.py	/^    _LGBMModelBase = BaseEstimator$/;"	v
_LGBMModelBase	python-package/lightgbm/compat.py	/^    _LGBMModelBase = object$/;"	v
_LGBMRegressorBase	python-package/lightgbm/compat.py	/^    _LGBMRegressorBase = RegressorMixin$/;"	v
_LGBMRegressorBase	python-package/lightgbm/compat.py	/^    _LGBMRegressorBase = object$/;"	v
_LGBMStratifiedKFold	python-package/lightgbm/compat.py	/^    _LGBMStratifiedKFold = None$/;"	v
_LGBMStratifiedKFold	python-package/lightgbm/compat.py	/^    _LGBMStratifiedKFold = StratifiedKFold$/;"	v
_LGBMStratifiedKFold	python-package/lightgbm/engine.py	/^from .compat import (SKLEARN_INSTALLED, _LGBMGroupKFold, _LGBMStratifiedKFold,$/;"	i
_LIB	python-package/lightgbm/basic.py	/^_LIB = _load_lib()$/;"	v
__StringToTHelper	include/LightGBM/utils/common.h	/^struct __StringToTHelper {$/;"	s	namespace:LightGBM::Common
__StringToTHelper	include/LightGBM/utils/common.h	/^struct __StringToTHelper<T, true> {$/;"	s	namespace:LightGBM::Common
__StringToTHelperFast	include/LightGBM/utils/common.h	/^struct __StringToTHelperFast {$/;"	s	namespace:LightGBM::Common
__StringToTHelperFast	include/LightGBM/utils/common.h	/^struct __StringToTHelperFast<T, true> {$/;"	s	namespace:LightGBM::Common
__TToStringHelperFast	include/LightGBM/utils/common.h	/^struct __TToStringHelperFast {$/;"	s	namespace:LightGBM::Common
__TToStringHelperFast	include/LightGBM/utils/common.h	/^struct __TToStringHelperFast<T, false, true> {$/;"	s	namespace:LightGBM::Common
__TToStringHelperFast	include/LightGBM/utils/common.h	/^struct __TToStringHelperFast<T, true, false> {$/;"	s	namespace:LightGBM::Common
__all__	python-package/lightgbm/__init__.py	/^__all__ = ['Dataset', 'Booster',$/;"	v
__boost	python-package/lightgbm/basic.py	/^    def __boost(self, grad, hess):$/;"	m	class:Booster	file:
__copy__	python-package/lightgbm/basic.py	/^    def __copy__(self):$/;"	m	class:Booster	file:
__deepcopy__	python-package/lightgbm/basic.py	/^    def __deepcopy__(self, _):$/;"	m	class:Booster	file:
__del__	python-package/lightgbm/basic.py	/^    def __del__(self):$/;"	m	class:Booster	file:
__del__	python-package/lightgbm/basic.py	/^    def __del__(self):$/;"	m	class:Dataset	file:
__del__	python-package/lightgbm/basic.py	/^    def __del__(self):$/;"	m	class:_InnerPredictor	file:
__enter__	python-package/lightgbm/basic.py	/^    def __enter__(self):$/;"	m	class:_temp_file	file:
__exit__	python-package/lightgbm/basic.py	/^    def __exit__(self, exc_type, exc_val, exc_tb):$/;"	m	class:_temp_file	file:
__func__	include/LightGBM/meta.h	/^#define __func__ /;"	d
__get_eval_info	python-package/lightgbm/basic.py	/^    def __get_eval_info(self):$/;"	m	class:Booster	file:
__get_num_preds	python-package/lightgbm/basic.py	/^    def __get_num_preds(self, num_iteration, nrow, predict_type):$/;"	m	class:_InnerPredictor	file:
__getattr__	python-package/lightgbm/engine.py	/^    def __getattr__(self, name):$/;"	m	class:CVBooster	file:
__getstate__	python-package/lightgbm/basic.py	/^    def __getstate__(self):$/;"	m	class:Booster	file:
__getstate__	python-package/lightgbm/basic.py	/^    def __getstate__(self):$/;"	m	class:_InnerPredictor	file:
__init__	python-package/lightgbm/basic.py	/^    def __init__(self, data, label=None, reference=None,$/;"	m	class:Dataset
__init__	python-package/lightgbm/basic.py	/^    def __init__(self, model_file=None, booster_handle=None, pred_parameter=None):$/;"	m	class:_InnerPredictor
__init__	python-package/lightgbm/basic.py	/^    def __init__(self, params=None, train_set=None, model_file=None, silent=False):$/;"	m	class:Booster
__init__	python-package/lightgbm/callback.py	/^    def __init__(self, best_iteration, best_score):$/;"	m	class:EarlyStopException
__init__	python-package/lightgbm/engine.py	/^    def __init__(self):$/;"	m	class:CVBooster
__init__	python-package/lightgbm/sklearn.py	/^    def __init__(self, boosting_type="gbdt", num_leaves=31, max_depth=-1,$/;"	m	class:LGBMModel
__init__	tests/python_package_test/test_consistency.py	/^    def __init__(self, directory, prefix, config_file='train.conf'):$/;"	m	class:FileLoader
__init_from_csc	python-package/lightgbm/basic.py	/^    def __init_from_csc(self, csc, params_str, ref_dataset):$/;"	m	class:Dataset	file:
__init_from_csr	python-package/lightgbm/basic.py	/^    def __init_from_csr(self, csr, params_str, ref_dataset):$/;"	m	class:Dataset	file:
__init_from_np2d	python-package/lightgbm/basic.py	/^    def __init_from_np2d(self, mat, params_str, ref_dataset):$/;"	m	class:Dataset	file:
__inner_eval	python-package/lightgbm/basic.py	/^    def __inner_eval(self, data_name, data_idx, feval=None):$/;"	m	class:Booster	file:
__inner_predict	python-package/lightgbm/basic.py	/^    def __inner_predict(self, data_idx):$/;"	m	class:Booster	file:
__pred_for_csc	python-package/lightgbm/basic.py	/^    def __pred_for_csc(self, csc, num_iteration, predict_type):$/;"	m	class:_InnerPredictor	file:
__pred_for_csr	python-package/lightgbm/basic.py	/^    def __pred_for_csr(self, csr, num_iteration, predict_type):$/;"	m	class:_InnerPredictor	file:
__pred_for_np2d	python-package/lightgbm/basic.py	/^    def __pred_for_np2d(self, mat, num_iteration, predict_type):$/;"	m	class:_InnerPredictor	file:
__setstate__	python-package/lightgbm/basic.py	/^    def __setstate__(self, state):$/;"	m	class:Booster	file:
__version__	python-package/lightgbm/__init__.py	/^    __version__ = open(os.path.join(dir_path, 'VERSION.txt')).read().strip()$/;"	v
_agg_cv_result	python-package/lightgbm/engine.py	/^def _agg_cv_result(raw_results):$/;"	f
_base_doc	python-package/lightgbm/sklearn.py	/^    _base_doc = LGBMModel.fit.__doc__$/;"	v	class:LGBMClassifier
_base_doc	python-package/lightgbm/sklearn.py	/^    _base_doc = LGBMModel.fit.__doc__$/;"	v	class:LGBMRanker
_base_doc	python-package/lightgbm/sklearn.py	/^    _base_doc = LGBMModel.fit.__doc__$/;"	v	class:LGBMRegressor
_base_doc	python-package/lightgbm/sklearn.py	/^    _base_doc = fit.__doc__$/;"	v	class:LGBMRanker
_base_doc	python-package/lightgbm/sklearn.py	/^    _base_doc = fit.__doc__$/;"	v	class:LGBMRegressor
_construct_dataset	python-package/lightgbm/sklearn.py	/^        def _construct_dataset(X, y, sample_weight, init_score, group, params):$/;"	f	function:LGBMModel.fit
_data_from_pandas	python-package/lightgbm/basic.py	/^def _data_from_pandas(data, feature_name, categorical_feature, pandas_categorical):$/;"	f
_eval_function_wrapper	python-package/lightgbm/sklearn.py	/^def _eval_function_wrapper(func):$/;"	f
_format_eval_result	python-package/lightgbm/callback.py	/^def _format_eval_result(value, show_stdv=True):$/;"	f
_free_buffer	python-package/lightgbm/basic.py	/^    def _free_buffer(self):$/;"	m	class:Booster
_free_handle	python-package/lightgbm/basic.py	/^    def _free_handle(self):$/;"	m	class:Dataset
_label_from_pandas	python-package/lightgbm/basic.py	/^def _label_from_pandas(label):$/;"	f
_lazy_init	python-package/lightgbm/basic.py	/^    def _lazy_init(self, data, label=None, reference=None,$/;"	m	class:Dataset
_load_lib	python-package/lightgbm/basic.py	/^def _load_lib():$/;"	f
_load_model_from_string	python-package/lightgbm/basic.py	/^    def _load_model_from_string(self, model_str, verbose=True):$/;"	m	class:Booster
_load_pandas_categorical	python-package/lightgbm/basic.py	/^def _load_pandas_categorical(file_name):$/;"	f
_make_n_folds	python-package/lightgbm/engine.py	/^def _make_n_folds(full_data, folds, nfold, params, seed, fpreproc=None, stratified=True, shuffle=True):$/;"	f
_objective_function_wrapper	python-package/lightgbm/sklearn.py	/^def _objective_function_wrapper(func):$/;"	f
_position_bins	src/objective/IPWij_rank_objective.hpp	/^  size_t _position_bins = 12; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
_position_bins	src/objective/e2e_IPWi_rank_objective.hpp	/^  size_t _position_bins = 12; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
_position_bins	src/objective/e2e_IPWij_rank_objective.hpp	/^  size_t _position_bins = 12; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
_position_bins	src/objective/rank_objective.hpp	/^  size_t _position_bins = 12; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
_position_bins	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  size_t _position_bins = 12; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
_position_bins	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  size_t _position_bins = 12; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
_reverse_update_params	python-package/lightgbm/basic.py	/^    def _reverse_update_params(self):$/;"	m	class:Dataset
_safe_call	python-package/lightgbm/basic.py	/^def _safe_call(ret):$/;"	f
_save_model_to_string	python-package/lightgbm/basic.py	/^    def _save_model_to_string(self, num_iteration=-1):$/;"	m	class:Booster
_save_pandas_categorical	python-package/lightgbm/basic.py	/^def _save_pandas_categorical(file_name, pandas_categorical):$/;"	f
_set_predictor	python-package/lightgbm/basic.py	/^    def _set_predictor(self, predictor):$/;"	m	class:Dataset
_sigmoid_bins	src/objective/IPWi_rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_sigmoid_bins	src/objective/IPWij_rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_sigmoid_bins	src/objective/SCOREwy_rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_sigmoid_bins	src/objective/SCOREzn_rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_sigmoid_bins	src/objective/e2e_IPWi_rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_sigmoid_bins	src/objective/e2e_IPWij_rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_sigmoid_bins	src/objective/rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_sigmoid_bins	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_sigmoid_bins	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_sigmoid_bins	src/objective/zinu/ndcg_rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_sigmoid_bins	src/objective/zinu/score_rank_objective.hpp	/^  size_t _sigmoid_bins = 1024 * 1024;$/;"	m	class:LightGBM::LambdarankNDCG
_temp_file	python-package/lightgbm/basic.py	/^class _temp_file(object):$/;"	c
_to_graphviz	python-package/lightgbm/plotting.py	/^def _to_graphviz(tree_info, show_info, feature_names,$/;"	f
_to_predictor	python-package/lightgbm/basic.py	/^    def _to_predictor(self, pred_parameter=None):$/;"	m	class:Booster
_update_params	python-package/lightgbm/basic.py	/^    def _update_params(self, params):$/;"	m	class:Dataset
_yield_all_checks	tests/python_package_test/test_sklearn.py	/^from sklearn.utils.estimator_checks import (_yield_all_checks, SkipTest,$/;"	i
absolute_import	python-package/lightgbm/__init__.py	/^from __future__ import absolute_import$/;"	i
absolute_import	python-package/lightgbm/basic.py	/^from __future__ import absolute_import$/;"	i
absolute_import	python-package/lightgbm/callback.py	/^from __future__ import absolute_import$/;"	i
absolute_import	python-package/lightgbm/compat.py	/^from __future__ import absolute_import$/;"	i
absolute_import	python-package/lightgbm/engine.py	/^from __future__ import absolute_import$/;"	i
absolute_import	python-package/lightgbm/plotting.py	/^from __future__ import absolute_import$/;"	i
absolute_import	python-package/lightgbm/sklearn.py	/^from __future__ import absolute_import$/;"	i
absolute_import	python-package/setup.py	/^from __future__ import absolute_import$/;"	i
add	python-package/lightgbm/plotting.py	/^    def add(root, parent=None, decision=None):$/;"	f	function:_to_graphviz
add_valid	python-package/lightgbm/basic.py	/^    def add_valid(self, data, name):$/;"	m	class:Booster
align	include/LightGBM/R_object_helper.h	/^typedef union { VECTOR_SER s; double align; } SEXPREC_ALIGN;$/;"	m	union:__anon2
allgather_ext_fun_	include/LightGBM/network.h	/^  static THREAD_LOCAL AllgatherFunction allgather_ext_fun_;$/;"	m	class:LightGBM::Network
allgather_ext_fun_	src/network/network.cpp	/^THREAD_LOCAL AllgatherFunction Network::allgather_ext_fun_ = nullptr;$/;"	m	class:LightGBM::Network	file:
alpha	include/LightGBM/config.h	/^  double alpha = 0.9;$/;"	m	struct:LightGBM::MetricConfig
alpha	include/LightGBM/config.h	/^  double alpha = 0.9;$/;"	m	struct:LightGBM::ObjectiveConfig
alpha_	src/objective/regression_objective.hpp	/^  double alpha_;$/;"	m	class:LightGBM::RegressionHuberLoss
alpha_	src/objective/regression_objective.hpp	/^  score_t alpha_;$/;"	m	class:LightGBM::RegressionQuantileloss
alt	include/LightGBM/R_object_helper.h	/^  unsigned int alt : 1;$/;"	m	struct:lgbm_sxpinfo
append	python-package/lightgbm/engine.py	/^    def append(self, booster):$/;"	m	class:CVBooster
apply	python-package/lightgbm/sklearn.py	/^    def apply(self, X, num_iteration=0):$/;"	m	class:LGBMModel
argc_	python-package/lightgbm/compat.py	/^    def argc_(func):$/;"	f
array	include/LightGBM/json11.hpp	/^    typedef std::vector<Json> array;$/;"	t	class:json11::final
array_items	src/io/json11.cpp	/^const vector<Json> &      JsonValue::array_items()               const { return statics().empty_vector; }$/;"	f	class:json11::JsonValue
array_items	src/io/json11.cpp	/^const vector<Json> & Json::array_items()          const { return m_ptr->array_items();  }$/;"	f	class:json11::Json
attr	python-package/lightgbm/basic.py	/^    def attr(self, key):$/;"	m	class:Booster
attrgetter	python-package/lightgbm/engine.py	/^from operator import attrgetter$/;"	i
attrib	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER* attrib;$/;"	m	struct:LGBM_SER	typeref:struct:LGBM_SER::LGBM_SER
attrib	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER* attrib;$/;"	m	struct:VECTOR_SER	typeref:struct:VECTOR_SER::LGBM_SER
author	docs/conf.py	/^author = 'Microsoft Corporation'$/;"	v
autoclass_content	docs/conf.py	/^autoclass_content = 'both'$/;"	v
average_output_	src/boosting/gbdt.h	/^  bool average_output_;$/;"	m	class:LightGBM::GBDT
ax	examples/python-guide/plot_example.py	/^ax = lgb.plot_importance(gbm, max_num_features=10)$/;"	v
ax	examples/python-guide/plot_example.py	/^ax = lgb.plot_metric(evals_result, metric='l1')$/;"	v
ax	examples/python-guide/plot_example.py	/^ax = lgb.plot_tree(gbm, tree_index=83, figsize=(20, 8), show_info=['split_gain'])$/;"	v
bag_data_cnt_	src/boosting/gbdt.h	/^  data_size_t bag_data_cnt_;$/;"	m	class:LightGBM::GBDT
bag_data_indices_	src/boosting/gbdt.h	/^  std::vector<data_size_t> bag_data_indices_;$/;"	m	class:LightGBM::GBDT
bagging_fraction	include/LightGBM/config.h	/^  double bagging_fraction = 1.0;$/;"	m	struct:LightGBM::BoostingConfig
bagging_freq	include/LightGBM/config.h	/^  int bagging_freq = 0;$/;"	m	struct:LightGBM::BoostingConfig
bagging_seed	include/LightGBM/config.h	/^  int bagging_seed = 3;$/;"	m	struct:LightGBM::BoostingConfig
bagging_time	src/boosting/gbdt.cpp	/^std::chrono::duration<double, std::milli> bagging_time;$/;"	m	namespace:LightGBM	file:
best_iter_	src/boosting/gbdt.h	/^  std::vector<std::vector<int>> best_iter_;$/;"	m	class:LightGBM::GBDT
best_iteration_	python-package/lightgbm/sklearn.py	/^    def best_iteration_(self):$/;"	m	class:LGBMModel
best_msg_	src/boosting/gbdt.h	/^  std::vector<std::vector<std::string>> best_msg_;$/;"	m	class:LightGBM::GBDT
best_score_	python-package/lightgbm/sklearn.py	/^    def best_score_(self):$/;"	m	class:LGBMModel
best_score_	src/boosting/gbdt.h	/^  std::vector<std::vector<double>> best_score_;$/;"	m	class:LightGBM::GBDT
best_split_per_leaf_	src/treelearner/serial_tree_learner.h	/^  std::vector<SplitInfo> best_split_per_leaf_;$/;"	m	class:LightGBM::SerialTreeLearner
bias	src/treelearner/feature_histogram.hpp	/^  int8_t bias = 0;$/;"	m	class:LightGBM::FeatureMetainfo
bias_	src/io/dense_bin.hpp	/^  uint8_t bias_;$/;"	m	class:LightGBM::DenseBinIterator
bias_	src/io/dense_nbits_bin.hpp	/^  uint8_t bias_;$/;"	m	class:LightGBM::Dense4bitsBinIterator
bias_	src/io/sparse_bin.hpp	/^  uint8_t bias_;$/;"	m	class:LightGBM::SparseBinIterator
bin	src/io/ordered_sparse_bin.hpp	/^    VAL_T bin;  \/\/ bin for this data$/;"	m	struct:LightGBM::OrderedSparseBin::SparsePair
bin_2_categorical_	include/LightGBM/bin.h	/^  std::vector<int> bin_2_categorical_;$/;"	m	class:LightGBM::BinMapper
bin_construct_sample_cnt	include/LightGBM/config.h	/^  int bin_construct_sample_cnt = 200000;$/;"	m	struct:LightGBM::IOConfig
bin_data_	include/LightGBM/feature_group.h	/^  std::unique_ptr<Bin> bin_data_;$/;"	m	class:LightGBM::FeatureGroup
bin_data_	src/io/dense_bin.hpp	/^  const DenseBin<VAL_T>* bin_data_;$/;"	m	class:LightGBM::DenseBinIterator
bin_data_	src/io/dense_nbits_bin.hpp	/^  const Dense4bitsBin* bin_data_;$/;"	m	class:LightGBM::Dense4bitsBinIterator
bin_data_	src/io/ordered_sparse_bin.hpp	/^  const SparseBin<VAL_T>* bin_data_;$/;"	m	class:LightGBM::OrderedSparseBin
bin_data_	src/io/sparse_bin.hpp	/^  const SparseBin<VAL_T>* bin_data_;$/;"	m	class:LightGBM::SparseBinIterator
bin_info	include/LightGBM/bin.h	/^  inline std::string bin_info() const {$/;"	f	class:LightGBM::BinMapper
bin_mappers_	include/LightGBM/feature_group.h	/^  std::vector<std::unique_ptr<BinMapper>> bin_mappers_;$/;"	m	class:LightGBM::FeatureGroup
bin_offsets_	include/LightGBM/feature_group.h	/^  std::vector<uint32_t> bin_offsets_;$/;"	m	class:LightGBM::FeatureGroup
bin_type	include/LightGBM/bin.h	/^  inline BinType bin_type() const { return bin_type_; }$/;"	f	class:LightGBM::BinMapper
bin_type	src/treelearner/feature_histogram.hpp	/^  BinType bin_type;$/;"	m	class:LightGBM::FeatureMetainfo
bin_type_	include/LightGBM/bin.h	/^  BinType bin_type_;$/;"	m	class:LightGBM::BinMapper
bin_upper_bound_	include/LightGBM/bin.h	/^  std::vector<double> bin_upper_bound_;$/;"	m	class:LightGBM::BinMapper
binary_error	examples/python-guide/advanced_example.py	/^def binary_error(preds, train_data):$/;"	f
binary_error	tests/python_package_test/test_sklearn.py	/^        def binary_error(y_test, y_pred):$/;"	f	function:TestSklearn.test_binary_classification_with_custom_objective
binary_file_token	include/LightGBM/dataset.h	/^  static const char* binary_file_token;$/;"	m	class:LightGBM::Dataset
binary_file_token	src/io/dataset.cpp	/^const char* Dataset::binary_file_token = "______LightGBM_Binary_File_Token______\\n";$/;"	m	class:LightGBM::Dataset	file:
binary_loss_	src/objective/multiclass_objective.hpp	/^  std::vector<std::unique_ptr<BinaryLogloss>> binary_loss_;$/;"	m	class:LightGBM::MulticlassOVA
block_len_	include/LightGBM/network.h	/^  static THREAD_LOCAL std::vector<comm_size_t> block_len_;$/;"	m	class:LightGBM::Network
block_len_	src/network/network.cpp	/^THREAD_LOCAL std::vector<comm_size_t>  Network::block_len_;$/;"	m	class:LightGBM::Network	file:
block_len_	src/treelearner/parallel_tree_learner.h	/^  std::vector<comm_size_t> block_len_;$/;"	m	class:LightGBM::DataParallelTreeLearner
block_len_	src/treelearner/parallel_tree_learner.h	/^  std::vector<comm_size_t> block_len_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
block_start_	include/LightGBM/network.h	/^  static THREAD_LOCAL std::vector<comm_size_t> block_start_;$/;"	m	class:LightGBM::Network
block_start_	src/network/network.cpp	/^THREAD_LOCAL std::vector<comm_size_t> Network::block_start_;$/;"	m	class:LightGBM::Network	file:
block_start_	src/treelearner/parallel_tree_learner.h	/^  std::vector<comm_size_t> block_start_;$/;"	m	class:LightGBM::DataParallelTreeLearner
block_start_	src/treelearner/parallel_tree_learner.h	/^  std::vector<comm_size_t> block_start_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
body	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *body;$/;"	m	struct:lgbm_closxp	typeref:struct:lgbm_closxp::LGBM_SER
bool_value	src/io/json11.cpp	/^bool                      JsonValue::bool_value()                const { return false; }$/;"	f	class:json11::JsonValue
bool_value	src/io/json11.cpp	/^bool Json::bool_value()                           const { return m_ptr->bool_value();   }$/;"	f	class:json11::Json
boost_from_average	include/LightGBM/config.h	/^  bool boost_from_average = true;$/;"	m	struct:LightGBM::BoostingConfig
booster_	python-package/lightgbm/sklearn.py	/^    def booster_(self):$/;"	m	class:LGBMModel
boosting_	include/LightGBM/application.h	/^  std::unique_ptr<Boosting> boosting_;$/;"	m	class:LightGBM::Application
boosting_	src/application/predictor.hpp	/^  const Boosting* boosting_;$/;"	m	class:LightGBM::Predictor
boosting_	src/c_api.cpp	/^  std::unique_ptr<Boosting> boosting_;$/;"	m	class:LightGBM::Booster	file:
boosting_config	include/LightGBM/config.h	/^  BoostingConfig boosting_config;$/;"	m	struct:LightGBM::OverallConfig
boosting_time	src/boosting/gbdt.cpp	/^std::chrono::duration<double, std::milli> boosting_time;$/;"	m	namespace:LightGBM	file:
boosting_type	include/LightGBM/config.h	/^  std::string boosting_type = kDefaultBoostingType;$/;"	m	struct:LightGBM::OverallConfig
bruck_map	src/network/linkers.h	/^inline const BruckMap& Linkers::bruck_map() {$/;"	f	class:LightGBM::Linkers
bruck_map_	include/LightGBM/network.h	/^  static THREAD_LOCAL BruckMap bruck_map_;$/;"	m	class:LightGBM::Network
bruck_map_	src/network/linkers.h	/^  BruckMap bruck_map_;$/;"	m	class:LightGBM::Linkers
bruck_map_	src/network/network.cpp	/^THREAD_LOCAL BruckMap Network::bruck_map_;$/;"	m	class:LightGBM::Network	file:
bst	examples/python-guide/advanced_example.py	/^bst = lgb.Booster(model_file='model.txt')$/;"	v
buf_	src/io/dense_nbits_bin.hpp	/^  std::vector<uint8_t> buf_;$/;"	m	class:LightGBM::Dense4bitsBin
buffer_	include/LightGBM/network.h	/^  static THREAD_LOCAL std::vector<char> buffer_;$/;"	m	class:LightGBM::Network
buffer_	src/network/network.cpp	/^THREAD_LOCAL std::vector<char> Network::buffer_;$/;"	m	class:LightGBM::Network	file:
buffer_read_start_pos_	src/treelearner/parallel_tree_learner.h	/^  std::vector<comm_size_t> buffer_read_start_pos_;$/;"	m	class:LightGBM::DataParallelTreeLearner
buffer_size_	include/LightGBM/network.h	/^  static THREAD_LOCAL comm_size_t buffer_size_;$/;"	m	class:LightGBM::Network
buffer_size_	src/network/network.cpp	/^THREAD_LOCAL comm_size_t Network::buffer_size_ = 0;$/;"	m	class:LightGBM::Network	file:
buffer_write_start_pos_	src/treelearner/parallel_tree_learner.h	/^  std::vector<comm_size_t> buffer_write_start_pos_;$/;"	m	class:LightGBM::DataParallelTreeLearner
c_	src/objective/regression_objective.hpp	/^  double c_;$/;"	m	class:LightGBM::RegressionFairLoss
c_array	python-package/lightgbm/basic.py	/^def c_array(ctype, values):$/;"	f
c_array	tests/c_api_test/test_.py	/^def c_array(ctype, values):$/;"	f
c_float_array	python-package/lightgbm/basic.py	/^def c_float_array(data):$/;"	f
c_int_array	python-package/lightgbm/basic.py	/^def c_int_array(data):$/;"	f
c_str	python-package/lightgbm/basic.py	/^def c_str(string):$/;"	f
c_str	tests/c_api_test/test_.py	/^def c_str(string):$/;"	f
cache_size_	src/treelearner/feature_histogram.hpp	/^  int cache_size_;$/;"	m	class:LightGBM::HistogramPool
callback	examples/python-guide/advanced_example.py	/^    def callback(env):$/;"	f	function:reset_metrics
callback	python-package/lightgbm/callback.py	/^    def callback(env):$/;"	f	function:early_stopping
callback	python-package/lightgbm/callback.py	/^    def callback(env):$/;"	f	function:print_evaluation
callback	python-package/lightgbm/callback.py	/^    def callback(env):$/;"	f	function:record_evaluation
callback	python-package/lightgbm/callback.py	/^    def callback(env):$/;"	f	function:reset_parameter
callback	python-package/lightgbm/engine.py	/^from . import callback$/;"	i
callbacks	examples/python-guide/advanced_example.py	/^                callbacks=[lgb.reset_parameter(bagging_fraction=[0.7] * 5 + [0.6] * 5)])$/;"	v
carval	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *carval;$/;"	m	struct:lgbm_listsxp	typeref:struct:lgbm_listsxp::LGBM_SER
cat_boundaries_	include/LightGBM/tree.h	/^  std::vector<int> cat_boundaries_;$/;"	m	class:LightGBM::Tree
cat_boundaries_inner_	include/LightGBM/tree.h	/^  std::vector<int> cat_boundaries_inner_;$/;"	m	class:LightGBM::Tree
cat_l2	include/LightGBM/config.h	/^  double cat_l2 = 10;$/;"	m	struct:LightGBM::TreeConfig
cat_smooth	include/LightGBM/config.h	/^  double cat_smooth = 10;$/;"	m	struct:LightGBM::TreeConfig
cat_threshold	src/treelearner/split_info.hpp	/^  std::vector<uint32_t> cat_threshold;$/;"	m	struct:LightGBM::SplitInfo
cat_threshold_	include/LightGBM/tree.h	/^  std::vector<uint32_t> cat_threshold_;$/;"	m	class:LightGBM::Tree
cat_threshold_inner_	include/LightGBM/tree.h	/^  std::vector<uint32_t> cat_threshold_inner_;$/;"	m	class:LightGBM::Tree
categorical_2_bin_	include/LightGBM/bin.h	/^  std::unordered_map<int, unsigned int> categorical_2_bin_;$/;"	m	class:LightGBM::BinMapper
categorical_column	include/LightGBM/config.h	/^  std::string categorical_column = "";$/;"	m	struct:LightGBM::IOConfig
categorical_feature	examples/python-guide/advanced_example.py	/^                categorical_feature=[21])$/;"	v
categorical_feature	examples/python-guide/plot_example.py	/^                categorical_feature=[21],$/;"	v
categorical_features_	include/LightGBM/dataset_loader.h	/^  std::unordered_set<int> categorical_features_;$/;"	m	class:LightGBM::DatasetLoader
cdrval	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *cdrval;$/;"	m	struct:lgbm_listsxp	typeref:struct:lgbm_listsxp::LGBM_SER
cfloat32_array_to_numpy	python-package/lightgbm/basic.py	/^def cfloat32_array_to_numpy(cptr, length):$/;"	f
cfloat64_array_to_numpy	python-package/lightgbm/basic.py	/^def cfloat64_array_to_numpy(cptr, length):$/;"	f
check_X_y	python-package/lightgbm/compat.py	/^    from sklearn.utils.validation import check_X_y, check_array, check_consistent_length$/;"	i
check_array	python-package/lightgbm/compat.py	/^    from sklearn.utils.validation import check_X_y, check_array, check_consistent_length$/;"	i
check_classification_targets	python-package/lightgbm/compat.py	/^    from sklearn.utils.multiclass import check_classification_targets$/;"	i
check_consistent_length	python-package/lightgbm/compat.py	/^    from sklearn.utils.validation import check_X_y, check_array, check_consistent_length$/;"	i
check_no_fit_attributes_set_in_init	tests/python_package_test/test_sklearn.py	/^    from sklearn.utils.estimator_checks import check_no_fit_attributes_set_in_init$/;"	i
check_not_tuple_of_2_elements	python-package/lightgbm/plotting.py	/^def check_not_tuple_of_2_elements(obj, obj_name='obj'):$/;"	f
cint32_array_to_numpy	python-package/lightgbm/basic.py	/^def cint32_array_to_numpy(cptr, length):$/;"	f
class_default_output_	src/boosting/gbdt.h	/^  std::vector<double> class_default_output_;$/;"	m	class:LightGBM::GBDT
class_need_train_	src/boosting/gbdt.h	/^  std::vector<bool> class_need_train_;$/;"	m	class:LightGBM::GBDT
classes_	python-package/lightgbm/sklearn.py	/^    def classes_(self):$/;"	m	class:LGBMClassifier
clear_path	python-package/setup.py	/^def clear_path(path):$/;"	f
client_ips_	src/network/linkers.h	/^  std::vector<std::string> client_ips_;$/;"	m	class:LightGBM::Linkers
client_ports_	src/network/linkers.h	/^  std::vector<int> client_ports_;$/;"	m	class:LightGBM::Linkers
clone	tests/python_package_test/test_sklearn.py	/^from sklearn.base import clone$/;"	i
closxp	include/LightGBM/R_object_helper.h	/^    struct lgbm_closxp closxp;$/;"	m	union:LGBM_SER::__anon1	typeref:struct:LGBM_SER::__anon1::lgbm_closxp
cnt	include/LightGBM/bin.h	/^  data_size_t cnt = 0;$/;"	m	struct:LightGBM::HistogramBinEntry
cnt	src/treelearner/gpu_tree_learner.h	/^    uint32_t cnt;$/;"	m	struct:LightGBM::GPUTreeLearner::GPUHistogramBinEntry
collections	python-package/lightgbm/callback.py	/^import collections$/;"	i
collections	python-package/lightgbm/engine.py	/^import collections$/;"	i
comm_size_t	include/LightGBM/meta.h	/^typedef int32_t comm_size_t;$/;"	t	namespace:LightGBM
compile_cpp	python-package/setup.py	/^def compile_cpp(use_mingw=False, use_gpu=False, use_mpi=False, use_hdfs=False,$/;"	f
compute_sample_weight	python-package/lightgbm/compat.py	/^    from sklearn.utils.class_weight import compute_sample_weight$/;"	i
config_	include/LightGBM/application.h	/^  OverallConfig config_;$/;"	m	class:LightGBM::Application
config_	src/c_api.cpp	/^  OverallConfig config_;$/;"	m	class:LightGBM::Booster	file:
config_	src/metric/regression_metric.hpp	/^  MetricConfig config_;$/;"	m	class:LightGBM::RegressionMetric
construct	python-package/lightgbm/basic.py	/^    def construct(self):$/;"	m	class:Dataset
consume_comment	src/io/json11.cpp	/^    bool consume_comment() {$/;"	f	struct:json11::__anon3::final
consume_garbage	src/io/json11.cpp	/^    void consume_garbage() {$/;"	f	struct:json11::__anon3::final
consume_whitespace	src/io/json11.cpp	/^    void consume_whitespace() {$/;"	f	struct:json11::__anon3::final
convert_from_sliced_object	python-package/lightgbm/basic.py	/^def convert_from_sliced_object(data):$/;"	f
convert_model	include/LightGBM/config.h	/^  std::string convert_model = "gbdt_prediction.cpp";$/;"	m	struct:LightGBM::IOConfig
convert_model_language	include/LightGBM/config.h	/^  std::string convert_model_language = "";$/;"	m	struct:LightGBM::OverallConfig
copy	python-package/lightgbm/basic.py	/^import copy$/;"	i
copy	tests/python_package_test/test_engine.py	/^import copy$/;"	i
copy_files	python-package/setup.py	/^def copy_files(use_gpu=False):$/;"	f
copy_files_helper	python-package/setup.py	/^    def copy_files_helper(folder_name):$/;"	f	function:copy_files
copyright	docs/conf.py	/^copyright = '2017, Microsoft Corporation'$/;"	v
create_tree_digraph	python-package/lightgbm/__init__.py	/^    from .plotting import plot_importance, plot_metric, plot_tree, create_tree_digraph$/;"	i
create_tree_digraph	python-package/lightgbm/plotting.py	/^def create_tree_digraph(booster, tree_index=0, show_info=None,$/;"	f
create_valid	python-package/lightgbm/basic.py	/^    def create_valid(self, data, label=None, weight=None, group=None,$/;"	m	class:Dataset
csr_matrix	tests/python_package_test/test_engine.py	/^from scipy.sparse import csr_matrix$/;"	i
ctx_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::context ctx_;$/;"	m	class:LightGBM::GPUTreeLearner
ctypes	python-package/lightgbm/basic.py	/^import ctypes$/;"	i
ctypes	tests/c_api_test/test_.py	/^import ctypes$/;"	i
cur_idx_	src/c_api.cpp	/^  int cur_idx_ = -1;$/;"	m	class:CSC_RowIterator	file:
cur_pos_	src/io/sparse_bin.hpp	/^  data_size_t cur_pos_;$/;"	m	class:LightGBM::SparseBinIterator
cur_time_	src/treelearner/feature_histogram.hpp	/^  int cur_time_ = 0;$/;"	m	class:LightGBM::HistogramPool
cur_val_	src/c_api.cpp	/^  double cur_val_ = 0.0f;$/;"	m	class:CSC_RowIterator	file:
curr_path	docs/conf.py	/^curr_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
current_iteration	python-package/lightgbm/basic.py	/^    def current_iteration(self):$/;"	m	class:Booster
cv	python-package/lightgbm/__init__.py	/^from .engine import cv, train$/;"	i
cv	python-package/lightgbm/engine.py	/^def cv(params, train_set, num_boost_round=100,$/;"	f
data_	src/boosting/score_updater.hpp	/^  const Dataset* data_;$/;"	m	class:LightGBM::ScoreUpdater
data_	src/io/dense_bin.hpp	/^  std::vector<VAL_T> data_;$/;"	m	class:LightGBM::DenseBin
data_	src/io/dense_nbits_bin.hpp	/^  std::vector<uint8_t> data_;$/;"	m	class:LightGBM::Dense4bitsBin
data_	src/treelearner/feature_histogram.hpp	/^  HistogramBinEntry* data_;$/;"	m	class:LightGBM::FeatureHistogram
data_	src/treelearner/feature_histogram.hpp	/^  std::vector<std::vector<HistogramBinEntry>> data_;$/;"	m	class:LightGBM::HistogramPool
data_count	include/LightGBM/tree.h	/^  inline int data_count(int node) const { return node >= 0 ? internal_count_[node] : leaf_count_[~node]; }$/;"	f	class:LightGBM::Tree
data_filename	include/LightGBM/config.h	/^  std::string data_filename = "";$/;"	m	struct:LightGBM::IOConfig
data_filename_	include/LightGBM/dataset.h	/^  std::string data_filename_;$/;"	m	class:LightGBM::Dataset
data_filename_	include/LightGBM/dataset.h	/^  std::string data_filename_;$/;"	m	class:LightGBM::Metadata
data_indices	src/treelearner/leaf_splits.hpp	/^  const data_size_t* data_indices() const { return data_indices_; }$/;"	f	class:LightGBM::LeafSplits
data_indices_	src/treelearner/leaf_splits.hpp	/^  const data_size_t* data_indices_;$/;"	m	class:LightGBM::LeafSplits
data_partition_	src/treelearner/serial_tree_learner.h	/^  std::unique_ptr<DataPartition> data_partition_;$/;"	m	class:LightGBM::SerialTreeLearner
data_random_seed	include/LightGBM/config.h	/^  int data_random_seed = 1;$/;"	m	struct:LightGBM::IOConfig
data_reader	src/objective/regression_objective.hpp	/^        #define data_reader(/;"	d
data_reader	src/objective/regression_objective.hpp	/^        #undef data_reader$/;"	d
data_reader	src/objective/regression_objective.hpp	/^      #define data_reader(/;"	d
data_reader	src/objective/regression_objective.hpp	/^      #undef data_reader$/;"	d
data_reader	src/objective/regression_objective.hpp	/^    #define data_reader(/;"	d
data_reader	src/objective/regression_objective.hpp	/^    #undef data_reader$/;"	d
data_size_t	include/LightGBM/meta.h	/^typedef int32_t data_size_t;$/;"	t	namespace:LightGBM
debug	include/LightGBM/R_object_helper.h	/^  unsigned int debug : 1;$/;"	m	struct:lgbm_sxpinfo
decision_type_	include/LightGBM/tree.h	/^  std::vector<int8_t> decision_type_;$/;"	m	class:LightGBM::Tree
decode_string	python-package/lightgbm/compat.py	/^    def decode_string(bytestring):$/;"	f
deepcopy	python-package/lightgbm/plotting.py	/^from copy import deepcopy$/;"	i
default_bin	src/treelearner/feature_histogram.hpp	/^  uint32_t default_bin;$/;"	m	class:LightGBM::FeatureMetainfo
default_bin_	include/LightGBM/bin.h	/^  uint32_t default_bin_;$/;"	m	class:LightGBM::BinMapper
default_bin_	src/io/dense_bin.hpp	/^  VAL_T default_bin_;$/;"	m	class:LightGBM::DenseBinIterator
default_bin_	src/io/dense_nbits_bin.hpp	/^  uint8_t default_bin_;$/;"	m	class:LightGBM::Dense4bitsBinIterator
default_bin_	src/io/sparse_bin.hpp	/^  VAL_T default_bin_;$/;"	m	class:LightGBM::SparseBinIterator
default_left	src/treelearner/split_info.hpp	/^  bool default_left = true;$/;"	m	struct:LightGBM::SplitInfo
deltas_	src/io/sparse_bin.hpp	/^  std::vector<uint8_t> deltas_;$/;"	m	class:LightGBM::SparseBin
dense_feature_group_map_	src/treelearner/gpu_tree_learner.h	/^  std::vector<int> dense_feature_group_map_;$/;"	m	class:LightGBM::GPUTreeLearner
dev_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::device dev_;$/;"	m	class:LightGBM::GPUTreeLearner
device_bin_mults_	src/treelearner/gpu_tree_learner.h	/^  std::vector<int> device_bin_mults_;$/;"	m	class:LightGBM::GPUTreeLearner
device_bin_size_	src/treelearner/gpu_tree_learner.h	/^  int device_bin_size_;$/;"	m	class:LightGBM::GPUTreeLearner
device_data_indices_	src/treelearner/gpu_tree_learner.h	/^  std::unique_ptr<boost::compute::vector<data_size_t>> device_data_indices_;$/;"	m	class:LightGBM::GPUTreeLearner
device_feature_masks_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::buffer device_feature_masks_;$/;"	m	class:LightGBM::GPUTreeLearner
device_features_	src/treelearner/gpu_tree_learner.h	/^  std::unique_ptr<boost::compute::vector<Feature4>> device_features_;$/;"	m	class:LightGBM::GPUTreeLearner
device_gradients_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::buffer device_gradients_;$/;"	m	class:LightGBM::GPUTreeLearner
device_hessians_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::buffer device_hessians_;$/;"	m	class:LightGBM::GPUTreeLearner
device_histogram_outputs_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::buffer device_histogram_outputs_;$/;"	m	class:LightGBM::GPUTreeLearner
device_subhistograms_	src/treelearner/gpu_tree_learner.h	/^  std::unique_ptr<boost::compute::vector<char>> device_subhistograms_;$/;"	m	class:LightGBM::GPUTreeLearner
device_type	include/LightGBM/config.h	/^  std::string device_type = kDefaultDevice;$/;"	m	struct:LightGBM::BoostingConfig
device_type	include/LightGBM/config.h	/^  std::string device_type = kDefaultDevice;$/;"	m	struct:LightGBM::IOConfig
df_test	examples/python-guide/advanced_example.py	/^df_test = pd.read_csv('..\/binary_classification\/binary.test', header=None, sep='\\t')$/;"	v
df_test	examples/python-guide/plot_example.py	/^df_test = pd.read_csv('..\/regression\/regression.test', header=None, sep='\\t')$/;"	v
df_test	examples/python-guide/simple_example.py	/^df_test = pd.read_csv('..\/regression\/regression.test', header=None, sep='\\t')$/;"	v
df_test	examples/python-guide/sklearn_example.py	/^df_test = pd.read_csv('..\/regression\/regression.test', header=None, sep='\\t')$/;"	v
df_train	examples/python-guide/advanced_example.py	/^df_train = pd.read_csv('..\/binary_classification\/binary.train', header=None, sep='\\t')$/;"	v
df_train	examples/python-guide/plot_example.py	/^df_train = pd.read_csv('..\/regression\/regression.train', header=None, sep='\\t')$/;"	v
df_train	examples/python-guide/simple_example.py	/^df_train = pd.read_csv('..\/regression\/regression.train', header=None, sep='\\t')$/;"	v
df_train	examples/python-guide/sklearn_example.py	/^df_train = pd.read_csv('..\/regression\/regression.train', header=None, sep='\\t')$/;"	v
dir_path	python-package/lightgbm/__init__.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	python-package/setup.py	/^    dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
discount_	include/LightGBM/metric.h	/^  static std::vector<double> discount_;$/;"	m	class:LightGBM::DCGCalculator
discount_	src/metric/dcg_calculator.cpp	/^std::vector<double> DCGCalculator::discount_;$/;"	m	class:LightGBM::DCGCalculator	file:
distutils	.nuget/create_nuget.py	/^import distutils$/;"	i
distutils	python-package/setup.py	/^import distutils$/;"	i
drop_index_	src/boosting/dart.hpp	/^  std::vector<int> drop_index_;$/;"	m	class:LightGBM::DART
drop_rate	include/LightGBM/config.h	/^  double drop_rate = 0.1;$/;"	m	struct:LightGBM::BoostingConfig
drop_seed	include/LightGBM/config.h	/^  int drop_seed = 4;$/;"	m	struct:LightGBM::BoostingConfig
dtype_float32	tests/c_api_test/test_.py	/^dtype_float32 = 0$/;"	v
dtype_float64	tests/c_api_test/test_.py	/^dtype_float64 = 1$/;"	v
dtype_int32	tests/c_api_test/test_.py	/^dtype_int32 = 2$/;"	v
dtype_int64	tests/c_api_test/test_.py	/^dtype_int64 = 3$/;"	v
dump	include/LightGBM/json11.hpp	/^    std::string dump() const {$/;"	f	class:json11::final
dump	src/io/json11.cpp	/^static void dump(NullStruct, string &out) {$/;"	f	namespace:json11
dump	src/io/json11.cpp	/^static void dump(bool value, string &out) {$/;"	f	namespace:json11
dump	src/io/json11.cpp	/^static void dump(const Json::array &values, string &out) {$/;"	f	namespace:json11
dump	src/io/json11.cpp	/^static void dump(const Json::object &values, string &out) {$/;"	f	namespace:json11
dump	src/io/json11.cpp	/^static void dump(const string &value, string &out) {$/;"	f	namespace:json11
dump	src/io/json11.cpp	/^static void dump(double value, string &out) {$/;"	f	namespace:json11
dump	src/io/json11.cpp	/^static void dump(int value, string &out) {$/;"	f	namespace:json11
dump	src/io/json11.cpp	/^void Json::dump(string &out) const {$/;"	f	class:json11::Json
dump_model	python-package/lightgbm/basic.py	/^    def dump_model(self, num_iteration=-1):$/;"	m	class:Booster
dump_svmlight_file	tests/python_package_test/test_basic.py	/^from sklearn.datasets import load_breast_cancer, dump_svmlight_file$/;"	i
dword_features_	src/treelearner/gpu_tree_learner.h	/^  int dword_features_;$/;"	m	class:LightGBM::GPUTreeLearner
early_stop_	src/application/predictor.hpp	/^  PredictionEarlyStopInstance early_stop_;$/;"	m	class:LightGBM::Predictor
early_stopping	python-package/lightgbm/__init__.py	/^from .callback import (early_stopping, print_evaluation, record_evaluation,$/;"	i
early_stopping	python-package/lightgbm/callback.py	/^def early_stopping(stopping_rounds, verbose=True):$/;"	f
early_stopping_round	include/LightGBM/config.h	/^  int early_stopping_round = 0;$/;"	m	struct:LightGBM::BoostingConfig
early_stopping_round_	src/boosting/gbdt.h	/^  int early_stopping_round_;$/;"	m	class:LightGBM::GBDT
early_stopping_rounds	examples/python-guide/simple_example.py	/^                early_stopping_rounds=5)$/;"	v
early_stopping_rounds	examples/python-guide/sklearn_example.py	/^        early_stopping_rounds=5)$/;"	v
empty_map	src/io/json11.cpp	/^    const map<string, Json> empty_map;$/;"	m	struct:json11::Statics	file:
empty_string	src/io/json11.cpp	/^    const string empty_string;$/;"	m	struct:json11::Statics	file:
empty_vector	src/io/json11.cpp	/^    const vector<Json> empty_vector;$/;"	m	struct:json11::Statics	file:
enable_bundle	include/LightGBM/config.h	/^  bool enable_bundle = true;$/;"	m	struct:LightGBM::IOConfig
enable_load_from_binary_file	include/LightGBM/config.h	/^  bool enable_load_from_binary_file = true;$/;"	m	struct:LightGBM::IOConfig
enclos	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *enclos;$/;"	m	struct:lgbm_envsxp	typeref:struct:lgbm_envsxp::LGBM_SER
encode_utf8	src/io/json11.cpp	/^    void encode_utf8(long pt, string & out) {$/;"	f	struct:json11::__anon3::final
end	docs/make.bat	/^:end$/;"	l
env	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *env;$/;"	m	struct:lgbm_closxp	typeref:struct:lgbm_closxp::LGBM_SER
env	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *env;$/;"	m	struct:lgbm_promsxp	typeref:struct:lgbm_promsxp::LGBM_SER
envsxp	include/LightGBM/R_object_helper.h	/^    struct lgbm_envsxp envsxp;$/;"	m	union:LGBM_SER::__anon1	typeref:struct:LGBM_SER::__anon1::lgbm_envsxp
err	src/io/json11.cpp	/^    string &err;$/;"	m	struct:json11::__anon3::final	file:
esc	src/io/json11.cpp	/^static inline string esc(char c) {$/;"	f	namespace:json11
estimator	examples/python-guide/sklearn_example.py	/^estimator = lgb.LGBMRegressor(num_leaves=31)$/;"	v
eval	python-package/lightgbm/basic.py	/^    def eval(self, data, name, feval=None):$/;"	m	class:Booster
eval_at	include/LightGBM/config.h	/^  std::vector<int> eval_at;$/;"	m	struct:LightGBM::MetricConfig
eval_at_	src/metric/map_metric.hpp	/^  std::vector<data_size_t> eval_at_;$/;"	m	class:LightGBM::MapMetric
eval_at_	src/metric/rank_metric.hpp	/^  std::vector<data_size_t> eval_at_;$/;"	m	class:LightGBM::NDCGMetric
eval_metric	examples/python-guide/sklearn_example.py	/^        eval_metric='l1',$/;"	v
eval_set	examples/python-guide/sklearn_example.py	/^        eval_set=[(X_test, y_test)],$/;"	v
eval_train	python-package/lightgbm/basic.py	/^    def eval_train(self, feval=None):$/;"	m	class:Booster
eval_valid	python-package/lightgbm/basic.py	/^    def eval_valid(self, feval=None):$/;"	m	class:Booster
evals_result	examples/python-guide/plot_example.py	/^                evals_result=evals_result,$/;"	v
evals_result	examples/python-guide/plot_example.py	/^evals_result = {}  # to record eval results for plotting$/;"	v
evals_result_	python-package/lightgbm/sklearn.py	/^    def evals_result_(self):$/;"	m	class:LGBMModel
ex_ptr_	include/LightGBM/utils/openmp_wrapper.h	/^  std::exception_ptr ex_ptr_;$/;"	m	class:ThreadExceptionHelper
exclude_patterns	docs/conf.py	/^exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']$/;"	v
expect	src/io/json11.cpp	/^    Json expect(const string &expected, Json res) {$/;"	f	struct:json11::__anon3::final
expr	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *expr;$/;"	m	struct:lgbm_promsxp	typeref:struct:lgbm_promsxp::LGBM_SER
extensions	docs/conf.py	/^extensions = [$/;"	v
extra	include/LightGBM/R_object_helper.h	/^  unsigned int extra : 32 - NAMED_BITS;$/;"	m	struct:lgbm_sxpinfo
f	src/io/json11.cpp	/^    const std::shared_ptr<JsonValue> f = make_shared<JsonBoolean>(false);$/;"	m	struct:json11::Statics	file:
f	src/treelearner/gpu_tree_learner.cpp	/^    double f;$/;"	m	union:LightGBM::Float_t	file:
fail	src/io/json11.cpp	/^    Json fail(string &&msg) {$/;"	f	struct:json11::__anon3::final
fail	src/io/json11.cpp	/^    T fail(string &&msg, const T err_ret) {$/;"	f	struct:json11::__anon3::final
failed	src/io/json11.cpp	/^    bool failed;$/;"	m	struct:json11::__anon3::final	file:
fair_c	include/LightGBM/config.h	/^  double fair_c = 1.0;$/;"	m	struct:LightGBM::MetricConfig
fair_c	include/LightGBM/config.h	/^  double fair_c = 1.0;$/;"	m	struct:LightGBM::ObjectiveConfig
fast_index_	src/io/sparse_bin.hpp	/^  std::vector<std::pair<data_size_t, data_size_t>> fast_index_;$/;"	m	class:LightGBM::SparseBin
fast_index_shift_	src/io/sparse_bin.hpp	/^  data_size_t fast_index_shift_;$/;"	m	class:LightGBM::SparseBin
feature	src/treelearner/split_info.hpp	/^  int feature = -1;$/;"	m	struct:LightGBM::LightSplitInfo
feature	src/treelearner/split_info.hpp	/^  int feature = -1;$/;"	m	struct:LightGBM::SplitInfo
feature2group_	include/LightGBM/dataset.h	/^  std::vector<int> feature2group_;$/;"	m	class:LightGBM::Dataset
feature2subfeature_	include/LightGBM/dataset.h	/^  std::vector<int> feature2subfeature_;$/;"	m	class:LightGBM::Dataset
feature_fraction	include/LightGBM/config.h	/^  double feature_fraction = 1.0;$/;"	m	struct:LightGBM::TreeConfig
feature_fraction_seed	include/LightGBM/config.h	/^  int feature_fraction_seed = 2;$/;"	m	struct:LightGBM::TreeConfig
feature_groups_	include/LightGBM/dataset.h	/^  std::vector<std::unique_ptr<FeatureGroup>> feature_groups_;$/;"	m	class:LightGBM::Dataset
feature_importance	python-package/lightgbm/basic.py	/^    def feature_importance(self, importance_type='split', iteration=-1):$/;"	m	class:Booster
feature_importances_	python-package/lightgbm/sklearn.py	/^    def feature_importances_(self):$/;"	m	class:LGBMModel
feature_index	include/LightGBM/tree.h	/^    int feature_index;$/;"	m	struct:LightGBM::Tree::PathElement
feature_infos	include/LightGBM/dataset.h	/^  inline std::vector<std::string> feature_infos() const {$/;"	f	class:LightGBM::Dataset
feature_infos_	src/boosting/gbdt.h	/^  std::vector<std::string> feature_infos_;$/;"	m	class:LightGBM::GBDT
feature_masks_	src/treelearner/gpu_tree_learner.h	/^  std::vector<char, boost::alignment::aligned_allocator<char, 4096>> feature_masks_;$/;"	m	class:LightGBM::GPUTreeLearner
feature_metas_	src/treelearner/feature_histogram.hpp	/^  std::vector<FeatureMetainfo> feature_metas_;$/;"	m	class:LightGBM::HistogramPool
feature_metas_	src/treelearner/parallel_tree_learner.h	/^  std::vector<FeatureMetainfo> feature_metas_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
feature_name	examples/python-guide/advanced_example.py	/^                feature_name=feature_name,$/;"	v
feature_name	examples/python-guide/advanced_example.py	/^feature_name = ['feature_' + str(col) for col in range(num_feature)]$/;"	v
feature_name	examples/python-guide/plot_example.py	/^                feature_name=['f' + str(i + 1) for i in range(28)],$/;"	v
feature_name	python-package/lightgbm/basic.py	/^    def feature_name(self):$/;"	m	class:Booster
feature_names	include/LightGBM/dataset.h	/^  inline const std::vector<std::string>& feature_names() const { return feature_names_; }$/;"	f	class:LightGBM::Dataset
feature_names_	include/LightGBM/dataset.h	/^  std::vector<std::string> feature_names_;$/;"	m	class:LightGBM::Dataset
feature_names_	include/LightGBM/dataset_loader.h	/^  std::vector<std::string> feature_names_;$/;"	m	class:LightGBM::DatasetLoader
feature_names_	src/boosting/gbdt.h	/^  std::vector<std::string> feature_names_;$/;"	m	class:LightGBM::GBDT
feval	examples/python-guide/advanced_example.py	/^                feval=binary_error,$/;"	v
file_	src/io/file_io.cpp	/^  FILE* file_ = NULL;$/;"	m	struct:LightGBM::LocalFile	file:
file_	src/io/file_io.cpp	/^  hdfsFile file_ = NULL;$/;"	m	struct:LightGBM::HDFSFile	file:
file_load_check	tests/python_package_test/test_consistency.py	/^    def file_load_check(self, lgb_train, name):$/;"	m	class:FileLoader
file_util	.nuget/create_nuget.py	/^from distutils import file_util$/;"	i
filename_	include/LightGBM/utils/text_reader.h	/^  const char* filename_;$/;"	m	class:LightGBM::TextReader
filename_	src/io/file_io.cpp	/^  const std::string filename_;$/;"	m	struct:LightGBM::HDFSFile	file:
filename_	src/io/file_io.cpp	/^  const std::string filename_;$/;"	m	struct:LightGBM::LocalFile	file:
final	include/LightGBM/json11.hpp	/^class Json final {$/;"	c	namespace:json11
final	src/io/json11.cpp	/^class JsonArray final : public Value<Json::ARRAY, Json::array> {$/;"	c	namespace:json11	file:
final	src/io/json11.cpp	/^class JsonBoolean final : public Value<Json::BOOL, bool> {$/;"	c	namespace:json11	file:
final	src/io/json11.cpp	/^class JsonDouble final : public Value<Json::NUMBER, double> {$/;"	c	namespace:json11	file:
final	src/io/json11.cpp	/^class JsonInt final : public Value<Json::NUMBER, int> {$/;"	c	namespace:json11	file:
final	src/io/json11.cpp	/^class JsonNull final : public Value<Json::NUL, NullStruct> {$/;"	c	namespace:json11	file:
final	src/io/json11.cpp	/^class JsonObject final : public Value<Json::OBJECT, Json::object> {$/;"	c	namespace:json11	file:
final	src/io/json11.cpp	/^class JsonString final : public Value<Json::STRING, string> {$/;"	c	namespace:json11	file:
final	src/io/json11.cpp	/^struct JsonParser final {$/;"	s	namespace:json11::__anon3	file:
find_best_threshold_fun_	src/treelearner/feature_histogram.hpp	/^  std::function<void(double, double, data_size_t, double, double, SplitInfo*)> find_best_threshold_fun_;$/;"	m	class:LightGBM::FeatureHistogram
find_lib	python-package/setup.py	/^def find_lib():$/;"	f
find_lib_path	python-package/lightgbm/basic.py	/^from .libpath import find_lib_path$/;"	i
find_lib_path	python-package/lightgbm/libpath.py	/^def find_lib_path():$/;"	f
find_lib_path	tests/c_api_test/test_.py	/^def find_lib_path():$/;"	f
find_packages	python-package/setup.py	/^from setuptools import find_packages, setup$/;"	i
find_split_time	src/treelearner/serial_tree_learner.cpp	/^std::chrono::duration<double, std::milli> find_split_time;$/;"	m	namespace:LightGBM	file:
first_line	include/LightGBM/utils/text_reader.h	/^  inline std::string first_line() {$/;"	f	class:LightGBM::TextReader
first_line_	include/LightGBM/utils/text_reader.h	/^  std::string first_line_="";$/;"	m	class:LightGBM::TextReader
fit	python-package/lightgbm/sklearn.py	/^    def fit(self, X, y,$/;"	m	class:LGBMClassifier
fit	python-package/lightgbm/sklearn.py	/^    def fit(self, X, y,$/;"	m	class:LGBMModel
fit	python-package/lightgbm/sklearn.py	/^    def fit(self, X, y,$/;"	m	class:LGBMRanker
fit	python-package/lightgbm/sklearn.py	/^    def fit(self, X, y,$/;"	m	class:LGBMRegressor
flags_	src/io/file_io.cpp	/^  const int flags_;$/;"	m	struct:LightGBM::HDFSFile	file:
fobj	examples/python-guide/advanced_example.py	/^                fobj=loglikelood,$/;"	v
forced_splits_json_	src/boosting/gbdt.h	/^  Json forced_splits_json_;$/;"	m	class:LightGBM::GBDT
forcedsplits_filename	include/LightGBM/config.h	/^  std::string forcedsplits_filename = "";$/;"	m	struct:LightGBM::BoostingConfig
formals	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *formals;$/;"	m	struct:lgbm_closxp	typeref:struct:lgbm_closxp::LGBM_SER
frame	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *frame;$/;"	m	struct:lgbm_envsxp	typeref:struct:lgbm_envsxp::LGBM_SER
free_dataset	python-package/lightgbm/basic.py	/^    def free_dataset(self):$/;"	m	class:Booster
free_network	python-package/lightgbm/basic.py	/^    def free_network(self):$/;"	m	class:Booster
fs_	src/io/file_io.cpp	/^  mutable hdfsFS fs_ = NULL;$/;"	m	struct:LightGBM::HDFSFile	file:
fs_cache_	src/io/file_io.cpp	/^  static std::unordered_map<std::string, hdfsFS> fs_cache_;$/;"	m	struct:LightGBM::HDFSFile	file:
fs_cache_	src/io/file_io.cpp	/^std::unordered_map<std::string, hdfsFS> HDFSFile::fs_cache_ = std::unordered_map<std::string, hdfsFS>();$/;"	m	class:LightGBM::HDFSFile	file:
gain	src/treelearner/split_info.hpp	/^  double gain = kMinScore;$/;"	m	struct:LightGBM::LightSplitInfo
gain	src/treelearner/split_info.hpp	/^  double gain = kMinScore;$/;"	m	struct:LightGBM::SplitInfo
gbdt_config_	src/boosting/gbdt.h	/^  std::unique_ptr<BoostingConfig> gbdt_config_;$/;"	m	class:LightGBM::GBDT
gbm	examples/python-guide/advanced_example.py	/^gbm = lgb.train(params,$/;"	v
gbm	examples/python-guide/plot_example.py	/^gbm = lgb.train(params,$/;"	v
gbm	examples/python-guide/simple_example.py	/^gbm = lgb.train(params,$/;"	v
gbm	examples/python-guide/sklearn_example.py	/^gbm = GridSearchCV(estimator, param_grid)$/;"	v
gbm	examples/python-guide/sklearn_example.py	/^gbm = lgb.LGBMRegressor(objective='regression',$/;"	v
gccls	include/LightGBM/R_object_helper.h	/^  unsigned int gccls : 3;$/;"	m	struct:lgbm_sxpinfo
gcgen	include/LightGBM/R_object_helper.h	/^  unsigned int gcgen : 1;$/;"	m	struct:lgbm_sxpinfo
gengc_next_node	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER* gengc_next_node, *gengc_prev_node;$/;"	m	struct:LGBM_SER	typeref:struct:LGBM_SER::LGBM_SER
gengc_next_node	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER* gengc_next_node, *gengc_prev_node;$/;"	m	struct:VECTOR_SER	typeref:struct:VECTOR_SER::LGBM_SER
gengc_prev_node	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER* gengc_next_node, *gengc_prev_node;$/;"	m	struct:LGBM_SER	typeref:struct:LGBM_SER::
gengc_prev_node	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER* gengc_next_node, *gengc_prev_node;$/;"	m	struct:VECTOR_SER	typeref:struct:VECTOR_SER::
get_field	python-package/lightgbm/basic.py	/^    def get_field(self, field_name):$/;"	m	class:Dataset
get_group	python-package/lightgbm/basic.py	/^    def get_group(self):$/;"	m	class:Dataset
get_init_score	python-package/lightgbm/basic.py	/^    def get_init_score(self):$/;"	m	class:Dataset
get_label	python-package/lightgbm/basic.py	/^    def get_label(self):$/;"	m	class:Dataset
get_leaf_output	python-package/lightgbm/basic.py	/^    def get_leaf_output(self, tree_id, leaf_id):$/;"	m	class:Booster
get_meta_data	python-package/lightgbm/sklearn.py	/^                    def get_meta_data(collection, i):$/;"	f	function:LGBMModel.fit._construct_dataset
get_next_token	src/io/json11.cpp	/^    char get_next_token() {$/;"	f	struct:json11::__anon3::final
get_params	python-package/lightgbm/sklearn.py	/^    def get_params(self, deep=True):$/;"	m	class:LGBMModel
get_ref_chain	python-package/lightgbm/basic.py	/^    def get_ref_chain(self, ref_limit=100):$/;"	m	class:Dataset
get_weight	python-package/lightgbm/basic.py	/^    def get_weight(self):$/;"	m	class:Dataset
getline	src/io/parser.cpp	/^void getline(std::stringstream& ss, std::string& line, const VirtualFileReader* reader, std::vector<char>& buffer, size_t buffer_size) {$/;"	f	namespace:LightGBM
glob	tests/cpp_test/test.py	/^import glob$/;"	i
global_data_count_in_leaf_	src/treelearner/parallel_tree_learner.h	/^  std::vector<data_size_t> global_data_count_in_leaf_;$/;"	m	class:LightGBM::DataParallelTreeLearner
global_data_count_in_leaf_	src/treelearner/parallel_tree_learner.h	/^  std::vector<data_size_t> global_data_count_in_leaf_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
gp	include/LightGBM/R_object_helper.h	/^  unsigned int gp : 16;$/;"	m	struct:lgbm_sxpinfo
gpu_device_id	include/LightGBM/config.h	/^  int gpu_device_id = -1;$/;"	m	struct:LightGBM::TreeConfig
gpu_platform_id	include/LightGBM/config.h	/^  int gpu_platform_id = -1;$/;"	m	struct:LightGBM::TreeConfig
gpu_use_dp	include/LightGBM/config.h	/^  bool gpu_use_dp = false;$/;"	m	struct:LightGBM::TreeConfig
gradients_	src/boosting/gbdt.h	/^  std::vector<score_t> gradients_;$/;"	m	class:LightGBM::GBDT
gradients_	src/treelearner/serial_tree_learner.h	/^  const score_t* gradients_;$/;"	m	class:LightGBM::SerialTreeLearner
gradients_future_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::event gradients_future_;$/;"	m	class:LightGBM::GPUTreeLearner
graph	examples/python-guide/plot_example.py	/^graph = lgb.create_tree_digraph(gbm, tree_index=83, name='Tree84')$/;"	v
group_bin_boundaries_	include/LightGBM/dataset.h	/^  std::vector<uint64_t> group_bin_boundaries_;$/;"	m	class:LightGBM::Dataset
group_column	include/LightGBM/config.h	/^  std::string group_column = "";$/;"	m	struct:LightGBM::IOConfig
group_feature_cnt_	include/LightGBM/dataset.h	/^  std::vector<int> group_feature_cnt_;$/;"	m	class:LightGBM::Dataset
group_feature_start_	include/LightGBM/dataset.h	/^  std::vector<int> group_feature_start_;$/;"	m	class:LightGBM::Dataset
group_idx_	include/LightGBM/dataset_loader.h	/^  int group_idx_;$/;"	m	class:LightGBM::DatasetLoader
gt	python-package/lightgbm/callback.py	/^from operator import gt, lt$/;"	i
handlerFunction	python-package/lightgbm/engine.py	/^        def handlerFunction(*args, **kwargs):$/;"	f	function:CVBooster.__getattr__
has_header	include/LightGBM/config.h	/^  bool has_header = false;$/;"	m	struct:LightGBM::IOConfig
has_init_score	src/boosting/score_updater.hpp	/^  inline bool has_init_score() const { return has_init_score_; }$/;"	f	class:LightGBM::ScoreUpdater
has_init_score_	src/boosting/score_updater.hpp	/^  bool has_init_score_;$/;"	m	class:LightGBM::ScoreUpdater
has_ordered_bin_	src/treelearner/serial_tree_learner.h	/^  bool has_ordered_bin_ = false;$/;"	m	class:LightGBM::SerialTreeLearner
has_shape	src/io/json11.cpp	/^bool Json::has_shape(const shape & types, string & err) const {$/;"	f	class:json11::Json
hashtab	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *hashtab;$/;"	m	struct:lgbm_envsxp	typeref:struct:lgbm_envsxp::LGBM_SER
help	docs/make.bat	/^:help$/;"	l
hessians_	src/boosting/gbdt.h	/^  std::vector<score_t> hessians_;$/;"	m	class:LightGBM::GBDT
hessians_	src/treelearner/serial_tree_learner.h	/^  const score_t* hessians_;$/;"	m	class:LightGBM::SerialTreeLearner
hessians_future_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::event hessians_future_;$/;"	m	class:LightGBM::GPUTreeLearner
hist_bin_entry_sz_	src/treelearner/gpu_tree_learner.h	/^  size_t hist_bin_entry_sz_;$/;"	m	class:LightGBM::GPUTreeLearner
hist_time	src/treelearner/serial_tree_learner.cpp	/^std::chrono::duration<double, std::milli> hist_time;$/;"	m	namespace:LightGBM	file:
histogram_allfeats_kernels_	src/treelearner/gpu_tree_learner.h	/^  std::vector<boost::compute::kernel> histogram_allfeats_kernels_;$/;"	m	class:LightGBM::GPUTreeLearner
histogram_fulldata_kernels_	src/treelearner/gpu_tree_learner.h	/^  std::vector<boost::compute::kernel> histogram_fulldata_kernels_;$/;"	m	class:LightGBM::GPUTreeLearner
histogram_kernels_	src/treelearner/gpu_tree_learner.h	/^  std::vector<boost::compute::kernel> histogram_kernels_;$/;"	m	class:LightGBM::GPUTreeLearner
histogram_pool_	src/treelearner/serial_tree_learner.h	/^  HistogramPool histogram_pool_;$/;"	m	class:LightGBM::SerialTreeLearner
histogram_pool_size	include/LightGBM/config.h	/^  double histogram_pool_size = -1.0;$/;"	m	struct:LightGBM::TreeConfig
histograms_wait_obj_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::wait_list histograms_wait_obj_;$/;"	m	class:LightGBM::GPUTreeLearner
host_histogram_outputs_	src/treelearner/gpu_tree_learner.h	/^  void * host_histogram_outputs_;$/;"	m	class:LightGBM::GPUTreeLearner
html_static_path	docs/conf.py	/^html_static_path = ['_static']$/;"	v
html_theme	docs/conf.py	/^html_theme = 'sphinx_rtd_theme'$/;"	v
htmlhelp_basename	docs/conf.py	/^htmlhelp_basename = 'LightGBMdoc'$/;"	v
i	src/io/json11.cpp	/^    size_t i;$/;"	m	struct:json11::__anon3::final	file:
i	src/treelearner/gpu_tree_learner.cpp	/^    int64_t i;$/;"	m	union:LightGBM::Float_t	file:
i_delta_	src/io/sparse_bin.hpp	/^  data_size_t i_delta_;$/;"	m	class:LightGBM::SparseBinIterator
ignore_column	include/LightGBM/config.h	/^  std::string ignore_column = "";$/;"	m	struct:LightGBM::IOConfig
ignore_features_	include/LightGBM/dataset_loader.h	/^  std::unordered_set<int> ignore_features_;$/;"	m	class:LightGBM::DatasetLoader
image	python-package/lightgbm/plotting.py	/^        import matplotlib.image as image$/;"	i
in_range	src/io/json11.cpp	/^static inline bool in_range(long x, long lower, long upper) {$/;"	f	namespace:json11
in_ranks	include/LightGBM/network.h	/^  std::vector<int> in_ranks;$/;"	m	class:LightGBM::BruckMap
indices	src/treelearner/data_partition.hpp	/^  const data_size_t* indices() const { return indices_.data(); }$/;"	f	class:LightGBM::DataPartition
indices_	src/treelearner/data_partition.hpp	/^  std::vector<data_size_t> indices_;$/;"	m	class:LightGBM::DataPartition
indices_future_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::future<void> indices_future_;$/;"	m	class:LightGBM::GPUTreeLearner
inet_pton	src/network/socket_wrapper.hpp	/^inline int inet_pton(int af, const char *src, void *dst)$/;"	f	namespace:LightGBM
init	python-package/lightgbm/callback.py	/^    def init(env):$/;"	f	function:early_stopping
init	python-package/lightgbm/callback.py	/^    def init(env):$/;"	f	function:record_evaluation
init_model	examples/python-guide/advanced_example.py	/^                init_model='model.txt',$/;"	v
init_model	examples/python-guide/advanced_example.py	/^                init_model=gbm,$/;"	v
init_score	include/LightGBM/dataset.h	/^  inline const double* init_score() const {$/;"	f	class:LightGBM::Metadata
init_score_	include/LightGBM/dataset.h	/^  std::vector<double> init_score_;$/;"	m	class:LightGBM::Metadata
init_score_load_from_file_	include/LightGBM/dataset.h	/^  bool init_score_load_from_file_;$/;"	m	class:LightGBM::Metadata
init_split_time	src/treelearner/serial_tree_learner.cpp	/^std::chrono::duration<double, std::milli> init_split_time;$/;"	m	namespace:LightGBM	file:
init_train_time	src/treelearner/serial_tree_learner.cpp	/^std::chrono::duration<double, std::milli> init_train_time;$/;"	m	namespace:LightGBM	file:
initialize_options	python-package/setup.py	/^    def initialize_options(self):$/;"	m	class:CustomInstall
initscore_filename	include/LightGBM/config.h	/^  std::string initscore_filename = "";$/;"	m	struct:LightGBM::IOConfig
inner	python-package/lightgbm/sklearn.py	/^    def inner(preds, dataset):$/;"	f	function:_eval_function_wrapper
inner	python-package/lightgbm/sklearn.py	/^    def inner(preds, dataset):$/;"	f	function:_objective_function_wrapper
input_buffer_	src/treelearner/parallel_tree_learner.h	/^  std::vector<char> input_buffer_;$/;"	m	class:LightGBM::DataParallelTreeLearner
input_buffer_	src/treelearner/parallel_tree_learner.h	/^  std::vector<char> input_buffer_;$/;"	m	class:LightGBM::FeatureParallelTreeLearner
input_buffer_	src/treelearner/parallel_tree_learner.h	/^  std::vector<char> input_buffer_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
input_model	include/LightGBM/config.h	/^  std::string input_model = "";$/;"	m	struct:LightGBM::IOConfig
inspect	python-package/lightgbm/compat.py	/^import inspect$/;"	i
install	python-package/setup.py	/^    def install(self):$/;"	m	class:CustomInstallLib
install	python-package/setup.py	/^from setuptools.command.install import install$/;"	i
install_lib	python-package/setup.py	/^from setuptools.command.install_lib import install_lib$/;"	i
int_value	src/io/json11.cpp	/^int                       JsonValue::int_value()                 const { return 0; }$/;"	f	class:json11::JsonValue
int_value	src/io/json11.cpp	/^int Json::int_value()                             const { return m_ptr->int_value();    }$/;"	f	class:json11::Json
integer_types	python-package/lightgbm/compat.py	/^    integer_types = (int, )$/;"	v
integer_types	python-package/lightgbm/compat.py	/^    integer_types = (int, long)$/;"	v
internal	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *internal;$/;"	m	struct:lgbm_symsxp	typeref:struct:lgbm_symsxp::LGBM_SER
internal_count_	include/LightGBM/tree.h	/^  std::vector<int> internal_count_;$/;"	m	class:LightGBM::Tree
internal_value_	include/LightGBM/tree.h	/^  std::vector<double> internal_value_;$/;"	m	class:LightGBM::Tree
inverse_mapper_	src/treelearner/feature_histogram.hpp	/^  std::vector<int> inverse_mapper_;$/;"	m	class:LightGBM::HistogramPool
inverse_max_dcgs_	src/metric/rank_metric.hpp	/^  std::vector<std::vector<double>> inverse_max_dcgs_;$/;"	m	class:LightGBM::NDCGMetric
inverse_max_dcgs_	src/objective/IPWi_rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
inverse_max_dcgs_	src/objective/IPWij_rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
inverse_max_dcgs_	src/objective/SCOREwy_rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
inverse_max_dcgs_	src/objective/SCOREzn_rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
inverse_max_dcgs_	src/objective/e2e_IPWi_rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
inverse_max_dcgs_	src/objective/e2e_IPWij_rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
inverse_max_dcgs_	src/objective/rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
inverse_max_dcgs_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
inverse_max_dcgs_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
inverse_max_dcgs_	src/objective/zinu/ndcg_rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
inverse_max_dcgs_	src/objective/zinu/score_rank_objective.hpp	/^  std::vector<double> inverse_max_dcgs_;$/;"	m	class:LightGBM::LambdarankNDCG
io_config	include/LightGBM/config.h	/^  IOConfig io_config;$/;"	m	struct:LightGBM::OverallConfig
io_config_	include/LightGBM/dataset_loader.h	/^  const IOConfig& io_config_;$/;"	m	class:LightGBM::DatasetLoader
is_1d_list	python-package/lightgbm/basic.py	/^def is_1d_list(data):$/;"	f
is_array	include/LightGBM/json11.hpp	/^    bool is_array()  const { return type() == ARRAY; }$/;"	f	class:json11::final
is_bool	include/LightGBM/json11.hpp	/^    bool is_bool()   const { return type() == BOOL; }$/;"	f	class:json11::final
is_constant_hessian_	src/boosting/gbdt.h	/^  bool is_constant_hessian_;$/;"	m	class:LightGBM::GBDT
is_constant_hessian_	src/treelearner/serial_tree_learner.h	/^  bool is_constant_hessian_;$/;"	m	class:LightGBM::SerialTreeLearner
is_correctly_constrained	tests/python_package_test/test_engine.py	/^        def is_correctly_constrained(learner):$/;"	f	function:TestEngine.test_monotone_constraint
is_data_in_leaf_	src/treelearner/serial_tree_learner.h	/^  std::vector<char> is_data_in_leaf_;$/;"	m	class:LightGBM::SerialTreeLearner
is_decreasing	tests/python_package_test/test_engine.py	/^        def is_decreasing(y):$/;"	f	function:TestEngine.test_monotone_constraint
is_enable_sparse	include/LightGBM/config.h	/^  bool is_enable_sparse = true;$/;"	m	struct:LightGBM::IOConfig
is_end_	src/c_api.cpp	/^  bool is_end_ = false;$/;"	m	class:CSC_RowIterator	file:
is_enough_	src/treelearner/feature_histogram.hpp	/^  bool is_enough_ = false;$/;"	m	class:LightGBM::HistogramPool
is_feature_aggregated_	src/treelearner/parallel_tree_learner.h	/^  std::vector<bool> is_feature_aggregated_;$/;"	m	class:LightGBM::DataParallelTreeLearner
is_feature_used_	src/treelearner/serial_tree_learner.h	/^  std::vector<int8_t> is_feature_used_;$/;"	m	class:LightGBM::SerialTreeLearner
is_finish_load_	include/LightGBM/dataset.h	/^  bool is_finish_load_;$/;"	m	class:LightGBM::Dataset
is_increasing	tests/python_package_test/test_engine.py	/^        def is_increasing(y):$/;"	f	function:TestEngine.test_monotone_constraint
is_init_	src/network/linkers.h	/^  bool is_init_;$/;"	m	class:LightGBM::Linkers
is_null	include/LightGBM/json11.hpp	/^    bool is_null()   const { return type() == NUL; }$/;"	f	class:json11::final
is_number	include/LightGBM/json11.hpp	/^    bool is_number() const { return type() == NUMBER; }$/;"	f	class:json11::final
is_numeric	python-package/lightgbm/basic.py	/^def is_numeric(obj):$/;"	f
is_numpy_1d_array	python-package/lightgbm/basic.py	/^def is_numpy_1d_array(data):$/;"	f
is_object	include/LightGBM/json11.hpp	/^    bool is_object() const { return type() == OBJECT; }$/;"	f	class:json11::final
is_parallel	include/LightGBM/config.h	/^  bool is_parallel = false;$/;"	m	struct:LightGBM::OverallConfig
is_parallel_find_bin	include/LightGBM/config.h	/^  bool is_parallel_find_bin = false;$/;"	m	struct:LightGBM::OverallConfig
is_pos_	src/objective/binary_objective.hpp	/^  std::function<bool(label_t)> is_pos_;$/;"	m	class:LightGBM::BinaryLogloss
is_power_of_2	include/LightGBM/network.h	/^  bool is_power_of_2;$/;"	m	class:LightGBM::RecursiveHalvingMap
is_pre_partition	include/LightGBM/config.h	/^  bool is_pre_partition = false;$/;"	m	struct:LightGBM::IOConfig
is_predict_contrib	include/LightGBM/config.h	/^  bool is_predict_contrib = false;$/;"	m	struct:LightGBM::IOConfig
is_predict_leaf_index	include/LightGBM/config.h	/^  bool is_predict_leaf_index = false;$/;"	m	struct:LightGBM::IOConfig
is_predict_raw_score	include/LightGBM/config.h	/^  bool is_predict_raw_score = false;$/;"	m	struct:LightGBM::IOConfig
is_provide_training_metric	include/LightGBM/config.h	/^  bool is_provide_training_metric = false;$/;"	m	struct:LightGBM::BoostingConfig
is_py3	python-package/lightgbm/compat.py	/^is_py3 = (sys.version_info[0] == 3)$/;"	v
is_save_binary_file	include/LightGBM/config.h	/^  bool is_save_binary_file = false;$/;"	m	struct:LightGBM::IOConfig
is_skip_first_line_	include/LightGBM/utils/text_reader.h	/^  bool is_skip_first_line_ = false;$/;"	m	class:LightGBM::TextReader
is_sparse_	include/LightGBM/feature_group.h	/^  bool is_sparse_;$/;"	m	class:LightGBM::FeatureGroup
is_splittable	src/treelearner/feature_histogram.hpp	/^  bool is_splittable() { return is_splittable_; }$/;"	f	class:LightGBM::FeatureHistogram
is_splittable_	src/treelearner/feature_histogram.hpp	/^  bool is_splittable_ = true;$/;"	m	class:LightGBM::FeatureHistogram
is_string	include/LightGBM/json11.hpp	/^    bool is_string() const { return type() == STRING; }$/;"	f	class:json11::final
is_trival	include/LightGBM/bin.h	/^  inline bool is_trival() const { return is_trival_; }$/;"	f	class:LightGBM::BinMapper
is_trival_	include/LightGBM/bin.h	/^  bool is_trival_;$/;"	m	class:LightGBM::BinMapper
is_unbalance	include/LightGBM/config.h	/^  bool is_unbalance = false;$/;"	m	struct:LightGBM::ObjectiveConfig
is_unbalance_	src/objective/binary_objective.hpp	/^  bool is_unbalance_;$/;"	m	class:LightGBM::BinaryLogloss
is_update_score_cur_iter_	src/boosting/dart.hpp	/^  bool is_update_score_cur_iter_;$/;"	m	class:LightGBM::DART
is_use_subset_	src/boosting/gbdt.h	/^  bool is_use_subset_;$/;"	m	class:LightGBM::GBDT
iter_	src/boosting/gbdt.h	/^  int iter_;$/;"	m	class:LightGBM::GBDT
iter_fun_	src/c_api.cpp	/^  std::function<std::pair<int, double>(int idx)> iter_fun_;$/;"	m	class:CSC_RowIterator	file:
iteration_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable int iteration_;$/;"	m	class:LightGBM::LambdarankNDCG
joblib	tests/python_package_test/test_sklearn.py	/^from sklearn.externals import joblib$/;"	i
json	examples/python-guide/advanced_example.py	/^import json$/;"	i
json	examples/python-guide/simple_example.py	/^import json$/;"	i
json	python-package/lightgbm/compat.py	/^    import json$/;"	i
json	python-package/lightgbm/compat.py	/^    import simplejson as json$/;"	i
json11	include/LightGBM/json11.hpp	/^namespace json11 {$/;"	n
json11	src/io/json11.cpp	/^namespace json11 {$/;"	n	file:
json_default_with_numpy	python-package/lightgbm/compat.py	/^def json_default_with_numpy(obj):$/;"	f
k	include/LightGBM/network.h	/^  int k;$/;"	m	class:LightGBM::BruckMap
k	include/LightGBM/network.h	/^  int k;$/;"	m	class:LightGBM::RecursiveHalvingMap
kCategoricalMask	include/LightGBM/tree.h	/^#define kCategoricalMask /;"	d
kConvertModel	include/LightGBM/config.h	/^  kTrain, kPredict, kConvertModel, KRefitTree$/;"	e	enum:LightGBM::TaskType
kDefaultBoostingType	include/LightGBM/config.h	/^const std::string kDefaultBoostingType = "gbdt";$/;"	m	namespace:LightGBM
kDefaultDevice	include/LightGBM/config.h	/^const std::string kDefaultDevice = "cpu";$/;"	m	namespace:LightGBM
kDefaultLeftMask	include/LightGBM/tree.h	/^#define kDefaultLeftMask /;"	d
kDefaultNumLeaves	include/LightGBM/config.h	/^const int kDefaultNumLeaves = 31;$/;"	m	namespace:LightGBM
kDefaultObjectiveType	include/LightGBM/config.h	/^const std::string kDefaultObjectiveType = "regression";$/;"	m	namespace:LightGBM
kDefaultTreeLearnerType	include/LightGBM/config.h	/^const std::string kDefaultTreeLearnerType = "serial";$/;"	m	namespace:LightGBM
kEpsilon	include/LightGBM/meta.h	/^const score_t kEpsilon = 1e-15f;$/;"	m	namespace:LightGBM
kHdfsProto	src/io/file_io.cpp	/^const std::string kHdfsProto = "hdfs:\/\/";$/;"	m	namespace:LightGBM	file:
kMaxLogWorkgroupsPerFeature	src/treelearner/gpu_tree_learner.h	/^  const int kMaxLogWorkgroupsPerFeature = 10; \/\/ 2^10$/;"	m	class:LightGBM::GPUTreeLearner
kMaxPosition	include/LightGBM/metric.h	/^  static const data_size_t kMaxPosition;$/;"	m	class:LightGBM::DCGCalculator
kMaxPosition	src/metric/dcg_calculator.cpp	/^const data_size_t DCGCalculator::kMaxPosition = 10000;$/;"	m	class:LightGBM::DCGCalculator	file:
kMaxReceiveSize	src/network/socket_wrapper.hpp	/^const int kMaxReceiveSize = 100 * 1000;$/;"	m	namespace:LightGBM::SocketConfig
kMinScore	include/LightGBM/meta.h	/^const score_t kMinScore = -std::numeric_limits<score_t>::infinity();$/;"	m	namespace:LightGBM
kModelVersion	src/boosting/gbdt_model_text.cpp	/^const std::string kModelVersion = "v2";$/;"	m	namespace:LightGBM	file:
kNoDelay	src/network/socket_wrapper.hpp	/^const bool kNoDelay = true;$/;"	m	namespace:LightGBM::SocketConfig
kNumFastIndex	src/io/sparse_bin.hpp	/^const size_t kNumFastIndex = 64;$/;"	m	namespace:LightGBM
kPredict	include/LightGBM/config.h	/^  kTrain, kPredict, kConvertModel, KRefitTree$/;"	e	enum:LightGBM::TaskType
kSocketBufferSize	src/network/socket_wrapper.hpp	/^const int kSocketBufferSize = 100 * 1000;$/;"	m	namespace:LightGBM::SocketConfig
kTrain	include/LightGBM/config.h	/^  kTrain, kPredict, kConvertModel, KRefitTree$/;"	e	enum:LightGBM::TaskType
kZeroThreshold	include/LightGBM/meta.h	/^const double kZeroThreshold = 1e-35f;$/;"	m	namespace:LightGBM
kernel16_src_	src/treelearner/gpu_tree_learner.h	/^  const char *kernel16_src_ = $/;"	m	class:LightGBM::GPUTreeLearner
kernel256_src_	src/treelearner/gpu_tree_learner.h	/^  const char *kernel256_src_ = $/;"	m	class:LightGBM::GPUTreeLearner
kernel64_src_	src/treelearner/gpu_tree_learner.h	/^  const char *kernel64_src_ = $/;"	m	class:LightGBM::GPUTreeLearner
kernel_name_	src/treelearner/gpu_tree_learner.h	/^  std::string kernel_name_;$/;"	m	class:LightGBM::GPUTreeLearner
kernel_source_	src/treelearner/gpu_tree_learner.h	/^  std::string kernel_source_;$/;"	m	class:LightGBM::GPUTreeLearner
kernel_wait_obj_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::wait_list kernel_wait_obj_;$/;"	m	class:LightGBM::GPUTreeLearner
label	include/LightGBM/dataset.h	/^  inline const label_t* label() const { return label_.data(); }$/;"	f	class:LightGBM::Metadata
label_	include/LightGBM/dataset.h	/^  std::vector<label_t> label_;$/;"	m	class:LightGBM::Metadata
label_	src/metric/binary_metric.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::AUCMetric
label_	src/metric/binary_metric.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::BinaryMetric
label_	src/metric/map_metric.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::MapMetric
label_	src/metric/multiclass_metric.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::MulticlassMetric
label_	src/metric/rank_metric.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::NDCGMetric
label_	src/metric/regression_metric.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::RegressionMetric
label_	src/metric/xentropy_metric.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::CrossEntropyLambdaMetric
label_	src/metric/xentropy_metric.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::CrossEntropyMetric
label_	src/metric/xentropy_metric.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::KullbackLeiblerDivergence
label_	src/objective/IPWi_rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_	src/objective/IPWij_rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_	src/objective/SCOREwy_rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_	src/objective/SCOREzn_rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_	src/objective/binary_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::BinaryLogloss
label_	src/objective/e2e_IPWi_rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_	src/objective/e2e_IPWij_rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_	src/objective/multiclass_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::MulticlassSoftmax
label_	src/objective/rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_	src/objective/regression_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::RegressionL2loss
label_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_	src/objective/xentropy_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::CrossEntropy
label_	src/objective/xentropy_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::CrossEntropyLambda
label_	src/objective/zinu/ndcg_rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_	src/objective/zinu/score_rank_objective.hpp	/^  const label_t* label_;$/;"	m	class:LightGBM::LambdarankNDCG
label_column	include/LightGBM/config.h	/^  std::string label_column = "";$/;"	m	struct:LightGBM::IOConfig
label_gain	include/LightGBM/config.h	/^  std::vector<double> label_gain;$/;"	m	struct:LightGBM::MetricConfig
label_gain	include/LightGBM/config.h	/^  std::vector<double> label_gain;$/;"	m	struct:LightGBM::ObjectiveConfig
label_gain_	include/LightGBM/metric.h	/^  static std::vector<double> label_gain_;$/;"	m	class:LightGBM::DCGCalculator
label_gain_	src/metric/dcg_calculator.cpp	/^std::vector<double> DCGCalculator::label_gain_;$/;"	m	class:LightGBM::DCGCalculator	file:
label_gain_	src/objective/IPWi_rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_gain_	src/objective/IPWij_rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_gain_	src/objective/SCOREwy_rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_gain_	src/objective/SCOREzn_rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_gain_	src/objective/e2e_IPWi_rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_gain_	src/objective/e2e_IPWij_rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_gain_	src/objective/rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_gain_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_gain_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_gain_	src/objective/zinu/ndcg_rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_gain_	src/objective/zinu/score_rank_objective.hpp	/^  std::vector<double> label_gain_;$/;"	m	class:LightGBM::LambdarankNDCG
label_idx	include/LightGBM/dataset.h	/^  inline int label_idx() const { return label_idx_; }$/;"	f	class:LightGBM::Dataset
label_idx_	include/LightGBM/dataset.h	/^  int label_idx_ = 0;$/;"	m	class:LightGBM::Dataset
label_idx_	include/LightGBM/dataset_loader.h	/^  int label_idx_;$/;"	m	class:LightGBM::DatasetLoader
label_idx_	src/boosting/gbdt.h	/^  data_size_t label_idx_;$/;"	m	class:LightGBM::GBDT
label_idx_	src/io/parser.hpp	/^  int label_idx_ = 0;$/;"	m	class:LightGBM::CSVParser
label_idx_	src/io/parser.hpp	/^  int label_idx_ = 0;$/;"	m	class:LightGBM::LibSVMParser
label_idx_	src/io/parser.hpp	/^  int label_idx_ = 0;$/;"	m	class:LightGBM::TSVParser
label_int_	src/objective/multiclass_objective.hpp	/^  std::vector<int> label_int_;$/;"	m	class:LightGBM::MulticlassSoftmax
label_t	include/LightGBM/meta.h	/^typedef double label_t;$/;"	t	namespace:LightGBM
label_t	include/LightGBM/meta.h	/^typedef float label_t;$/;"	t	namespace:LightGBM
label_val_	src/objective/binary_objective.hpp	/^  int label_val_[2];$/;"	m	class:LightGBM::BinaryLogloss
label_weight_	src/objective/regression_objective.hpp	/^  std::vector<label_t> label_weight_;$/;"	m	class:LightGBM::RegressionMAPELOSS
label_weights_	src/objective/binary_objective.hpp	/^  double label_weights_[2];$/;"	m	class:LightGBM::BinaryLogloss
lambda_l1	include/LightGBM/config.h	/^  double lambda_l1 = 0.0;$/;"	m	struct:LightGBM::TreeConfig
lambda_l2	include/LightGBM/config.h	/^  double lambda_l2 = 0.0;$/;"	m	struct:LightGBM::TreeConfig
language	docs/conf.py	/^language = None$/;"	v
larger_buffer_read_start_pos_	src/treelearner/parallel_tree_learner.h	/^  std::vector<comm_size_t> larger_buffer_read_start_pos_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
larger_is_feature_aggregated_	src/treelearner/parallel_tree_learner.h	/^  std::vector<bool> larger_is_feature_aggregated_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
larger_leaf_histogram_array_	src/treelearner/serial_tree_learner.h	/^  FeatureHistogram* larger_leaf_histogram_array_;$/;"	m	class:LightGBM::SerialTreeLearner
larger_leaf_histogram_array_global_	src/treelearner/parallel_tree_learner.h	/^  std::unique_ptr<FeatureHistogram[]> larger_leaf_histogram_array_global_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
larger_leaf_histogram_data_	src/treelearner/parallel_tree_learner.h	/^  std::vector<HistogramBinEntry> larger_leaf_histogram_data_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
larger_leaf_splits_	src/treelearner/serial_tree_learner.h	/^  std::unique_ptr<LeafSplits> larger_leaf_splits_;$/;"	m	class:LightGBM::SerialTreeLearner
larger_leaf_splits_global_	src/treelearner/parallel_tree_learner.h	/^  std::unique_ptr<LeafSplits> larger_leaf_splits_global_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
last_line_	include/LightGBM/utils/text_reader.h	/^  std::string last_line_;$/;"	m	class:LightGBM::TextReader
last_used_time_	src/treelearner/feature_histogram.hpp	/^  std::vector<int> last_used_time_;$/;"	m	class:LightGBM::HistogramPool
leaf_begin	src/treelearner/data_partition.hpp	/^  data_size_t leaf_begin(int leaf) const { return leaf_begin_[leaf]; }$/;"	f	class:LightGBM::DataPartition
leaf_begin_	src/treelearner/data_partition.hpp	/^  std::vector<data_size_t> leaf_begin_;$/;"	m	class:LightGBM::DataPartition
leaf_cnt_	src/io/ordered_sparse_bin.hpp	/^  std::vector<data_size_t> leaf_cnt_;$/;"	m	class:LightGBM::OrderedSparseBin
leaf_count	src/treelearner/data_partition.hpp	/^  data_size_t leaf_count(int leaf) const { return leaf_count_[leaf]; }$/;"	f	class:LightGBM::DataPartition
leaf_count_	include/LightGBM/tree.h	/^  std::vector<int> leaf_count_;$/;"	m	class:LightGBM::Tree
leaf_count_	src/treelearner/data_partition.hpp	/^  std::vector<data_size_t> leaf_count_;$/;"	m	class:LightGBM::DataPartition
leaf_depth	include/LightGBM/tree.h	/^  inline int leaf_depth(int leaf_idx) const { return leaf_depth_[leaf_idx]; }$/;"	f	class:LightGBM::Tree
leaf_depth_	include/LightGBM/tree.h	/^  std::vector<int> leaf_depth_;$/;"	m	class:LightGBM::Tree
leaf_index_	src/treelearner/leaf_splits.hpp	/^  int leaf_index_;$/;"	m	class:LightGBM::LeafSplits
leaf_parent_	include/LightGBM/tree.h	/^  std::vector<int> leaf_parent_;$/;"	m	class:LightGBM::Tree
leaf_start_	src/io/ordered_sparse_bin.hpp	/^  std::vector<data_size_t> leaf_start_;$/;"	m	class:LightGBM::OrderedSparseBin
leaf_value_	include/LightGBM/tree.h	/^  std::vector<double> leaf_value_;$/;"	m	class:LightGBM::Tree
learning_rate	examples/python-guide/sklearn_example.py	/^                        learning_rate=0.05,$/;"	v
learning_rate	include/LightGBM/config.h	/^  double learning_rate = 0.1;$/;"	m	struct:LightGBM::BoostingConfig
learning_rates	examples/python-guide/advanced_example.py	/^                learning_rates=lambda iter: 0.05 * (0.99 ** iter),$/;"	v
left_child_	include/LightGBM/tree.h	/^  std::vector<int> left_child_;$/;"	m	class:LightGBM::Tree
left_cnts_buf_	src/boosting/gbdt.h	/^  std::vector<data_size_t> left_cnts_buf_;$/;"	m	class:LightGBM::GBDT
left_cnts_buf_	src/treelearner/data_partition.hpp	/^  std::vector<data_size_t> left_cnts_buf_;$/;"	m	class:LightGBM::DataPartition
left_count	src/treelearner/split_info.hpp	/^  data_size_t left_count = 0;$/;"	m	struct:LightGBM::LightSplitInfo
left_count	src/treelearner/split_info.hpp	/^  data_size_t left_count = 0;$/;"	m	struct:LightGBM::SplitInfo
left_output	src/treelearner/split_info.hpp	/^  double left_output = 0.0;$/;"	m	struct:LightGBM::SplitInfo
left_sum_gradient	src/treelearner/split_info.hpp	/^  double left_sum_gradient = 0;$/;"	m	struct:LightGBM::SplitInfo
left_sum_hessian	src/treelearner/split_info.hpp	/^  double left_sum_hessian = 0;$/;"	m	struct:LightGBM::SplitInfo
left_write_pos_buf_	src/boosting/gbdt.h	/^  std::vector<data_size_t> left_write_pos_buf_;$/;"	m	class:LightGBM::GBDT
left_write_pos_buf_	src/treelearner/data_partition.hpp	/^  std::vector<data_size_t> left_write_pos_buf_;$/;"	m	class:LightGBM::DataPartition
length	include/LightGBM/R_object_helper.h	/^  R_xlen_t length;$/;"	m	struct:lgbm_vecsxp
lgb	examples/python-guide/advanced_example.py	/^import lightgbm as lgb$/;"	i
lgb	examples/python-guide/plot_example.py	/^import lightgbm as lgb$/;"	i
lgb	examples/python-guide/simple_example.py	/^import lightgbm as lgb$/;"	i
lgb	examples/python-guide/sklearn_example.py	/^import lightgbm as lgb$/;"	i
lgb	tests/python_package_test/test_basic.py	/^import lightgbm as lgb$/;"	i
lgb	tests/python_package_test/test_consistency.py	/^import lightgbm as lgb$/;"	i
lgb	tests/python_package_test/test_engine.py	/^import lightgbm as lgb$/;"	i
lgb	tests/python_package_test/test_plotting.py	/^import lightgbm as lgb$/;"	i
lgb	tests/python_package_test/test_sklearn.py	/^import lightgbm as lgb$/;"	i
lgb_eval	examples/python-guide/advanced_example.py	/^lgb_eval = lgb.Dataset(X_test, y_test, reference=lgb_train,$/;"	v
lgb_eval	examples/python-guide/simple_example.py	/^lgb_eval = lgb.Dataset(X_test, y_test, reference=lgb_train)$/;"	v
lgb_test	examples/python-guide/plot_example.py	/^lgb_test = lgb.Dataset(X_test, y_test, reference=lgb_train)$/;"	v
lgb_train	examples/python-guide/advanced_example.py	/^lgb_train = lgb.Dataset(X_train, y_train,$/;"	v
lgb_train	examples/python-guide/plot_example.py	/^lgb_train = lgb.Dataset(X_train, y_train)$/;"	v
lgb_train	examples/python-guide/simple_example.py	/^lgb_train = lgb.Dataset(X_train, y_train)$/;"	v
lgbm_closxp	include/LightGBM/R_object_helper.h	/^struct lgbm_closxp {$/;"	s
lgbm_envsxp	include/LightGBM/R_object_helper.h	/^struct lgbm_envsxp {$/;"	s
lgbm_listsxp	include/LightGBM/R_object_helper.h	/^struct lgbm_listsxp {$/;"	s
lgbm_primsxp	include/LightGBM/R_object_helper.h	/^struct lgbm_primsxp {$/;"	s
lgbm_promsxp	include/LightGBM/R_object_helper.h	/^struct lgbm_promsxp {$/;"	s
lgbm_sxpinfo	include/LightGBM/R_object_helper.h	/^struct lgbm_sxpinfo {$/;"	s
lgbm_symsxp	include/LightGBM/R_object_helper.h	/^struct lgbm_symsxp {$/;"	s
lgbm_vecsxp	include/LightGBM/R_object_helper.h	/^struct lgbm_vecsxp {$/;"	s
libpath	docs/conf.py	/^libpath = os.path.join(curr_path, '..\/python-package\/')$/;"	v
lines_	include/LightGBM/utils/text_reader.h	/^  std::vector<std::string> lines_;$/;"	m	class:LightGBM::TextReader
linkers_	include/LightGBM/network.h	/^  static THREAD_LOCAL std::unique_ptr<Linkers> linkers_;$/;"	m	class:LightGBM::Network
linkers_	src/network/linkers.h	/^  std::vector<std::unique_ptr<TcpSocket>> linkers_;$/;"	m	class:LightGBM::Linkers
linkers_	src/network/network.cpp	/^THREAD_LOCAL std::unique_ptr<Linkers> Network::linkers_;$/;"	m	class:LightGBM::Network	file:
list_to_1d_numpy	python-package/lightgbm/basic.py	/^def list_to_1d_numpy(data, dtype=np.float32, name='list'):$/;"	f
listener_	src/network/linkers.h	/^  std::unique_ptr<TcpSocket> listener_;$/;"	m	class:LightGBM::Linkers
listsxp	include/LightGBM/R_object_helper.h	/^    struct lgbm_listsxp listsxp;$/;"	m	union:LGBM_SER::__anon1	typeref:struct:LGBM_SER::__anon1::lgbm_listsxp
load_boston	tests/python_package_test/test_engine.py	/^from sklearn.datasets import (load_boston, load_breast_cancer, load_digits,$/;"	i
load_boston	tests/python_package_test/test_sklearn.py	/^from sklearn.datasets import (load_boston, load_breast_cancer, load_digits,$/;"	i
load_breast_cancer	tests/python_package_test/test_basic.py	/^from sklearn.datasets import load_breast_cancer, dump_svmlight_file$/;"	i
load_breast_cancer	tests/python_package_test/test_engine.py	/^from sklearn.datasets import (load_boston, load_breast_cancer, load_digits,$/;"	i
load_breast_cancer	tests/python_package_test/test_plotting.py	/^from sklearn.datasets import load_breast_cancer$/;"	i
load_breast_cancer	tests/python_package_test/test_sklearn.py	/^from sklearn.datasets import (load_boston, load_breast_cancer, load_digits,$/;"	i
load_cpp_result	tests/python_package_test/test_consistency.py	/^    def load_cpp_result(self, result_file='LightGBM_predict_result.txt'):$/;"	m	class:FileLoader
load_dataset	tests/python_package_test/test_consistency.py	/^    def load_dataset(self, suffix, is_sparse=False):$/;"	m	class:FileLoader
load_digits	tests/python_package_test/test_engine.py	/^from sklearn.datasets import (load_boston, load_breast_cancer, load_digits,$/;"	i
load_digits	tests/python_package_test/test_sklearn.py	/^from sklearn.datasets import (load_boston, load_breast_cancer, load_digits,$/;"	i
load_field	tests/python_package_test/test_consistency.py	/^    def load_field(self, suffix):$/;"	m	class:FileLoader
load_svmlight_file	tests/python_package_test/test_consistency.py	/^from sklearn.datasets import load_svmlight_file$/;"	i
loaded_objective_	src/boosting/gbdt.h	/^  std::unique_ptr<ObjectiveFunction> loaded_objective_;$/;"	m	class:LightGBM::GBDT
local_listen_port	include/LightGBM/config.h	/^  int local_listen_port = 12400;$/;"	m	struct:LightGBM::NetworkConfig
local_listen_port_	src/network/linkers.h	/^  int local_listen_port_;$/;"	m	class:LightGBM::Linkers
local_tree_config_	src/treelearner/parallel_tree_learner.h	/^  TreeConfig local_tree_config_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
lock_	include/LightGBM/utils/openmp_wrapper.h	/^  std::mutex lock_;$/;"	m	class:ThreadExceptionHelper
log_loss	tests/python_package_test/test_engine.py	/^from sklearn.metrics import log_loss, mean_absolute_error, mean_squared_error$/;"	i
log_loss	tests/python_package_test/test_sklearn.py	/^from sklearn.metrics import log_loss, mean_squared_error$/;"	i
log_notice	python-package/setup.py	/^    log_notice = "The full version of error log was saved into {0}".format(path_log)$/;"	v
logger	python-package/setup.py	/^    logger = logging.getLogger('LightGBM')$/;"	v
logging	python-package/setup.py	/^import logging$/;"	i
loglikelood	examples/python-guide/advanced_example.py	/^def loglikelood(preds, train_data):$/;"	f
logregobj	tests/python_package_test/test_sklearn.py	/^        def logregobj(y_true, y_pred):$/;"	f	function:TestSklearn.test_binary_classification_with_custom_objective
lt	python-package/lightgbm/callback.py	/^from operator import gt, lt$/;"	i
m_ptr	include/LightGBM/json11.hpp	/^    std::shared_ptr<JsonValue> m_ptr;$/;"	m	class:json11::final
m_value	src/io/json11.cpp	/^    const T m_value;$/;"	m	class:json11::Value	file:
machine_list_filename	include/LightGBM/config.h	/^  std::string machine_list_filename = "";$/;"	m	struct:LightGBM::NetworkConfig
machines	include/LightGBM/config.h	/^  std::string machines = "";$/;"	m	struct:LightGBM::NetworkConfig
main	src/main.cpp	/^int main(int argc, char** argv) { \/\/\/ 主函数$/;"	f
mapper_	src/treelearner/feature_histogram.hpp	/^  std::vector<int> mapper_;$/;"	m	class:LightGBM::HistogramPool
margin_threshold	include/LightGBM/prediction_early_stop.h	/^  double margin_threshold;$/;"	m	struct:LightGBM::PredictionEarlyStopConfig
mark	include/LightGBM/R_object_helper.h	/^  unsigned int mark : 1;$/;"	m	struct:lgbm_sxpinfo
master_doc	docs/conf.py	/^master_doc = 'index'$/;"	v
math	tests/python_package_test/test_engine.py	/^import math$/;"	i
math	tests/python_package_test/test_sklearn.py	/^import math$/;"	i
matplotlib	examples/python-guide/plot_example.py	/^    import matplotlib.pyplot as plt$/;"	i
matplotlib	python-package/lightgbm/plotting.py	/^        import matplotlib.image as image$/;"	i
matplotlib	python-package/lightgbm/plotting.py	/^        import matplotlib.pyplot as plt$/;"	i
matplotlib	tests/python_package_test/test_plotting.py	/^    import matplotlib$/;"	i
matplotlib_installed	tests/python_package_test/test_plotting.py	/^    matplotlib_installed = False$/;"	v
matplotlib_installed	tests/python_package_test/test_plotting.py	/^    matplotlib_installed = True$/;"	v
max_bin	include/LightGBM/config.h	/^  int max_bin = 255;$/;"	m	struct:LightGBM::IOConfig
max_bin_	src/io/dense_bin.hpp	/^  VAL_T max_bin_;$/;"	m	class:LightGBM::DenseBinIterator
max_bin_	src/io/dense_nbits_bin.hpp	/^  uint8_t max_bin_;$/;"	m	class:LightGBM::Dense4bitsBinIterator
max_bin_	src/io/sparse_bin.hpp	/^  VAL_T max_bin_;$/;"	m	class:LightGBM::SparseBinIterator
max_cat_threshold	include/LightGBM/config.h	/^  int max_cat_threshold = 32;$/;"	m	struct:LightGBM::TreeConfig
max_cat_to_onehot	include/LightGBM/config.h	/^  int max_cat_to_onehot = 4;$/;"	m	struct:LightGBM::TreeConfig
max_conflict_rate	include/LightGBM/config.h	/^  double max_conflict_rate = 0.0;$/;"	m	struct:LightGBM::IOConfig
max_constraint	src/treelearner/leaf_splits.hpp	/^  double max_constraint() const { return max_val_; }$/;"	f	class:LightGBM::LeafSplits
max_constraint	src/treelearner/split_info.hpp	/^  double max_constraint = std::numeric_limits<double>::max();$/;"	m	struct:LightGBM::SplitInfo
max_delta_step	include/LightGBM/config.h	/^  double max_delta_step = 0.0;$/;"	m	struct:LightGBM::TreeConfig
max_delta_step_	src/objective/regression_objective.hpp	/^  double max_delta_step_;$/;"	m	class:LightGBM::RegressionPoissonLoss
max_depth	include/LightGBM/config.h	/^  int max_depth = -1;$/;"	m	struct:LightGBM::TreeConfig
max_depth	src/io/json11.cpp	/^static const int max_depth = 200;$/;"	m	namespace:json11	file:
max_depth_	include/LightGBM/tree.h	/^  int max_depth_;$/;"	m	class:LightGBM::Tree
max_drop	include/LightGBM/config.h	/^  int max_drop = 50;$/;"	m	struct:LightGBM::BoostingConfig
max_feature_idx_	src/boosting/gbdt.h	/^  int max_feature_idx_;$/;"	m	class:LightGBM::GBDT
max_leaves_	include/LightGBM/tree.h	/^  int max_leaves_;$/;"	m	class:LightGBM::Tree
max_num_bin_	src/treelearner/gpu_tree_learner.h	/^  int max_num_bin_;$/;"	m	class:LightGBM::GPUTreeLearner
max_position	include/LightGBM/config.h	/^  int max_position = 20;$/;"	m	struct:LightGBM::ObjectiveConfig
max_sigmoid_input_	src/objective/IPWi_rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_sigmoid_input_	src/objective/IPWij_rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_sigmoid_input_	src/objective/SCOREwy_rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_sigmoid_input_	src/objective/SCOREzn_rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_sigmoid_input_	src/objective/e2e_IPWi_rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_sigmoid_input_	src/objective/e2e_IPWij_rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_sigmoid_input_	src/objective/rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_sigmoid_input_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_sigmoid_input_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_sigmoid_input_	src/objective/zinu/ndcg_rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_sigmoid_input_	src/objective/zinu/score_rank_objective.hpp	/^  double max_sigmoid_input_ = 50;$/;"	m	class:LightGBM::LambdarankNDCG
max_val_	include/LightGBM/bin.h	/^  double max_val_;$/;"	m	class:LightGBM::BinMapper
max_val_	src/treelearner/leaf_splits.hpp	/^  double max_val_;$/;"	m	class:LightGBM::LeafSplits
max_weight_	src/objective/xentropy_objective.hpp	/^  label_t max_weight_;$/;"	m	class:LightGBM::CrossEntropyLambda
mean_absolute_error	tests/python_package_test/test_engine.py	/^from sklearn.metrics import log_loss, mean_absolute_error, mean_squared_error$/;"	i
mean_squared_error	examples/python-guide/advanced_example.py	/^from sklearn.metrics import mean_squared_error$/;"	i
mean_squared_error	examples/python-guide/simple_example.py	/^from sklearn.metrics import mean_squared_error$/;"	i
mean_squared_error	examples/python-guide/sklearn_example.py	/^from sklearn.metrics import mean_squared_error$/;"	i
mean_squared_error	tests/python_package_test/test_engine.py	/^from sklearn.metrics import log_loss, mean_absolute_error, mean_squared_error$/;"	i
mean_squared_error	tests/python_package_test/test_sklearn.py	/^from sklearn.metrics import log_loss, mean_squared_error$/;"	i
message	docs/conf.py	/^    message = 'This project needs at least Sphinx v%s' % needs_sphinx$/;"	v
meta_	src/treelearner/feature_histogram.hpp	/^  const FeatureMetainfo* meta_;$/;"	m	class:LightGBM::FeatureHistogram
metadata	include/LightGBM/dataset.h	/^  inline const Metadata& metadata() const { return metadata_; }$/;"	f	class:LightGBM::Dataset
metadata_	include/LightGBM/dataset.h	/^  Metadata metadata_;$/;"	m	class:LightGBM::Dataset
metric_config	include/LightGBM/config.h	/^  MetricConfig metric_config;$/;"	m	struct:LightGBM::OverallConfig
metric_time	src/boosting/gbdt.cpp	/^std::chrono::duration<double, std::milli> metric_time;$/;"	m	namespace:LightGBM	file:
metric_types	include/LightGBM/config.h	/^  std::vector<std::string> metric_types;$/;"	m	struct:LightGBM::OverallConfig
min_bin_	src/io/dense_bin.hpp	/^  VAL_T min_bin_;$/;"	m	class:LightGBM::DenseBinIterator
min_bin_	src/io/dense_nbits_bin.hpp	/^  uint8_t min_bin_;$/;"	m	class:LightGBM::Dense4bitsBinIterator
min_bin_	src/io/sparse_bin.hpp	/^  VAL_T min_bin_;$/;"	m	class:LightGBM::SparseBinIterator
min_constraint	src/treelearner/leaf_splits.hpp	/^  double min_constraint() const { return min_val_; }$/;"	f	class:LightGBM::LeafSplits
min_constraint	src/treelearner/split_info.hpp	/^  double min_constraint = -std::numeric_limits<double>::max();$/;"	m	struct:LightGBM::SplitInfo
min_data_in_bin	include/LightGBM/config.h	/^  int min_data_in_bin = 3;$/;"	m	struct:LightGBM::IOConfig
min_data_in_leaf	include/LightGBM/config.h	/^  int min_data_in_leaf = 20;$/;"	m	struct:LightGBM::IOConfig
min_data_in_leaf	include/LightGBM/config.h	/^  int min_data_in_leaf = 20;$/;"	m	struct:LightGBM::TreeConfig
min_data_per_group	include/LightGBM/config.h	/^  int min_data_per_group = 100;$/;"	m	struct:LightGBM::TreeConfig
min_gain_to_split	include/LightGBM/config.h	/^  double min_gain_to_split = 0.0;$/;"	m	struct:LightGBM::TreeConfig
min_sigmoid_input_	src/objective/IPWi_rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sigmoid_input_	src/objective/IPWij_rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sigmoid_input_	src/objective/SCOREwy_rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sigmoid_input_	src/objective/SCOREzn_rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sigmoid_input_	src/objective/e2e_IPWi_rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sigmoid_input_	src/objective/e2e_IPWij_rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sigmoid_input_	src/objective/rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sigmoid_input_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sigmoid_input_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sigmoid_input_	src/objective/zinu/ndcg_rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sigmoid_input_	src/objective/zinu/score_rank_objective.hpp	/^  double min_sigmoid_input_ = -50;$/;"	m	class:LightGBM::LambdarankNDCG
min_sum_hessian_in_leaf	include/LightGBM/config.h	/^  double min_sum_hessian_in_leaf = 1e-3;$/;"	m	struct:LightGBM::TreeConfig
min_val_	include/LightGBM/bin.h	/^  double min_val_;$/;"	m	class:LightGBM::BinMapper
min_val_	src/treelearner/leaf_splits.hpp	/^  double min_val_;$/;"	m	class:LightGBM::LeafSplits
min_weight_	src/objective/xentropy_objective.hpp	/^  label_t min_weight_;$/;"	m	class:LightGBM::CrossEntropyLambda
missing_type	include/LightGBM/bin.h	/^  inline MissingType missing_type() const { return missing_type_; }$/;"	f	class:LightGBM::BinMapper
missing_type	src/treelearner/feature_histogram.hpp	/^  MissingType missing_type;$/;"	m	class:LightGBM::FeatureMetainfo
missing_type_	include/LightGBM/bin.h	/^  MissingType missing_type_;$/;"	m	class:LightGBM::BinMapper
mode_	src/io/file_io.cpp	/^  const std::string mode_;$/;"	m	struct:LightGBM::LocalFile	file:
model_json	examples/python-guide/advanced_example.py	/^model_json = gbm.dump_model()$/;"	v
models_	src/boosting/gbdt.h	/^  std::vector<std::unique_ptr<Tree>> models_;$/;"	m	class:LightGBM::GBDT
monotone_constraints	include/LightGBM/config.h	/^  std::vector<int8_t> monotone_constraints;$/;"	m	struct:LightGBM::IOConfig
monotone_type	src/treelearner/feature_histogram.hpp	/^  int8_t monotone_type;$/;"	m	class:LightGBM::FeatureMetainfo
monotone_type	src/treelearner/split_info.hpp	/^  int8_t monotone_type = 0;$/;"	m	struct:LightGBM::SplitInfo
monotone_types_	include/LightGBM/dataset.h	/^  std::vector<int8_t> monotone_types_;$/;"	m	class:LightGBM::Dataset
multi_error	tests/python_package_test/test_sklearn.py	/^def multi_error(y_true, y_pred):$/;"	f
multi_logloss	tests/python_package_test/test_engine.py	/^def multi_logloss(y_true, y_pred):$/;"	f
multi_logloss	tests/python_package_test/test_sklearn.py	/^def multi_logloss(y_true, y_pred):$/;"	f
mutex_	include/LightGBM/dataset.h	/^  std::mutex mutex_;$/;"	m	class:LightGBM::Metadata
mutex_	src/c_api.cpp	/^  std::mutex mutex_;$/;"	m	class:LightGBM::Booster	file:
n_classes_	python-package/lightgbm/sklearn.py	/^    def n_classes_(self):$/;"	m	class:LGBMClassifier
n_estimators	examples/python-guide/sklearn_example.py	/^                        n_estimators=20)$/;"	v
n_features_	python-package/lightgbm/sklearn.py	/^    def n_features_(self):$/;"	m	class:LGBMModel
name_	src/metric/binary_metric.hpp	/^  std::vector<std::string> name_;$/;"	m	class:LightGBM::AUCMetric
name_	src/metric/binary_metric.hpp	/^  std::vector<std::string> name_;$/;"	m	class:LightGBM::BinaryMetric
name_	src/metric/map_metric.hpp	/^  std::vector<std::string> name_;$/;"	m	class:LightGBM::MapMetric
name_	src/metric/multiclass_metric.hpp	/^  std::vector<std::string> name_;$/;"	m	class:LightGBM::MulticlassMetric
name_	src/metric/rank_metric.hpp	/^  std::vector<std::string> name_;$/;"	m	class:LightGBM::NDCGMetric
name_	src/metric/regression_metric.hpp	/^  std::vector<std::string> name_;$/;"	m	class:LightGBM::RegressionMetric
name_	src/metric/xentropy_metric.hpp	/^  std::vector<std::string> name_;$/;"	m	class:LightGBM::CrossEntropyLambdaMetric
name_	src/metric/xentropy_metric.hpp	/^  std::vector<std::string> name_;$/;"	m	class:LightGBM::CrossEntropyMetric
name_	src/metric/xentropy_metric.hpp	/^  std::vector<std::string> name_;$/;"	m	class:LightGBM::KullbackLeiblerDivergence
named	include/LightGBM/R_object_helper.h	/^  unsigned int named : 2;$/;"	m	struct:lgbm_sxpinfo
named	include/LightGBM/R_object_helper.h	/^  unsigned int named : NAMED_BITS;$/;"	m	struct:lgbm_sxpinfo
need_re_bagging_	src/boosting/gbdt.h	/^  bool need_re_bagging_;$/;"	m	class:LightGBM::GBDT
needs_sphinx	docs/conf.py	/^needs_sphinx = '1.3'  # Due to sphinx.ext.napoleon$/;"	v
neighbor	include/LightGBM/network.h	/^  int neighbor;$/;"	m	class:LightGBM::RecursiveHalvingMap
network_config	include/LightGBM/config.h	/^  NetworkConfig network_config;$/;"	m	struct:LightGBM::OverallConfig
network_time_	src/network/linkers.h	/^  std::chrono::duration<double, std::milli> network_time_;$/;"	m	class:LightGBM::Linkers
noexcept	include/LightGBM/json11.hpp	/^            #define noexcept /;"	d
noexcept	include/LightGBM/json11.hpp	/^    Json() noexcept;                \/\/ NUL$/;"	m	class:json11::final
noexcept	include/LightGBM/json11.hpp	/^    Json(std::nullptr_t) noexcept;  \/\/ NUL$/;"	m	class:json11::final
nonzero_idx_	src/c_api.cpp	/^  int nonzero_idx_ = 0;$/;"	m	class:CSC_RowIterator	file:
np	examples/python-guide/advanced_example.py	/^import numpy as np$/;"	i
np	python-package/lightgbm/basic.py	/^import numpy as np$/;"	i
np	python-package/lightgbm/compat.py	/^import numpy as np$/;"	i
np	python-package/lightgbm/engine.py	/^import numpy as np$/;"	i
np	python-package/lightgbm/plotting.py	/^import numpy as np$/;"	i
np	python-package/lightgbm/sklearn.py	/^import numpy as np$/;"	i
np	tests/c_api_test/test_.py	/^import numpy as np$/;"	i
np	tests/cpp_test/test.py	/^import numpy as np$/;"	i
np	tests/python_package_test/test_basic.py	/^import numpy as np$/;"	i
np	tests/python_package_test/test_consistency.py	/^import numpy as np$/;"	i
np	tests/python_package_test/test_engine.py	/^import numpy as np$/;"	i
np	tests/python_package_test/test_sklearn.py	/^import numpy as np$/;"	i
npos_per_query_	src/metric/map_metric.hpp	/^  std::vector<data_size_t> npos_per_query_;$/;"	m	class:LightGBM::MapMetric
nuget_file	.nuget/create_nuget.py	/^nuget_file = open("LightGBM.nuspec", "w")$/;"	v
null	src/io/json11.cpp	/^    const std::shared_ptr<JsonValue> null = make_shared<JsonNull>();$/;"	m	struct:json11::Statics	file:
num_bin	include/LightGBM/bin.h	/^  inline int num_bin() const { return num_bin_; }$/;"	f	class:LightGBM::BinMapper
num_bin	src/treelearner/feature_histogram.hpp	/^  int num_bin;$/;"	m	class:LightGBM::FeatureMetainfo
num_bin_	include/LightGBM/bin.h	/^  int num_bin_;$/;"	m	class:LightGBM::BinMapper
num_boost_round	examples/python-guide/advanced_example.py	/^                num_boost_round=10,$/;"	v
num_boost_round	examples/python-guide/plot_example.py	/^                num_boost_round=100,$/;"	v
num_boost_round	examples/python-guide/simple_example.py	/^                num_boost_round=20,$/;"	v
num_cat_	include/LightGBM/tree.h	/^  int num_cat_;$/;"	m	class:LightGBM::Tree
num_cat_threshold	src/treelearner/split_info.hpp	/^  int num_cat_threshold = 0;$/;"	m	struct:LightGBM::SplitInfo
num_class	include/LightGBM/config.h	/^  int num_class = 1;$/;"	m	struct:LightGBM::BoostingConfig
num_class	include/LightGBM/config.h	/^  int num_class = 1;$/;"	m	struct:LightGBM::IOConfig
num_class	include/LightGBM/config.h	/^  int num_class = 1;$/;"	m	struct:LightGBM::MetricConfig
num_class	include/LightGBM/config.h	/^  int num_class = 1;$/;"	m	struct:LightGBM::ObjectiveConfig
num_class_	include/LightGBM/dataset_loader.h	/^  int num_class_;$/;"	m	class:LightGBM::DatasetLoader
num_class_	src/boosting/gbdt.h	/^  int num_class_;$/;"	m	class:LightGBM::GBDT
num_class_	src/metric/multiclass_metric.hpp	/^  int num_class_;$/;"	m	class:LightGBM::MulticlassMetric
num_class_	src/objective/multiclass_objective.hpp	/^  int num_class_;$/;"	m	class:LightGBM::MulticlassOVA
num_class_	src/objective/multiclass_objective.hpp	/^  int num_class_;$/;"	m	class:LightGBM::MulticlassSoftmax
num_data	include/LightGBM/dataset.h	/^  inline data_size_t num_data() const { return num_data_; }$/;"	f	class:LightGBM::Dataset
num_data	python-package/lightgbm/basic.py	/^    def num_data(self):$/;"	m	class:Dataset
num_data	src/boosting/score_updater.hpp	/^  inline data_size_t num_data() const { return num_data_; }$/;"	f	class:LightGBM::ScoreUpdater
num_data_	include/LightGBM/dataset.h	/^  data_size_t num_data_;$/;"	m	class:LightGBM::Dataset
num_data_	include/LightGBM/dataset.h	/^  data_size_t num_data_;$/;"	m	class:LightGBM::Metadata
num_data_	src/boosting/gbdt.h	/^  data_size_t num_data_;$/;"	m	class:LightGBM::GBDT
num_data_	src/boosting/score_updater.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::ScoreUpdater
num_data_	src/io/dense_bin.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::DenseBin
num_data_	src/io/dense_nbits_bin.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::Dense4bitsBin
num_data_	src/io/sparse_bin.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::SparseBin
num_data_	src/metric/binary_metric.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::AUCMetric
num_data_	src/metric/binary_metric.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::BinaryMetric
num_data_	src/metric/map_metric.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::MapMetric
num_data_	src/metric/multiclass_metric.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::MulticlassMetric
num_data_	src/metric/rank_metric.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::NDCGMetric
num_data_	src/metric/regression_metric.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::RegressionMetric
num_data_	src/metric/xentropy_metric.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::CrossEntropyLambdaMetric
num_data_	src/metric/xentropy_metric.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::CrossEntropyMetric
num_data_	src/metric/xentropy_metric.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::KullbackLeiblerDivergence
num_data_	src/objective/IPWi_rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/objective/IPWij_rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/objective/SCOREwy_rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/objective/SCOREzn_rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/objective/binary_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::BinaryLogloss
num_data_	src/objective/e2e_IPWi_rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/objective/e2e_IPWij_rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/objective/multiclass_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::MulticlassOVA
num_data_	src/objective/multiclass_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::MulticlassSoftmax
num_data_	src/objective/rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/objective/regression_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::RegressionL2loss
num_data_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/objective/xentropy_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::CrossEntropy
num_data_	src/objective/xentropy_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::CrossEntropyLambda
num_data_	src/objective/zinu/ndcg_rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/objective/zinu/score_rank_objective.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LambdarankNDCG
num_data_	src/treelearner/data_partition.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::DataPartition
num_data_	src/treelearner/leaf_splits.hpp	/^  data_size_t num_data_;$/;"	m	class:LightGBM::LeafSplits
num_data_	src/treelearner/serial_tree_learner.h	/^  data_size_t num_data_;$/;"	m	class:LightGBM::SerialTreeLearner
num_data_in_leaf	src/treelearner/leaf_splits.hpp	/^  data_size_t num_data_in_leaf() const { return num_data_in_leaf_; }$/;"	f	class:LightGBM::LeafSplits
num_data_in_leaf_	src/treelearner/leaf_splits.hpp	/^  data_size_t num_data_in_leaf_;$/;"	m	class:LightGBM::LeafSplits
num_dense_feature4_	src/treelearner/gpu_tree_learner.h	/^  int num_dense_feature4_;$/;"	m	class:LightGBM::GPUTreeLearner
num_dense_feature_groups_	src/treelearner/gpu_tree_learner.h	/^  int num_dense_feature_groups_;$/;"	m	class:LightGBM::GPUTreeLearner
num_feature	python-package/lightgbm/basic.py	/^    def num_feature(self):$/;"	m	class:Booster
num_feature	python-package/lightgbm/basic.py	/^    def num_feature(self):$/;"	m	class:Dataset
num_feature_	include/LightGBM/feature_group.h	/^  int num_feature_;$/;"	m	class:LightGBM::FeatureGroup
num_feature_	src/application/predictor.hpp	/^  int num_feature_;$/;"	m	class:LightGBM::Predictor
num_feature_groups	include/LightGBM/dataset.h	/^  inline int num_feature_groups() const { return num_groups_;}$/;"	f	class:LightGBM::Dataset
num_feature_groups_	src/treelearner/gpu_tree_learner.h	/^  int num_feature_groups_;$/;"	m	class:LightGBM::GPUTreeLearner
num_features	include/LightGBM/dataset.h	/^  inline int num_features() const { return num_features_; }$/;"	f	class:LightGBM::Dataset
num_features_	include/LightGBM/dataset.h	/^  int num_features_;$/;"	m	class:LightGBM::Dataset
num_features_	src/treelearner/serial_tree_learner.h	/^  int num_features_;$/;"	m	class:LightGBM::SerialTreeLearner
num_groups_	include/LightGBM/dataset.h	/^  int num_groups_;$/;"	m	class:LightGBM::Dataset
num_init_iteration_	src/boosting/gbdt.h	/^  int num_init_iteration_;$/;"	m	class:LightGBM::GBDT
num_init_score	include/LightGBM/dataset.h	/^  inline int64_t num_init_score() const { return num_init_score_; }$/;"	f	class:LightGBM::Metadata
num_init_score_	include/LightGBM/dataset.h	/^  int64_t num_init_score_;$/;"	m	class:LightGBM::Metadata
num_iteration_for_pred_	src/boosting/gbdt.h	/^  int num_iteration_for_pred_;$/;"	m	class:LightGBM::GBDT
num_iteration_predict	include/LightGBM/config.h	/^  int num_iteration_predict = -1;$/;"	m	struct:LightGBM::IOConfig
num_iterations	include/LightGBM/config.h	/^  int num_iterations = 100;$/;"	m	struct:LightGBM::BoostingConfig
num_leaves	examples/python-guide/sklearn_example.py	/^                        num_leaves=31,$/;"	v
num_leaves	include/LightGBM/config.h	/^  int num_leaves = kDefaultNumLeaves;$/;"	m	struct:LightGBM::TreeConfig
num_leaves	include/LightGBM/tree.h	/^  inline int num_leaves() const { return num_leaves_; }$/;"	f	class:LightGBM::Tree
num_leaves	src/treelearner/data_partition.hpp	/^  int num_leaves() const { return num_leaves_; }$/;"	f	class:LightGBM::DataPartition
num_leaves_	include/LightGBM/tree.h	/^  int num_leaves_;$/;"	m	class:LightGBM::Tree
num_leaves_	src/treelearner/data_partition.hpp	/^  int num_leaves_;$/;"	m	class:LightGBM::DataPartition
num_machines	include/LightGBM/config.h	/^  int num_machines = 1;$/;"	m	struct:LightGBM::NetworkConfig
num_machines	include/LightGBM/network.h	/^inline int Network::num_machines() {$/;"	f	class:LightGBM::Network
num_machines	src/network/linkers.h	/^inline int Linkers::num_machines() {$/;"	f	class:LightGBM::Linkers
num_machines_	include/LightGBM/network.h	/^  static THREAD_LOCAL int num_machines_;$/;"	m	class:LightGBM::Network
num_machines_	src/network/linkers.h	/^  int num_machines_;$/;"	m	class:LightGBM::Linkers
num_machines_	src/network/network.cpp	/^THREAD_LOCAL int Network::num_machines_ = 1;$/;"	m	class:LightGBM::Network	file:
num_machines_	src/treelearner/parallel_tree_learner.h	/^  int num_machines_;$/;"	m	class:LightGBM::DataParallelTreeLearner
num_machines_	src/treelearner/parallel_tree_learner.h	/^  int num_machines_;$/;"	m	class:LightGBM::FeatureParallelTreeLearner
num_machines_	src/treelearner/parallel_tree_learner.h	/^  int num_machines_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
num_pred_one_row_	src/application/predictor.hpp	/^  int num_pred_one_row_;$/;"	m	class:LightGBM::Predictor
num_queries	include/LightGBM/dataset.h	/^  inline data_size_t num_queries() const { return num_queries_; }$/;"	f	class:LightGBM::Metadata
num_queries_	include/LightGBM/dataset.h	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::Metadata
num_queries_	src/metric/map_metric.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::MapMetric
num_queries_	src/metric/rank_metric.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::NDCGMetric
num_queries_	src/objective/IPWi_rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_queries_	src/objective/IPWij_rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_queries_	src/objective/SCOREwy_rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_queries_	src/objective/SCOREzn_rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_queries_	src/objective/e2e_IPWi_rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_queries_	src/objective/e2e_IPWij_rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_queries_	src/objective/rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_queries_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_queries_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_queries_	src/objective/zinu/ndcg_rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_queries_	src/objective/zinu/score_rank_objective.hpp	/^  data_size_t num_queries_;$/;"	m	class:LightGBM::LambdarankNDCG
num_ranks_	include/LightGBM/dataset.h	/^  data_size_t num_ranks_; \/\/\/$/;"	m	class:LightGBM::Metadata
num_threads	include/LightGBM/config.h	/^  int num_threads = 0;$/;"	m	struct:LightGBM::OverallConfig
num_threads_	src/application/predictor.hpp	/^  int num_threads_;$/;"	m	class:LightGBM::Predictor
num_threads_	src/boosting/gbdt.h	/^  int num_threads_;$/;"	m	class:LightGBM::GBDT
num_threads_	src/metric/map_metric.hpp	/^  int num_threads_;$/;"	m	class:LightGBM::MapMetric
num_threads_	src/metric/rank_metric.hpp	/^  int num_threads_;$/;"	m	class:LightGBM::NDCGMetric
num_threads_	src/objective/IPWi_rank_objective.hpp	/^  int num_threads_; \/\/\/ 线程数$/;"	m	class:LightGBM::LambdarankNDCG
num_threads_	src/objective/IPWij_rank_objective.hpp	/^  int num_threads_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
num_threads_	src/objective/e2e_IPWi_rank_objective.hpp	/^  int num_threads_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
num_threads_	src/objective/e2e_IPWij_rank_objective.hpp	/^  int num_threads_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
num_threads_	src/objective/rank_objective.hpp	/^  int num_threads_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
num_threads_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  int num_threads_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
num_threads_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  int num_threads_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
num_threads_	src/treelearner/data_partition.hpp	/^  int num_threads_;$/;"	m	class:LightGBM::DataPartition
num_threads_	src/treelearner/serial_tree_learner.h	/^  int num_threads_;$/;"	m	class:LightGBM::SerialTreeLearner
num_total_bin_	include/LightGBM/feature_group.h	/^  int num_total_bin_;$/;"	m	class:LightGBM::FeatureGroup
num_total_features	include/LightGBM/dataset.h	/^  inline int num_total_features() const { return num_total_features_; }$/;"	f	class:LightGBM::Dataset
num_total_features_	include/LightGBM/dataset.h	/^  int num_total_features_;$/;"	m	class:LightGBM::Dataset
num_tree_per_iteration_	src/boosting/gbdt.h	/^  int num_tree_per_iteration_;$/;"	m	class:LightGBM::GBDT
num_vals_	src/io/sparse_bin.hpp	/^  data_size_t num_vals_;$/;"	m	class:LightGBM::SparseBin
num_weights_	include/LightGBM/dataset.h	/^  data_size_t num_weights_;$/;"	m	class:LightGBM::Metadata
number_value	src/io/json11.cpp	/^double                    JsonValue::number_value()              const { return 0; }$/;"	f	class:json11::JsonValue
number_value	src/io/json11.cpp	/^double Json::number_value()                       const { return m_ptr->number_value(); }$/;"	f	class:json11::Json
numeric_types	python-package/lightgbm/compat.py	/^    numeric_types = (int, float, bool)$/;"	v
numeric_types	python-package/lightgbm/compat.py	/^    numeric_types = (int, long, float, bool)$/;"	v
obj	include/LightGBM/R_object_helper.h	/^  unsigned int obj : 1;$/;"	m	struct:lgbm_sxpinfo
object	include/LightGBM/json11.hpp	/^    typedef std::map<std::string, Json> object;$/;"	t	class:json11::final
object_items	src/io/json11.cpp	/^const map<string, Json> & Json::object_items()    const { return m_ptr->object_items(); }$/;"	f	class:json11::Json
object_items	src/io/json11.cpp	/^const map<string, Json> & JsonValue::object_items()              const { return statics().empty_map; }$/;"	f	class:json11::JsonValue
objective_	python-package/lightgbm/sklearn.py	/^    def objective_(self):$/;"	m	class:LGBMModel
objective_config	include/LightGBM/config.h	/^  ObjectiveConfig objective_config;$/;"	m	struct:LightGBM::OverallConfig
objective_fun_	include/LightGBM/application.h	/^  std::unique_ptr<ObjectiveFunction> objective_fun_;$/;"	m	class:LightGBM::Application
objective_fun_	src/c_api.cpp	/^  std::unique_ptr<ObjectiveFunction> objective_fun_;$/;"	m	class:LightGBM::Booster	file:
objective_function_	src/boosting/gbdt.h	/^  const ObjectiveFunction* objective_function_;$/;"	m	class:LightGBM::GBDT
objective_ls	tests/python_package_test/test_sklearn.py	/^        def objective_ls(y_true, y_pred):$/;"	f	function:TestSklearn.test_regression_with_custom_objective
objective_type	include/LightGBM/config.h	/^  std::string objective_type =  kDefaultObjectiveType;$/;"	m	struct:LightGBM::OverallConfig
offset	include/LightGBM/R_object_helper.h	/^  int offset;$/;"	m	struct:lgbm_primsxp
offsets_buf_	src/boosting/gbdt.h	/^  std::vector<data_size_t> offsets_buf_;$/;"	m	class:LightGBM::GBDT
offsets_buf_	src/treelearner/data_partition.hpp	/^  std::vector<data_size_t> offsets_buf_;$/;"	m	class:LightGBM::DataPartition
omp_get_num_threads	include/LightGBM/utils/openmp_wrapper.h	/^  inline int omp_get_num_threads() {return 1;}$/;"	f
omp_get_thread_num	include/LightGBM/utils/openmp_wrapper.h	/^  inline int omp_get_thread_num() {return 0;}$/;"	f
omp_set_nested	include/LightGBM/utils/openmp_wrapper.h	/^  inline void omp_set_nested(int) {}$/;"	f
omp_set_num_threads	include/LightGBM/utils/openmp_wrapper.h	/^  inline void omp_set_num_threads(int) {}$/;"	f
one_fraction	include/LightGBM/tree.h	/^    double one_fraction;$/;"	m	struct:LightGBM::Tree::PathElement
operator !=	include/LightGBM/json11.hpp	/^    bool operator!= (const Json &rhs) const { return !(*this == rhs); }$/;"	f	class:json11::final
operator ()	include/LightGBM/utils/common.h	/^  T operator()(const std::string& str) const {$/;"	f	struct:LightGBM::Common::__StringToTHelper
operator ()	include/LightGBM/utils/common.h	/^  const char* operator()(const char*p, T* out) const {$/;"	f	struct:LightGBM::Common::__StringToTHelperFast
operator ()	include/LightGBM/utils/common.h	/^  void operator()(T value, char* buffer, size_t $/;"	f	struct:LightGBM::Common::__TToStringHelperFast
operator ()	include/LightGBM/utils/common.h	/^  void operator()(T value, char* buffer, size_t ) const {$/;"	f	struct:LightGBM::Common::__TToStringHelperFast
operator <	src/io/json11.cpp	/^    bool operator<(NullStruct) const { return false; }$/;"	f	struct:json11::NullStruct
operator <	src/io/json11.cpp	/^bool Json::operator< (const Json &other) const {$/;"	f	class:json11::Json
operator <=	include/LightGBM/json11.hpp	/^    bool operator<= (const Json &rhs) const { return !(rhs < *this); }$/;"	f	class:json11::final
operator ==	src/io/json11.cpp	/^    bool operator==(NullStruct) const { return true; }$/;"	f	struct:json11::NullStruct
operator ==	src/io/json11.cpp	/^bool Json::operator== (const Json &other) const {$/;"	f	class:json11::Json
operator ==	src/treelearner/split_info.hpp	/^  inline bool operator == (const LightSplitInfo& si) const {$/;"	f	struct:LightGBM::LightSplitInfo
operator ==	src/treelearner/split_info.hpp	/^  inline bool operator == (const SplitInfo& si) const {$/;"	f	struct:LightGBM::SplitInfo
operator >	include/LightGBM/json11.hpp	/^    bool operator>  (const Json &rhs) const { return  (rhs < *this); }$/;"	f	class:json11::final
operator >	src/treelearner/split_info.hpp	/^  inline bool operator > (const LightSplitInfo& si) const {$/;"	f	struct:LightGBM::LightSplitInfo
operator >	src/treelearner/split_info.hpp	/^  inline bool operator > (const SplitInfo& si) const {$/;"	f	struct:LightGBM::SplitInfo
operator >=	include/LightGBM/json11.hpp	/^    bool operator>= (const Json &rhs) const { return !(*this < rhs); }$/;"	f	class:json11::final
operator []	src/io/json11.cpp	/^const Json &              JsonValue::operator[] (const string &) const { return static_null(); }$/;"	f	class:json11::JsonValue
operator []	src/io/json11.cpp	/^const Json &              JsonValue::operator[] (size_t)         const { return static_null(); }$/;"	f	class:json11::JsonValue
operator []	src/io/json11.cpp	/^const Json & Json::operator[] (const string &key) const { return (*m_ptr)[key];         }$/;"	f	class:json11::Json
operator []	src/io/json11.cpp	/^const Json & Json::operator[] (size_t i)          const { return (*m_ptr)[i];           }$/;"	f	class:json11::Json
operator []	src/io/json11.cpp	/^const Json & JsonArray::operator[] (size_t i) const {$/;"	f	class:json11::JsonArray
operator []	src/io/json11.cpp	/^const Json & JsonObject::operator[] (const string &key) const {$/;"	f	class:json11::JsonObject
optimize_pos_at_	src/objective/IPWi_rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
optimize_pos_at_	src/objective/IPWij_rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
optimize_pos_at_	src/objective/SCOREwy_rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
optimize_pos_at_	src/objective/SCOREzn_rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
optimize_pos_at_	src/objective/e2e_IPWi_rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
optimize_pos_at_	src/objective/e2e_IPWij_rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
optimize_pos_at_	src/objective/rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
optimize_pos_at_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
optimize_pos_at_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
optimize_pos_at_	src/objective/zinu/ndcg_rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
optimize_pos_at_	src/objective/zinu/score_rank_objective.hpp	/^  int optimize_pos_at_;$/;"	m	class:LightGBM::LambdarankNDCG
ordered_bin_indices_	src/treelearner/serial_tree_learner.h	/^  std::vector<int> ordered_bin_indices_;$/;"	m	class:LightGBM::SerialTreeLearner
ordered_bin_time	src/treelearner/serial_tree_learner.cpp	/^std::chrono::duration<double, std::milli> ordered_bin_time;$/;"	m	namespace:LightGBM	file:
ordered_bins_	src/treelearner/serial_tree_learner.h	/^  std::vector<std::unique_ptr<OrderedBin>> ordered_bins_;$/;"	m	class:LightGBM::SerialTreeLearner
ordered_gradients_	src/treelearner/serial_tree_learner.h	/^  std::vector<score_t, boost::alignment::aligned_allocator<score_t, 4096>> ordered_gradients_;$/;"	m	class:LightGBM::SerialTreeLearner
ordered_gradients_	src/treelearner/serial_tree_learner.h	/^  std::vector<score_t> ordered_gradients_;$/;"	m	class:LightGBM::SerialTreeLearner
ordered_hessians_	src/treelearner/serial_tree_learner.h	/^  std::vector<score_t, boost::alignment::aligned_allocator<score_t, 4096>> ordered_hessians_;$/;"	m	class:LightGBM::SerialTreeLearner
ordered_hessians_	src/treelearner/serial_tree_learner.h	/^  std::vector<score_t> ordered_hessians_;$/;"	m	class:LightGBM::SerialTreeLearner
ordered_pair_	src/io/ordered_sparse_bin.hpp	/^  std::vector<SparsePair> ordered_pair_;$/;"	m	class:LightGBM::OrderedSparseBin
os	.nuget/create_nuget.py	/^import os$/;"	i
os	docs/conf.py	/^import os$/;"	i
os	python-package/lightgbm/__init__.py	/^import os$/;"	i
os	python-package/lightgbm/basic.py	/^import os$/;"	i
os	python-package/lightgbm/libpath.py	/^import os$/;"	i
os	python-package/setup.py	/^import os$/;"	i
os	tests/c_api_test/test_.py	/^import os$/;"	i
os	tests/python_package_test/test_basic.py	/^import os$/;"	i
os	tests/python_package_test/test_consistency.py	/^import os$/;"	i
os	tests/python_package_test/test_engine.py	/^import os$/;"	i
os	tests/python_package_test/test_sklearn.py	/^import os$/;"	i
other_rate	include/LightGBM/config.h	/^  double other_rate = 0.1;$/;"	m	struct:LightGBM::BoostingConfig
out_of_bag_score_time	src/boosting/gbdt.cpp	/^std::chrono::duration<double, std::milli> out_of_bag_score_time;$/;"	m	namespace:LightGBM	file:
out_ranks	include/LightGBM/network.h	/^  std::vector<int> out_ranks;$/;"	m	class:LightGBM::BruckMap
output_buffer_	src/treelearner/parallel_tree_learner.h	/^  std::vector<char> output_buffer_;$/;"	m	class:LightGBM::DataParallelTreeLearner
output_buffer_	src/treelearner/parallel_tree_learner.h	/^  std::vector<char> output_buffer_;$/;"	m	class:LightGBM::FeatureParallelTreeLearner
output_buffer_	src/treelearner/parallel_tree_learner.h	/^  std::vector<char> output_buffer_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
output_freq	include/LightGBM/config.h	/^  int output_freq = 1;$/;"	m	struct:LightGBM::BoostingConfig
output_model	include/LightGBM/config.h	/^  std::string output_model = "LightGBM_model.txt";$/;"	m	struct:LightGBM::IOConfig
output_result	include/LightGBM/config.h	/^  std::string output_result = "LightGBM_predict_result.txt";$/;"	m	struct:LightGBM::IOConfig
override	include/LightGBM/config.h	/^  LIGHTGBM_EXPORT void Set(const std::unordered_map<std::string, std::string>& params) override;$/;"	m	struct:LightGBM::BoostingConfig
override	include/LightGBM/config.h	/^  LIGHTGBM_EXPORT void Set(const std::unordered_map<std::string, std::string>& params) override;$/;"	m	struct:LightGBM::IOConfig
override	include/LightGBM/config.h	/^  LIGHTGBM_EXPORT void Set(const std::unordered_map<std::string, std::string>& params) override;$/;"	m	struct:LightGBM::MetricConfig
override	include/LightGBM/config.h	/^  LIGHTGBM_EXPORT void Set(const std::unordered_map<std::string, std::string>& params) override;$/;"	m	struct:LightGBM::NetworkConfig
override	include/LightGBM/config.h	/^  LIGHTGBM_EXPORT void Set(const std::unordered_map<std::string, std::string>& params) override;$/;"	m	struct:LightGBM::ObjectiveConfig
override	include/LightGBM/config.h	/^  LIGHTGBM_EXPORT void Set(const std::unordered_map<std::string, std::string>& params) override;$/;"	m	struct:LightGBM::OverallConfig
override	include/LightGBM/config.h	/^  LIGHTGBM_EXPORT void Set(const std::unordered_map<std::string, std::string>& params) override;$/;"	m	struct:LightGBM::TreeConfig
override	src/boosting/gbdt.h	/^                         const std::vector<const Metric*>& training_metrics) override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^                       const PredictionEarlyStopInstance* early_stop) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^                       const std::vector<const Metric*>& valid_metrics) override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^                      const PredictionEarlyStopInstance* earlyStop) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^                    const PredictionEarlyStopInstance* early_stop) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^                  const PredictionEarlyStopInstance* earlyStop) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^               const PredictionEarlyStopInstance* earlyStop) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^            const std::vector<const Metric*>& training_metrics) override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  bool LoadModelFromString(const char* buffer, size_t len) override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  bool SaveModelToIfElse(int num_iteration, const char* filename) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  std::string DumpModel(int num_iteration) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  std::string ModelToIfElse(int num_iteration) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  std::vector<double> FeatureImportance(int num_iteration, int importance_type) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  std::vector<double> GetEvalAt(int data_idx) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  virtual bool SaveModelToFile(int num_iterations, const char* filename) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  virtual bool TrainOneIter(const score_t* gradients, const score_t* hessians) override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  virtual const double* GetTrainingScore(int64_t* out_len) override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  virtual std::string SaveModelToString(int num_iterations) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  void GetPredictAt(int data_idx, double* out_result, int64_t* out_len) override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  void PredictLeafIndex(const double* features, double* output) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  void PredictLeafIndexByMap(const std::unordered_map<int, double>& features, double* output) const override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  void RefitTree(const std::vector<std::vector<int>>& tree_leaf_prediction) override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  void ResetConfig(const BoostingConfig* gbdt_config) override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  void RollbackOneIter() override;$/;"	m	class:LightGBM::GBDT
override	src/boosting/gbdt.h	/^  void Train(int snapshot_freq, const std::string& model_output_path) override;$/;"	m	class:LightGBM::GBDT
override	src/io/dense_bin.hpp	/^  BinIterator* GetIterator(uint32_t min_bin, uint32_t max_bin, uint32_t default_bin) const override;$/;"	m	class:LightGBM::DenseBin
override	src/io/dense_bin.hpp	/^  inline uint32_t Get(data_size_t idx) override;$/;"	m	class:LightGBM::DenseBinIterator
override	src/io/dense_bin.hpp	/^  inline uint32_t RawGet(data_size_t idx) override;$/;"	m	class:LightGBM::DenseBinIterator
override	src/io/dense_nbits_bin.hpp	/^  inline BinIterator* GetIterator(uint32_t min_bin, uint32_t max_bin, uint32_t default_bin) const override;$/;"	m	class:LightGBM::Dense4bitsBin
override	src/io/dense_nbits_bin.hpp	/^  inline uint32_t Get(data_size_t idx) override;$/;"	m	class:LightGBM::Dense4bitsBinIterator
override	src/io/dense_nbits_bin.hpp	/^  inline uint32_t RawGet(data_size_t idx) override;$/;"	m	class:LightGBM::Dense4bitsBinIterator
override	src/io/json11.cpp	/^    const Json & operator[](const string &key) const override;$/;"	m	class:json11::final	file:
override	src/io/json11.cpp	/^    const Json & operator[](size_t i) const override;$/;"	m	class:json11::final	file:
override	src/io/sparse_bin.hpp	/^  BinIterator* GetIterator(uint32_t min_bin, uint32_t max_bin, uint32_t default_bin) const override;$/;"	m	class:LightGBM::SparseBin
override	src/io/sparse_bin.hpp	/^  OrderedBin* CreateOrderedBin() const override;$/;"	m	class:LightGBM::SparseBin
override	src/io/sparse_bin.hpp	/^  inline uint32_t RawGet(data_size_t idx) override;$/;"	m	class:LightGBM::SparseBinIterator
override	src/io/sparse_bin.hpp	/^  inline void Reset(data_size_t idx) override;$/;"	m	class:LightGBM::SparseBinIterator
override	src/treelearner/gpu_tree_learner.h	/^              bool is_constant_hessian, Json& forced_split_json) override;$/;"	m	class:LightGBM::GPUTreeLearner
override	src/treelearner/gpu_tree_learner.h	/^  bool BeforeFindBestSplit(const Tree* tree, int left_leaf, int right_leaf) override;$/;"	m	class:LightGBM::GPUTreeLearner
override	src/treelearner/gpu_tree_learner.h	/^  void BeforeTrain() override;$/;"	m	class:LightGBM::GPUTreeLearner
override	src/treelearner/gpu_tree_learner.h	/^  void ConstructHistograms(const std::vector<int8_t>& is_feature_used, bool use_subtract) override;$/;"	m	class:LightGBM::GPUTreeLearner
override	src/treelearner/gpu_tree_learner.h	/^  void FindBestSplits() override;$/;"	m	class:LightGBM::GPUTreeLearner
override	src/treelearner/gpu_tree_learner.h	/^  void Init(const Dataset* train_data, bool is_constant_hessian) override;$/;"	m	class:LightGBM::GPUTreeLearner
override	src/treelearner/gpu_tree_learner.h	/^  void ResetTrainingData(const Dataset* train_data) override;$/;"	m	class:LightGBM::GPUTreeLearner
override	src/treelearner/gpu_tree_learner.h	/^  void Split(Tree* tree, int best_Leaf, int* left_leaf, int* right_leaf) override;$/;"	m	class:LightGBM::GPUTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  bool BeforeFindBestSplit(const Tree* tree, int left_leaf, int right_leaf) override;$/;"	m	class:LightGBM::VotingParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void BeforeTrain() override;$/;"	m	class:LightGBM::DataParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void BeforeTrain() override;$/;"	m	class:LightGBM::FeatureParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void BeforeTrain() override;$/;"	m	class:LightGBM::VotingParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void FindBestSplits() override;$/;"	m	class:LightGBM::DataParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void FindBestSplits() override;$/;"	m	class:LightGBM::VotingParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void FindBestSplitsFromHistograms(const std::vector<int8_t>& is_feature_used, bool use_subtract) override;$/;"	m	class:LightGBM::DataParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void FindBestSplitsFromHistograms(const std::vector<int8_t>& is_feature_used, bool use_subtract) override;$/;"	m	class:LightGBM::FeatureParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void FindBestSplitsFromHistograms(const std::vector<int8_t>& is_feature_used, bool use_subtract) override;$/;"	m	class:LightGBM::VotingParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void Init(const Dataset* train_data, bool is_constant_hessian) override;$/;"	m	class:LightGBM::DataParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void Init(const Dataset* train_data, bool is_constant_hessian) override;$/;"	m	class:LightGBM::FeatureParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void Init(const Dataset* train_data, bool is_constant_hessian) override;$/;"	m	class:LightGBM::VotingParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void ResetConfig(const TreeConfig* tree_config) override;$/;"	m	class:LightGBM::DataParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void ResetConfig(const TreeConfig* tree_config) override;$/;"	m	class:LightGBM::VotingParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void Split(Tree* tree, int best_Leaf, int* left_leaf, int* right_leaf) override;$/;"	m	class:LightGBM::DataParallelTreeLearner
override	src/treelearner/parallel_tree_learner.h	/^  void Split(Tree* tree, int best_Leaf, int* left_leaf, int* right_leaf) override;$/;"	m	class:LightGBM::VotingParallelTreeLearner
override	src/treelearner/serial_tree_learner.h	/^                          const score_t* gradients, const score_t* hessians) override;$/;"	m	class:LightGBM::SerialTreeLearner
override	src/treelearner/serial_tree_learner.h	/^                       data_size_t total_num_data, const data_size_t* bag_indices, data_size_t bag_cnt) const override;$/;"	m	class:LightGBM::SerialTreeLearner
override	src/treelearner/serial_tree_learner.h	/^              Json& forced_split_json) override;$/;"	m	class:LightGBM::SerialTreeLearner
override	src/treelearner/serial_tree_learner.h	/^  Tree* FitByExistingTree(const Tree* old_tree, const score_t* gradients, const score_t* hessians) const override;$/;"	m	class:LightGBM::SerialTreeLearner
override	src/treelearner/serial_tree_learner.h	/^  void Init(const Dataset* train_data, bool is_constant_hessian) override;$/;"	m	class:LightGBM::SerialTreeLearner
override	src/treelearner/serial_tree_learner.h	/^  void ResetConfig(const TreeConfig* tree_config) override;$/;"	m	class:LightGBM::SerialTreeLearner
override	src/treelearner/serial_tree_learner.h	/^  void ResetTrainingData(const Dataset* train_data) override;$/;"	m	class:LightGBM::SerialTreeLearner
param_dict_to_str	python-package/lightgbm/basic.py	/^def param_dict_to_str(data):$/;"	f
param_grid	examples/python-guide/sklearn_example.py	/^param_grid = {$/;"	v
params	examples/python-guide/advanced_example.py	/^params = {$/;"	v
params	examples/python-guide/plot_example.py	/^params = {$/;"	v
params	examples/python-guide/simple_example.py	/^params = {$/;"	v
parent_leaf_histogram_array_	src/treelearner/serial_tree_learner.h	/^  FeatureHistogram* parent_leaf_histogram_array_;$/;"	m	class:LightGBM::SerialTreeLearner
parse	include/LightGBM/json11.hpp	/^    static Json parse(const char * in,$/;"	f	class:json11::final
parse	src/io/json11.cpp	/^Json Json::parse(const string &in, string &err, JsonParse strategy) {$/;"	f	class:json11::Json
parse_json	src/io/json11.cpp	/^    Json parse_json(int depth) {$/;"	f	struct:json11::__anon3::final
parse_multi	include/LightGBM/json11.hpp	/^    static inline std::vector<Json> parse_multi($/;"	f	class:json11::final
parse_multi	src/io/json11.cpp	/^vector<Json> Json::parse_multi(const string &in,$/;"	f	class:json11::Json
parse_number	src/io/json11.cpp	/^    Json parse_number() {$/;"	f	struct:json11::__anon3::final
parse_string	src/io/json11.cpp	/^    string parse_string() {$/;"	f	struct:json11::__anon3::final
path	tests/python_package_test/test_consistency.py	/^    def path(self, suffix):$/;"	m	class:FileLoader
path_log	python-package/setup.py	/^    path_log = os.path.join(os.path.expanduser('~'), 'LightGBM_compilation.log')$/;"	v
pd	examples/python-guide/advanced_example.py	/^import pandas as pd$/;"	i
pd	examples/python-guide/plot_example.py	/^import pandas as pd$/;"	i
pd	examples/python-guide/simple_example.py	/^import pandas as pd$/;"	i
pd	examples/python-guide/sklearn_example.py	/^import pandas as pd$/;"	i
pd	tests/python_package_test/test_engine.py	/^    import pandas as pd$/;"	i
pd	tests/python_package_test/test_sklearn.py	/^    import pandas as pd$/;"	i
pickle	examples/python-guide/advanced_example.py	/^    import cPickle as pickle$/;"	i
pickle	examples/python-guide/advanced_example.py	/^    import pickle$/;"	i
pickle	tests/python_package_test/test_engine.py	/^    import cPickle as pickle$/;"	i
pickle	tests/python_package_test/test_engine.py	/^    import pickle$/;"	i
pinned_feature_masks_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::buffer pinned_feature_masks_;$/;"	m	class:LightGBM::GPUTreeLearner
pinned_gradients_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::buffer pinned_gradients_;$/;"	m	class:LightGBM::GPUTreeLearner
pinned_hessians_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::buffer pinned_hessians_;$/;"	m	class:LightGBM::GPUTreeLearner
pkl_bst	examples/python-guide/advanced_example.py	/^    pkl_bst = pickle.load(fin)$/;"	v
plot_importance	python-package/lightgbm/__init__.py	/^    from .plotting import plot_importance, plot_metric, plot_tree, create_tree_digraph$/;"	i
plot_importance	python-package/lightgbm/plotting.py	/^def plot_importance(booster, ax=None, height=0.2,$/;"	f
plot_metric	python-package/lightgbm/__init__.py	/^    from .plotting import plot_importance, plot_metric, plot_tree, create_tree_digraph$/;"	i
plot_metric	python-package/lightgbm/plotting.py	/^def plot_metric(booster, metric=None, dataset_names=None,$/;"	f
plot_tree	python-package/lightgbm/__init__.py	/^    from .plotting import plot_importance, plot_metric, plot_tree, create_tree_digraph$/;"	i
plot_tree	python-package/lightgbm/plotting.py	/^def plot_tree(booster, ax=None, tree_index=0, figsize=None,$/;"	f
plt	examples/python-guide/plot_example.py	/^    import matplotlib.pyplot as plt$/;"	i
plt	python-package/lightgbm/plotting.py	/^        import matplotlib.pyplot as plt$/;"	i
pname	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *pname;$/;"	m	struct:lgbm_symsxp	typeref:struct:lgbm_symsxp::LGBM_SER
poisson_max_delta_step	include/LightGBM/config.h	/^  double poisson_max_delta_step = 0.7;$/;"	m	struct:LightGBM::ObjectiveConfig
pool_	src/treelearner/feature_histogram.hpp	/^  std::vector<std::unique_ptr<FeatureHistogram[]>> pool_;$/;"	m	class:LightGBM::HistogramPool
position_biases_	src/objective/IPWij_rank_objective.hpp	/^  mutable std::vector<label_t> position_biases_; \/\/\/ mutable，在const函数中可修改$/;"	m	class:LightGBM::LambdarankNDCG
position_biases_	src/objective/e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<label_t> position_biases_; \/\/\/ mutable，在const函数中可修改$/;"	m	class:LightGBM::LambdarankNDCG
position_biases_	src/objective/e2e_IPWij_rank_objective.hpp	/^  mutable std::vector<label_t> position_biases_; \/\/\/ mutable，在const函数中可修改$/;"	m	class:LightGBM::LambdarankNDCG
position_biases_	src/objective/rank_objective.hpp	/^  mutable std::vector<label_t> position_biases_; \/\/\/ mutable，在const函数中可修改$/;"	m	class:LightGBM::LambdarankNDCG
position_biases_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<label_t> position_biases_; \/\/\/ mutable，在const函数中可修改$/;"	m	class:LightGBM::LambdarankNDCG
position_biases_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<label_t> position_biases_; \/\/\/ mutable，在const函数中可修改$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_	src/objective/IPWij_rank_objective.hpp	/^  mutable std::vector<long long> position_cnts_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_	src/objective/e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<long long> position_cnts_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_	src/objective/e2e_IPWij_rank_objective.hpp	/^  mutable std::vector<long long> position_cnts_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_	src/objective/rank_objective.hpp	/^  mutable std::vector<long long> position_cnts_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<long long> position_cnts_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<long long> position_cnts_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_buffer_	src/objective/IPWij_rank_objective.hpp	/^  mutable std::vector<std::vector<long long>> position_cnts_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_buffer_	src/objective/e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<std::vector<long long>> position_cnts_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_buffer_	src/objective/e2e_IPWij_rank_objective.hpp	/^  mutable std::vector<std::vector<long long>> position_cnts_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_buffer_	src/objective/rank_objective.hpp	/^  mutable std::vector<std::vector<long long>> position_cnts_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_buffer_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<std::vector<long long>> position_cnts_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_cnts_buffer_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<std::vector<long long>> position_cnts_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_costs_	src/objective/rank_objective.hpp	/^  mutable std::vector<label_t> position_costs_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_costs_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<label_t> position_costs_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_costs_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<label_t> position_costs_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_costs_buffer_	src/objective/rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_costs_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_costs_buffer_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_costs_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_costs_buffer_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_costs_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_	src/objective/IPWij_rank_objective.hpp	/^  mutable std::vector<label_t> position_gradients_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_	src/objective/e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<label_t> position_gradients_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_	src/objective/e2e_IPWij_rank_objective.hpp	/^  mutable std::vector<label_t> position_gradients_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_	src/objective/rank_objective.hpp	/^  mutable std::vector<label_t> position_gradients_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<label_t> position_gradients_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<label_t> position_gradients_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_buffer_	src/objective/IPWij_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_gradients_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_buffer_	src/objective/e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_gradients_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_buffer_	src/objective/e2e_IPWij_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_gradients_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_buffer_	src/objective/rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_gradients_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_buffer_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_gradients_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_gradients_buffer_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_gradients_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_lambdas_	src/objective/rank_objective.hpp	/^  mutable std::vector<label_t> position_lambdas_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_lambdas_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<label_t> position_lambdas_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_lambdas_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<label_t> position_lambdas_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_lambdas_buffer_	src/objective/rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_lambdas_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_lambdas_buffer_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_lambdas_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_lambdas_buffer_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_lambdas_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_scores_	src/objective/rank_objective.hpp	/^  mutable std::vector<label_t> position_scores_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_scores_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<label_t> position_scores_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_scores_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<label_t> position_scores_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_scores_buffer_	src/objective/rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_scores_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_scores_buffer_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_scores_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
position_scores_buffer_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> position_scores_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
preallocd_max_num_wg_	src/treelearner/gpu_tree_learner.h	/^  int preallocd_max_num_wg_ = 1024;$/;"	m	class:LightGBM::GPUTreeLearner
pred_early_stop	include/LightGBM/config.h	/^  bool pred_early_stop = false;$/;"	m	struct:LightGBM::IOConfig
pred_early_stop_freq	include/LightGBM/config.h	/^  int pred_early_stop_freq = 10;$/;"	m	struct:LightGBM::IOConfig
pred_early_stop_margin	include/LightGBM/config.h	/^  double pred_early_stop_margin = 10.0;$/;"	m	struct:LightGBM::IOConfig
predict	python-package/lightgbm/basic.py	/^    def predict(self, data, num_iteration=-1, raw_score=False, pred_leaf=False, pred_contrib=False,$/;"	m	class:Booster
predict	python-package/lightgbm/basic.py	/^    def predict(self, data, num_iteration=-1,$/;"	m	class:_InnerPredictor
predict	python-package/lightgbm/sklearn.py	/^    def predict(self, X, raw_score=False, num_iteration=-1,$/;"	m	class:LGBMClassifier
predict	python-package/lightgbm/sklearn.py	/^    def predict(self, X, raw_score=False, num_iteration=-1,$/;"	m	class:LGBMModel
predict_buf_	src/application/predictor.hpp	/^  std::vector<std::vector<double>> predict_buf_;$/;"	m	class:LightGBM::Predictor
predict_fun_	include/LightGBM/dataset_loader.h	/^  const PredictFunction& predict_fun_;$/;"	m	class:LightGBM::DatasetLoader
predict_fun_	src/application/predictor.hpp	/^  PredictFunction predict_fun_;$/;"	m	class:LightGBM::Predictor
predict_proba	python-package/lightgbm/sklearn.py	/^    def predict_proba(self, X, raw_score=False, num_iteration=-1,$/;"	m	class:LGBMClassifier
preds	tests/cpp_test/test.py	/^preds = [np.loadtxt(name) for name in glob.glob('*.pred')]$/;"	v
presum_label_entropy_	src/metric/xentropy_metric.hpp	/^  double presum_label_entropy_;$/;"	m	class:LightGBM::KullbackLeiblerDivergence
primsxp	include/LightGBM/R_object_helper.h	/^    struct lgbm_primsxp primsxp;$/;"	m	union:LGBM_SER::__anon1	typeref:struct:LGBM_SER::__anon1::lgbm_primsxp
print_evaluation	python-package/lightgbm/__init__.py	/^from .callback import (early_stopping, print_evaluation, record_evaluation,$/;"	i
print_evaluation	python-package/lightgbm/callback.py	/^def print_evaluation(period=1, show_stdv=True):$/;"	f
project	docs/conf.py	/^project = 'LightGBM'$/;"	v
promsxp	include/LightGBM/R_object_helper.h	/^    struct lgbm_promsxp promsxp;$/;"	m	union:LGBM_SER::__anon1	typeref:struct:LGBM_SER::__anon1::lgbm_promsxp
ptr_pinned_feature_masks_	src/treelearner/gpu_tree_learner.h	/^  void * ptr_pinned_feature_masks_ = nullptr;$/;"	m	class:LightGBM::GPUTreeLearner
ptr_pinned_gradients_	src/treelearner/gpu_tree_learner.h	/^  void * ptr_pinned_gradients_ = nullptr;$/;"	m	class:LightGBM::GPUTreeLearner
ptr_pinned_hessians_	src/treelearner/gpu_tree_learner.h	/^  void * ptr_pinned_hessians_ = nullptr;$/;"	m	class:LightGBM::GPUTreeLearner
push_buffers_	src/io/sparse_bin.hpp	/^  std::vector<std::vector<std::pair<data_size_t, VAL_T>>> push_buffers_;$/;"	m	class:LightGBM::SparseBin
pweight	include/LightGBM/tree.h	/^    double pweight;$/;"	m	struct:LightGBM::Tree::PathElement
pygments_style	docs/conf.py	/^pygments_style = 'sphinx'$/;"	v
pytest	tests/c_api_test/test_.py	/^import pytest$/;"	i
queries_	include/LightGBM/dataset.h	/^  std::vector<data_size_t> queries_;$/;"	m	class:LightGBM::Metadata
query_boundaries	include/LightGBM/dataset.h	/^  inline const data_size_t* query_boundaries() const {$/;"	f	class:LightGBM::Metadata
query_boundaries_	include/LightGBM/dataset.h	/^  std::vector<data_size_t> query_boundaries_;$/;"	m	class:LightGBM::Metadata
query_boundaries_	src/metric/map_metric.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::MapMetric
query_boundaries_	src/metric/rank_metric.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::NDCGMetric
query_boundaries_	src/objective/IPWi_rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_boundaries_	src/objective/IPWij_rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_boundaries_	src/objective/SCOREwy_rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_boundaries_	src/objective/SCOREzn_rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_boundaries_	src/objective/e2e_IPWi_rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_boundaries_	src/objective/e2e_IPWij_rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_boundaries_	src/objective/rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_boundaries_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_boundaries_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_boundaries_	src/objective/zinu/ndcg_rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_boundaries_	src/objective/zinu/score_rank_objective.hpp	/^  const data_size_t* query_boundaries_;$/;"	m	class:LightGBM::LambdarankNDCG
query_load_from_file_	include/LightGBM/dataset.h	/^  bool query_load_from_file_;$/;"	m	class:LightGBM::Metadata
query_weights	include/LightGBM/dataset.h	/^  inline const label_t* query_weights() const {$/;"	f	class:LightGBM::Metadata
query_weights_	include/LightGBM/dataset.h	/^  std::vector<label_t> query_weights_;$/;"	m	class:LightGBM::Metadata
query_weights_	src/metric/map_metric.hpp	/^  const label_t* query_weights_;$/;"	m	class:LightGBM::MapMetric
query_weights_	src/metric/rank_metric.hpp	/^  const label_t* query_weights_;$/;"	m	class:LightGBM::NDCGMetric
queue_	src/treelearner/gpu_tree_learner.h	/^  boost::compute::command_queue queue_;$/;"	m	class:LightGBM::GPUTreeLearner
random	tests/python_package_test/test_engine.py	/^import random$/;"	i
random_	include/LightGBM/dataset_loader.h	/^  Random random_;$/;"	m	class:LightGBM::DatasetLoader
random_	src/treelearner/serial_tree_learner.h	/^  Random random_;$/;"	m	class:LightGBM::SerialTreeLearner
random_for_drop_	src/boosting/dart.hpp	/^  Random random_for_drop_;$/;"	m	class:LightGBM::DART
range_	python-package/lightgbm/callback.py	/^from .compat import range_$/;"	i
range_	python-package/lightgbm/compat.py	/^    range_ = range$/;"	v
range_	python-package/lightgbm/compat.py	/^    range_ = xrange$/;"	v
rank	include/LightGBM/network.h	/^inline int Network::rank() {$/;"	f	class:LightGBM::Network
rank	src/network/linkers.h	/^inline int Linkers::rank() {$/;"	f	class:LightGBM::Linkers
rank_	include/LightGBM/network.h	/^  static THREAD_LOCAL int rank_;$/;"	m	class:LightGBM::Network
rank_	src/network/linkers.h	/^  int rank_;$/;"	m	class:LightGBM::Linkers
rank_	src/network/network.cpp	/^THREAD_LOCAL int Network::rank_ = 0;$/;"	m	class:LightGBM::Network	file:
rank_	src/treelearner/parallel_tree_learner.h	/^  int rank_;$/;"	m	class:LightGBM::DataParallelTreeLearner
rank_	src/treelearner/parallel_tree_learner.h	/^  int rank_;$/;"	m	class:LightGBM::FeatureParallelTreeLearner
rank_	src/treelearner/parallel_tree_learner.h	/^  int rank_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
rank_load_from_file_	include/LightGBM/dataset.h	/^  bool rank_load_from_file_; \/\/\/$/;"	m	class:LightGBM::Metadata
ranks	include/LightGBM/dataset.h	/^  inline const size_t* ranks() const { \/\/\/$/;"	f	class:LightGBM::Metadata
ranks	include/LightGBM/network.h	/^  std::vector<int> ranks;$/;"	m	class:LightGBM::RecursiveHalvingMap
ranks_	include/LightGBM/dataset.h	/^  std::vector<size_t> ranks_; \/\/\/$/;"	m	class:LightGBM::Metadata
ranks_	src/objective/IPWij_rank_objective.hpp	/^  const size_t* ranks_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
ranks_	src/objective/e2e_IPWi_rank_objective.hpp	/^  const size_t* ranks_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
ranks_	src/objective/e2e_IPWij_rank_objective.hpp	/^  const size_t* ranks_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
ranks_	src/objective/rank_objective.hpp	/^  const size_t* ranks_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
ranks_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  const size_t* ranks_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
ranks_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  const size_t* ranks_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
re_init_tree_time	src/boosting/goss.hpp	/^std::chrono::duration<double, std::milli> re_init_tree_time;$/;"	m	namespace:LightGBM
readlines	python-package/lightgbm/basic.py	/^    def readlines(self):$/;"	m	class:_temp_file
real_feature_idx_	include/LightGBM/dataset.h	/^  std::vector<int> real_feature_idx_;$/;"	m	class:LightGBM::Dataset
record_evaluation	python-package/lightgbm/__init__.py	/^from .callback import (early_stopping, print_evaluation, record_evaluation,$/;"	i
record_evaluation	python-package/lightgbm/callback.py	/^def record_evaluation(eval_result):$/;"	f
recursive_halving_map	src/network/linkers.h	/^inline const RecursiveHalvingMap& Linkers::recursive_halving_map() {$/;"	f	class:LightGBM::Linkers
recursive_halving_map_	include/LightGBM/network.h	/^  static THREAD_LOCAL RecursiveHalvingMap recursive_halving_map_;$/;"	m	class:LightGBM::Network
recursive_halving_map_	src/network/linkers.h	/^  RecursiveHalvingMap recursive_halving_map_;$/;"	m	class:LightGBM::Linkers
recursive_halving_map_	src/network/network.cpp	/^THREAD_LOCAL RecursiveHalvingMap Network::recursive_halving_map_;$/;"	m	class:LightGBM::Network	file:
recv_block_len	include/LightGBM/network.h	/^  std::vector<int> recv_block_len;$/;"	m	class:LightGBM::RecursiveHalvingMap
recv_block_start	include/LightGBM/network.h	/^  std::vector<int> recv_block_start;$/;"	m	class:LightGBM::RecursiveHalvingMap
reduce_scatter_ext_fun_	include/LightGBM/network.h	/^  static THREAD_LOCAL ReduceScatterFunction reduce_scatter_ext_fun_;$/;"	m	class:LightGBM::Network
reduce_scatter_ext_fun_	src/network/network.cpp	/^THREAD_LOCAL ReduceScatterFunction Network::reduce_scatter_ext_fun_ = nullptr;$/;"	m	class:LightGBM::Network	file:
reduce_scatter_size_	src/treelearner/parallel_tree_learner.h	/^  comm_size_t reduce_scatter_size_;$/;"	m	class:LightGBM::DataParallelTreeLearner
reduce_scatter_size_	src/treelearner/parallel_tree_learner.h	/^  comm_size_t reduce_scatter_size_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
reg_sqrt	include/LightGBM/config.h	/^  bool reg_sqrt = false;$/;"	m	struct:LightGBM::ObjectiveConfig
release	docs/conf.py	/^release = ''$/;"	v
reset_metrics	examples/python-guide/advanced_example.py	/^def reset_metrics():$/;"	f
reset_parameter	python-package/lightgbm/basic.py	/^    def reset_parameter(self, params):$/;"	m	class:Booster
reset_parameter	python-package/lightgbm/callback.py	/^def reset_parameter(**kwargs):$/;"	f
rho_	src/objective/regression_objective.hpp	/^  double rho_;$/;"	m	class:LightGBM::RegressionTweedieLoss
ridx	src/io/ordered_sparse_bin.hpp	/^    data_size_t ridx;  \/\/ data(row) index$/;"	m	struct:LightGBM::OrderedSparseBin::SparsePair
right_child_	include/LightGBM/tree.h	/^  std::vector<int> right_child_;$/;"	m	class:LightGBM::Tree
right_cnts_buf_	src/boosting/gbdt.h	/^  std::vector<data_size_t> right_cnts_buf_;$/;"	m	class:LightGBM::GBDT
right_cnts_buf_	src/treelearner/data_partition.hpp	/^  std::vector<data_size_t> right_cnts_buf_;$/;"	m	class:LightGBM::DataPartition
right_count	src/treelearner/split_info.hpp	/^  data_size_t right_count = 0;$/;"	m	struct:LightGBM::LightSplitInfo
right_count	src/treelearner/split_info.hpp	/^  data_size_t right_count = 0;$/;"	m	struct:LightGBM::SplitInfo
right_output	src/treelearner/split_info.hpp	/^  double right_output = 0.0;$/;"	m	struct:LightGBM::SplitInfo
right_sum_gradient	src/treelearner/split_info.hpp	/^  double right_sum_gradient = 0;$/;"	m	struct:LightGBM::SplitInfo
right_sum_hessian	src/treelearner/split_info.hpp	/^  double right_sum_hessian = 0;$/;"	m	struct:LightGBM::SplitInfo
right_write_pos_buf_	src/boosting/gbdt.h	/^  std::vector<data_size_t> right_write_pos_buf_;$/;"	m	class:LightGBM::GBDT
right_write_pos_buf_	src/treelearner/data_partition.hpp	/^  std::vector<data_size_t> right_write_pos_buf_;$/;"	m	class:LightGBM::DataPartition
rollback_one_iter	python-package/lightgbm/basic.py	/^    def rollback_one_iter(self):$/;"	m	class:Booster
round_period	include/LightGBM/prediction_early_stop.h	/^  int          round_period;       \/\/ call callback_function every `runPeriod` iterations$/;"	m	struct:LightGBM::PredictionEarlyStopInstance
round_period	include/LightGBM/prediction_early_stop.h	/^  int round_period;$/;"	m	struct:LightGBM::PredictionEarlyStopConfig
run	python-package/setup.py	/^    def run(self):$/;"	m	class:CustomInstall
run	python-package/setup.py	/^    def run(self):$/;"	m	class:CustomSdist
s	include/LightGBM/R_object_helper.h	/^typedef union { VECTOR_SER s; double align; } SEXPREC_ALIGN;$/;"	m	union:__anon2
s	src/treelearner/gpu_tree_learner.h	/^      uint8_t s[4];$/;"	m	struct:LightGBM::GPUTreeLearner::Feature4
save_binary	python-package/lightgbm/basic.py	/^    def save_binary(self, filename):$/;"	m	class:Dataset
save_model	python-package/lightgbm/basic.py	/^    def save_model(self, filename, num_iteration=-1):$/;"	m	class:Booster
scalar	include/LightGBM/R_object_helper.h	/^  unsigned int scalar : 1;$/;"	m	struct:lgbm_sxpinfo
scale_pos_weight	include/LightGBM/config.h	/^  double scale_pos_weight = 1.0;$/;"	m	struct:LightGBM::ObjectiveConfig
scale_pos_weight_	src/objective/binary_objective.hpp	/^  double scale_pos_weight_;$/;"	m	class:LightGBM::BinaryLogloss
scipy	python-package/lightgbm/basic.py	/^import scipy.sparse$/;"	i
score	src/boosting/score_updater.hpp	/^  inline const double* score() const { return score_.data(); }$/;"	f	class:LightGBM::ScoreUpdater
score_	src/boosting/score_updater.hpp	/^  std::vector<double> score_;$/;"	m	class:LightGBM::ScoreUpdater
score_t	include/LightGBM/meta.h	/^typedef double score_t;$/;"	t	namespace:LightGBM
score_t	include/LightGBM/meta.h	/^typedef float score_t;$/;"	t	namespace:LightGBM
sdist	python-package/setup.py	/^from setuptools.command.sdist import sdist$/;"	i
seed	include/LightGBM/config.h	/^  int seed = 0;$/;"	m	struct:LightGBM::OverallConfig
send_block_len	include/LightGBM/network.h	/^  std::vector<int> send_block_len;$/;"	m	class:LightGBM::RecursiveHalvingMap
send_block_start	include/LightGBM/network.h	/^  std::vector<int> send_block_start;$/;"	m	class:LightGBM::RecursiveHalvingMap
set_attr	python-package/lightgbm/basic.py	/^    def set_attr(self, **kwargs):$/;"	m	class:Booster
set_categorical_feature	python-package/lightgbm/basic.py	/^    def set_categorical_feature(self, categorical_feature):$/;"	m	class:Dataset
set_feature_name	python-package/lightgbm/basic.py	/^    def set_feature_name(self, feature_name):$/;"	m	class:Dataset
set_feature_names	include/LightGBM/dataset.h	/^  inline void set_feature_names(const std::vector<std::string>& feature_names) {$/;"	f	class:LightGBM::Dataset
set_field	python-package/lightgbm/basic.py	/^    def set_field(self, field_name, data):$/;"	m	class:Dataset
set_group	python-package/lightgbm/basic.py	/^    def set_group(self, group):$/;"	m	class:Dataset
set_init_score	python-package/lightgbm/basic.py	/^    def set_init_score(self, init_score):$/;"	m	class:Dataset
set_is_splittable	src/treelearner/feature_histogram.hpp	/^  void set_is_splittable(bool val) { is_splittable_ = val; }$/;"	f	class:LightGBM::FeatureHistogram
set_label	python-package/lightgbm/basic.py	/^    def set_label(self, label):$/;"	m	class:Dataset
set_network	python-package/lightgbm/basic.py	/^    def set_network(self, machines, local_listen_port=12400,$/;"	m	class:Booster
set_params	python-package/lightgbm/sklearn.py	/^    def set_params(self, **params):$/;"	m	class:LGBMModel
set_reference	python-package/lightgbm/basic.py	/^    def set_reference(self, reference):$/;"	m	class:Dataset
set_train_data_name	python-package/lightgbm/basic.py	/^    def set_train_data_name(self, name):$/;"	m	class:Booster
set_weight	python-package/lightgbm/basic.py	/^    def set_weight(self, weight):$/;"	m	class:Dataset
setup	docs/conf.py	/^def setup(app):$/;"	f
setup	python-package/setup.py	/^from setuptools import find_packages, setup$/;"	i
shape	include/LightGBM/json11.hpp	/^    typedef std::initializer_list<std::pair<std::string, Type>> shape;$/;"	t	class:json11::final
shrinkage	include/LightGBM/tree.h	/^  inline double shrinkage() const {$/;"	f	class:LightGBM::Tree
shrinkage_	include/LightGBM/tree.h	/^  double shrinkage_;$/;"	m	class:LightGBM::Tree
shrinkage_rate_	src/boosting/gbdt.h	/^  double shrinkage_rate_;$/;"	m	class:LightGBM::GBDT
shutil	python-package/setup.py	/^import shutil$/;"	i
sigmoid	include/LightGBM/config.h	/^  double sigmoid = 1.0;$/;"	m	struct:LightGBM::MetricConfig
sigmoid	include/LightGBM/config.h	/^  double sigmoid = 1.0;$/;"	m	struct:LightGBM::ObjectiveConfig
sigmoid_	src/objective/IPWi_rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_	src/objective/IPWij_rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_	src/objective/SCOREwy_rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_	src/objective/SCOREzn_rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_	src/objective/binary_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::BinaryLogloss
sigmoid_	src/objective/e2e_IPWi_rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_	src/objective/e2e_IPWij_rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_	src/objective/multiclass_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::MulticlassOVA
sigmoid_	src/objective/rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_	src/objective/zinu/ndcg_rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_	src/objective/zinu/score_rank_objective.hpp	/^  double sigmoid_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/IPWi_rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/IPWij_rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/SCOREwy_rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/SCOREzn_rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/e2e_IPWi_rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/e2e_IPWij_rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/zinu/ndcg_rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_	src/objective/zinu/score_rank_objective.hpp	/^  std::vector<double> sigmoid_table_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/IPWi_rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/IPWij_rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/SCOREwy_rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/SCOREzn_rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/e2e_IPWi_rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/e2e_IPWij_rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/zinu/ndcg_rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
sigmoid_table_idx_factor_	src/objective/zinu/score_rank_objective.hpp	/^  double sigmoid_table_idx_factor_;$/;"	m	class:LightGBM::LambdarankNDCG
silent_call	python-package/setup.py	/^def silent_call(cmd, raise_error=False, error_msg=''):$/;"	f
skip_bytes_	include/LightGBM/utils/text_reader.h	/^  int skip_bytes_ = 0;$/;"	m	class:LightGBM::TextReader
skip_drop	include/LightGBM/config.h	/^  double skip_drop = 0.5;$/;"	m	struct:LightGBM::BoostingConfig
sklearn_at_least_019	tests/python_package_test/test_sklearn.py	/^    sklearn_at_least_019 = False$/;"	v
sklearn_at_least_019	tests/python_package_test/test_sklearn.py	/^    sklearn_at_least_019 = True$/;"	v
smaller_buffer_read_start_pos_	src/treelearner/parallel_tree_learner.h	/^  std::vector<comm_size_t> smaller_buffer_read_start_pos_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
smaller_is_feature_aggregated_	src/treelearner/parallel_tree_learner.h	/^  std::vector<bool> smaller_is_feature_aggregated_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
smaller_leaf_histogram_array_	src/treelearner/serial_tree_learner.h	/^  FeatureHistogram* smaller_leaf_histogram_array_;$/;"	m	class:LightGBM::SerialTreeLearner
smaller_leaf_histogram_array_global_	src/treelearner/parallel_tree_learner.h	/^  std::unique_ptr<FeatureHistogram[]> smaller_leaf_histogram_array_global_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
smaller_leaf_histogram_data_	src/treelearner/parallel_tree_learner.h	/^  std::vector<HistogramBinEntry> smaller_leaf_histogram_data_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
smaller_leaf_splits_	src/treelearner/serial_tree_learner.h	/^  std::unique_ptr<LeafSplits> smaller_leaf_splits_;$/;"	m	class:LightGBM::SerialTreeLearner
smaller_leaf_splits_global_	src/treelearner/parallel_tree_learner.h	/^  std::unique_ptr<LeafSplits> smaller_leaf_splits_global_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
snapshot_freq	include/LightGBM/config.h	/^  int snapshot_freq = -1;$/;"	m	struct:LightGBM::IOConfig
snprintf	include/LightGBM/json11.hpp	/^            #define snprintf /;"	d
socket_timeout_	src/network/linkers.h	/^  int socket_timeout_;$/;"	m	class:LightGBM::Linkers
sockfd_	src/network/socket_wrapper.hpp	/^  SOCKET sockfd_;$/;"	m	class:LightGBM::TcpSocket
spare	include/LightGBM/R_object_helper.h	/^  unsigned int spare : 1;$/;"	m	struct:lgbm_sxpinfo
sparse	python-package/lightgbm/basic.py	/^import scipy.sparse$/;"	i
sparse	tests/c_api_test/test_.py	/^from scipy import sparse$/;"	i
sparse_feature_group_map_	src/treelearner/gpu_tree_learner.h	/^  std::vector<int> sparse_feature_group_map_;$/;"	m	class:LightGBM::GPUTreeLearner
sparse_rate	include/LightGBM/bin.h	/^  inline double sparse_rate() const { return sparse_rate_; }$/;"	f	class:LightGBM::BinMapper
sparse_rate_	include/LightGBM/bin.h	/^  double sparse_rate_;$/;"	m	class:LightGBM::BinMapper
sparse_threshold	include/LightGBM/config.h	/^  double sparse_threshold = 0.8;$/;"	m	struct:LightGBM::IOConfig
sparse_threshold_	include/LightGBM/dataset.h	/^  double sparse_threshold_;$/;"	m	class:LightGBM::Dataset
sphinx	docs/conf.py	/^import sphinx$/;"	i
split_feature	include/LightGBM/tree.h	/^  inline int split_feature(int split_idx) const { return split_feature_[split_idx]; }$/;"	f	class:LightGBM::Tree
split_feature_	include/LightGBM/tree.h	/^  std::vector<int> split_feature_;$/;"	m	class:LightGBM::Tree
split_feature_inner_	include/LightGBM/tree.h	/^  std::vector<int> split_feature_inner_;$/;"	m	class:LightGBM::Tree
split_gain	include/LightGBM/tree.h	/^  inline double split_gain(int split_idx) const { return split_gain_[split_idx]; }$/;"	f	class:LightGBM::Tree
split_gain_	include/LightGBM/tree.h	/^  std::vector<float> split_gain_;$/;"	m	class:LightGBM::Tree
split_time	src/treelearner/serial_tree_learner.cpp	/^std::chrono::duration<double, std::milli> split_time;$/;"	m	namespace:LightGBM	file:
sqrt_	src/objective/regression_objective.hpp	/^  bool sqrt_;$/;"	m	class:LightGBM::RegressionL2loss
static_null	src/io/json11.cpp	/^static const Json & static_null() {$/;"	f	namespace:json11
statics	src/io/json11.cpp	/^static const Statics & statics() {$/;"	f	namespace:json11
str	src/io/json11.cpp	/^    const string &str;$/;"	m	struct:json11::__anon3::final	file:
strategy	src/io/json11.cpp	/^    const JsonParse strategy;$/;"	m	struct:json11::__anon3::final	file:
string_type	python-package/lightgbm/compat.py	/^    string_type = basestring$/;"	v
string_type	python-package/lightgbm/compat.py	/^    string_type = str$/;"	v
string_value	src/io/json11.cpp	/^const string &            JsonValue::string_value()              const { return statics().empty_string; }$/;"	f	class:json11::JsonValue
string_value	src/io/json11.cpp	/^const string & Json::string_value()               const { return m_ptr->string_value(); }$/;"	f	class:json11::Json
struct	python-package/setup.py	/^import struct$/;"	i
subprocess	python-package/setup.py	/^import subprocess$/;"	i
subprocess	tests/python_package_test/test_basic.py	/^import subprocess$/;"	i
subset	python-package/lightgbm/basic.py	/^    def subset(self, used_indices, params=None):$/;"	m	class:Dataset
subset_time	src/boosting/goss.hpp	/^std::chrono::duration<double, std::milli> subset_time;$/;"	m	namespace:LightGBM
sum_cost_	src/objective/IPWij_rank_objective.hpp	/^  mutable std::vector<label_t> sum_cost_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
sum_cost_	src/objective/e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<label_t> sum_cost_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
sum_cost_	src/objective/e2e_IPWij_rank_objective.hpp	/^  mutable std::vector<label_t> sum_cost_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
sum_cost_buffer_	src/objective/IPWij_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> sum_cost_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
sum_cost_buffer_	src/objective/e2e_IPWi_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> sum_cost_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
sum_cost_buffer_	src/objective/e2e_IPWij_rank_objective.hpp	/^  mutable std::vector<std::vector<label_t>> sum_cost_buffer_; \/\/\/$/;"	m	class:LightGBM::LambdarankNDCG
sum_gradients	include/LightGBM/bin.h	/^  double sum_gradients = 0.0f;$/;"	m	struct:LightGBM::HistogramBinEntry
sum_gradients	src/treelearner/gpu_tree_learner.h	/^    score_t sum_gradients;$/;"	m	struct:LightGBM::GPUTreeLearner::GPUHistogramBinEntry
sum_gradients	src/treelearner/leaf_splits.hpp	/^  double sum_gradients() const { return sum_gradients_; }$/;"	f	class:LightGBM::LeafSplits
sum_gradients_	src/treelearner/leaf_splits.hpp	/^  double sum_gradients_;$/;"	m	class:LightGBM::LeafSplits
sum_hessians	include/LightGBM/bin.h	/^  double sum_hessians = 0.0f;$/;"	m	struct:LightGBM::HistogramBinEntry
sum_hessians	src/treelearner/gpu_tree_learner.h	/^    score_t sum_hessians;$/;"	m	struct:LightGBM::GPUTreeLearner::GPUHistogramBinEntry
sum_hessians	src/treelearner/leaf_splits.hpp	/^  double sum_hessians() const { return sum_hessians_; }$/;"	f	class:LightGBM::LeafSplits
sum_hessians_	src/treelearner/leaf_splits.hpp	/^  double sum_hessians_;$/;"	m	class:LightGBM::LeafSplits
sum_query_weights_	src/metric/map_metric.hpp	/^  double sum_query_weights_;$/;"	m	class:LightGBM::MapMetric
sum_query_weights_	src/metric/rank_metric.hpp	/^  double sum_query_weights_;$/;"	m	class:LightGBM::NDCGMetric
sum_weight_	src/boosting/dart.hpp	/^  double sum_weight_;$/;"	m	class:LightGBM::DART
sum_weights_	src/metric/binary_metric.hpp	/^  double sum_weights_;$/;"	m	class:LightGBM::AUCMetric
sum_weights_	src/metric/binary_metric.hpp	/^  double sum_weights_;$/;"	m	class:LightGBM::BinaryMetric
sum_weights_	src/metric/multiclass_metric.hpp	/^  double sum_weights_;$/;"	m	class:LightGBM::MulticlassMetric
sum_weights_	src/metric/regression_metric.hpp	/^  double sum_weights_;$/;"	m	class:LightGBM::RegressionMetric
sum_weights_	src/metric/xentropy_metric.hpp	/^  double sum_weights_;$/;"	m	class:LightGBM::CrossEntropyMetric
sum_weights_	src/metric/xentropy_metric.hpp	/^  double sum_weights_;$/;"	m	class:LightGBM::KullbackLeiblerDivergence
sxpinfo	include/LightGBM/R_object_helper.h	/^  struct lgbm_sxpinfo sxpinfo;$/;"	m	struct:LGBM_SER	typeref:struct:LGBM_SER::lgbm_sxpinfo
sxpinfo	include/LightGBM/R_object_helper.h	/^  struct lgbm_sxpinfo sxpinfo;$/;"	m	struct:VECTOR_SER	typeref:struct:VECTOR_SER::lgbm_sxpinfo
symsxp	include/LightGBM/R_object_helper.h	/^    struct lgbm_symsxp symsxp;$/;"	m	union:LGBM_SER::__anon1	typeref:struct:LGBM_SER::__anon1::lgbm_symsxp
sync_counters_	src/treelearner/gpu_tree_learner.h	/^  std::unique_ptr<boost::compute::vector<int>> sync_counters_;$/;"	m	class:LightGBM::GPUTreeLearner
sys	.nuget/create_nuget.py	/^import sys$/;"	i
sys	docs/conf.py	/^import sys$/;"	i
sys	python-package/lightgbm/compat.py	/^import sys$/;"	i
sys	python-package/setup.py	/^import sys$/;"	i
sys	tests/c_api_test/test_.py	/^import sys$/;"	i
t	src/io/json11.cpp	/^    const std::shared_ptr<JsonValue> t = make_shared<JsonBoolean>(true);$/;"	m	struct:json11::Statics	file:
tagval	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *tagval;$/;"	m	struct:lgbm_listsxp	typeref:struct:lgbm_listsxp::LGBM_SER
task_type	include/LightGBM/config.h	/^  TaskType task_type = TaskType::kTrain;$/;"	m	struct:LightGBM::OverallConfig
temp_left_indices_	src/treelearner/data_partition.hpp	/^  std::vector<data_size_t> temp_left_indices_;$/;"	m	class:LightGBM::DataPartition
temp_right_indices_	src/treelearner/data_partition.hpp	/^  std::vector<data_size_t> temp_right_indices_;$/;"	m	class:LightGBM::DataPartition
tempfile	tests/python_package_test/test_basic.py	/^import tempfile$/;"	i
templates_path	docs/conf.py	/^templates_path = ['_templates']$/;"	v
test	tests/python_package_test/test_basic.py	/^    def test(self):$/;"	m	class:TestBasic
test_binary	tests/python_package_test/test_consistency.py	/^    def test_binary(self):$/;"	m	class:TestEngine
test_binary	tests/python_package_test/test_engine.py	/^    def test_binary(self):$/;"	m	class:TestEngine
test_binary	tests/python_package_test/test_sklearn.py	/^    def test_binary(self):$/;"	m	class:TestSklearn
test_binary_classification_with_custom_objective	tests/python_package_test/test_sklearn.py	/^    def test_binary_classification_with_custom_objective(self):$/;"	m	class:TestSklearn
test_booster	tests/c_api_test/test_.py	/^def test_booster():$/;"	f
test_categorical_handle	tests/python_package_test/test_engine.py	/^    def test_categorical_handle(self):$/;"	m	class:TestEngine
test_categorical_handle2	tests/python_package_test/test_engine.py	/^    def test_categorical_handle2(self):$/;"	m	class:TestEngine
test_clone_and_property	tests/python_package_test/test_sklearn.py	/^    def test_clone_and_property(self):$/;"	m	class:TestSklearn
test_continue_train	tests/python_package_test/test_engine.py	/^    def test_continue_train(self):$/;"	m	class:TestEngine
test_continue_train_multiclass	tests/python_package_test/test_engine.py	/^    def test_continue_train_multiclass(self):$/;"	m	class:TestEngine
test_contribs	tests/python_package_test/test_engine.py	/^    def test_contribs(self):$/;"	m	class:TestEngine
test_cv	tests/python_package_test/test_engine.py	/^    def test_cv(self):$/;"	m	class:TestEngine
test_dart	tests/python_package_test/test_sklearn.py	/^    def test_dart(self):$/;"	m	class:TestSklearn
test_dataset	tests/c_api_test/test_.py	/^def test_dataset():$/;"	f
test_early_stopping	tests/python_package_test/test_engine.py	/^    def test_early_stopping(self):$/;"	m	class:TestEngine
test_feature_importances_single_leaf	tests/python_package_test/test_sklearn.py	/^    def test_feature_importances_single_leaf(self):$/;"	m	class:TestSklearn
test_feature_name	tests/python_package_test/test_engine.py	/^    def test_feature_name(self):$/;"	m	class:TestEngine
test_free_dataset	tests/c_api_test/test_.py	/^def test_free_dataset(handle):$/;"	f
test_grid_search	tests/python_package_test/test_sklearn.py	/^    def test_grid_search(self):$/;"	m	class:TestSklearn
test_joblib	tests/python_package_test/test_sklearn.py	/^    def test_joblib(self):$/;"	m	class:TestSklearn
test_lambdarank	tests/python_package_test/test_consistency.py	/^    def test_lambdarank(self):$/;"	m	class:TestEngine
test_lambdarank	tests/python_package_test/test_sklearn.py	/^    def test_lambdarank(self):$/;"	m	class:TestSklearn
test_load_from_csc	tests/c_api_test/test_.py	/^def test_load_from_csc(filename, reference):$/;"	f
test_load_from_csr	tests/c_api_test/test_.py	/^def test_load_from_csr(filename, reference):$/;"	f
test_load_from_file	tests/c_api_test/test_.py	/^def test_load_from_file(filename, reference):$/;"	f
test_load_from_mat	tests/c_api_test/test_.py	/^def test_load_from_mat(filename, reference):$/;"	f
test_missing_value_handle	tests/python_package_test/test_engine.py	/^    def test_missing_value_handle(self):$/;"	m	class:TestEngine
test_missing_value_handle_na	tests/python_package_test/test_engine.py	/^    def test_missing_value_handle_na(self):$/;"	m	class:TestEngine
test_missing_value_handle_none	tests/python_package_test/test_engine.py	/^    def test_missing_value_handle_none(self):$/;"	m	class:TestEngine
test_missing_value_handle_zero	tests/python_package_test/test_engine.py	/^    def test_missing_value_handle_zero(self):$/;"	m	class:TestEngine
test_monotone_constraint	tests/python_package_test/test_engine.py	/^    def test_monotone_constraint(self):$/;"	m	class:TestEngine
test_multiclass	tests/python_package_test/test_consistency.py	/^    def test_multiclass(self):$/;"	m	class:TestEngine
test_multiclass	tests/python_package_test/test_engine.py	/^    def test_multiclass(self):$/;"	m	class:TestEngine
test_multiclass	tests/python_package_test/test_sklearn.py	/^    def test_multiclass(self):$/;"	m	class:TestSklearn
test_multiclass_prediction_early_stopping	tests/python_package_test/test_engine.py	/^    def test_multiclass_prediction_early_stopping(self):$/;"	m	class:TestEngine
test_pandas_categorical	tests/python_package_test/test_engine.py	/^    def test_pandas_categorical(self):$/;"	m	class:TestEngine
test_pandas_categorical	tests/python_package_test/test_sklearn.py	/^    def test_pandas_categorical(self):$/;"	m	class:TestSklearn
test_plot_importance	tests/python_package_test/test_plotting.py	/^    def test_plot_importance(self):$/;"	m	class:TestBasic
test_plot_metrics	tests/python_package_test/test_plotting.py	/^    def test_plot_metrics(self):$/;"	m	class:TestBasic
test_plot_tree	tests/python_package_test/test_plotting.py	/^    def test_plot_tree(self):$/;"	m	class:TestBasic
test_predict	tests/python_package_test/test_sklearn.py	/^    def test_predict(self):$/;"	m	class:TestSklearn
test_reference_chain	tests/python_package_test/test_engine.py	/^    def test_reference_chain(self):$/;"	m	class:TestEngine
test_regression	tests/python_package_test/test_consistency.py	/^    def test_regression(self):$/;"	m	class:TestEngine
test_regression	tests/python_package_test/test_engine.py	/^    def test_regression(self):$/;"	m	class:TestEngine
test_regression	tests/python_package_test/test_sklearn.py	/^    def test_regression(self):$/;"	m	class:TestSklearn
test_regression_with_custom_objective	tests/python_package_test/test_sklearn.py	/^    def test_regression_with_custom_objective(self):$/;"	m	class:TestSklearn
test_rf	tests/python_package_test/test_engine.py	/^    def test_rf(self):$/;"	m	class:TestEngine
test_save_load_copy_pickle	tests/python_package_test/test_engine.py	/^    def test_save_load_copy_pickle(self):$/;"	m	class:TestEngine
test_save_to_binary	tests/c_api_test/test_.py	/^def test_save_to_binary(handle, filename):$/;"	f
test_sklearn_backward_compatibility	tests/python_package_test/test_sklearn.py	/^    def test_sklearn_backward_compatibility(self):$/;"	m	class:TestSklearn
test_sklearn_integration	tests/python_package_test/test_sklearn.py	/^    def test_sklearn_integration(self):$/;"	m	class:TestSklearn
test_sliced_data	tests/python_package_test/test_engine.py	/^    def test_sliced_data(self):$/;"	m	class:TestEngine
test_template	tests/python_package_test/test_engine.py	/^        def test_template(init_model=None, return_model=False):$/;"	f	function:TestEngine.test_save_load_copy_pickle
threshold	src/treelearner/split_info.hpp	/^  uint32_t threshold = 0;$/;"	m	struct:LightGBM::SplitInfo
threshold_	include/LightGBM/tree.h	/^  std::vector<double> threshold_;$/;"	m	class:LightGBM::Tree
threshold_in_bin_	include/LightGBM/tree.h	/^  std::vector<uint32_t> threshold_in_bin_;$/;"	m	class:LightGBM::Tree
time_out	include/LightGBM/config.h	/^  int time_out = 120;  \/\/ in minutes$/;"	m	struct:LightGBM::NetworkConfig
tmp_grad_	src/boosting/rf.hpp	/^  std::vector<score_t> tmp_grad_;$/;"	m	class:LightGBM::RF
tmp_hess_	src/boosting/rf.hpp	/^  std::vector<score_t> tmp_hess_;$/;"	m	class:LightGBM::RF
tmp_indice_right_	src/boosting/goss.hpp	/^  std::vector<data_size_t> tmp_indice_right_;$/;"	m	class:LightGBM::GOSS
tmp_indices_	src/boosting/gbdt.h	/^  std::vector<data_size_t> tmp_indices_;$/;"	m	class:LightGBM::GBDT
tmp_subset_	src/boosting/gbdt.h	/^  std::unique_ptr<Dataset> tmp_subset_;$/;"	m	class:LightGBM::GBDT
todo_include_todos	docs/conf.py	/^todo_include_todos = False$/;"	v
tolower	include/LightGBM/utils/common.h	/^inline static char tolower(char in) {$/;"	f	namespace:LightGBM::Common
top_k	include/LightGBM/config.h	/^  int top_k = 20;$/;"	m	struct:LightGBM::TreeConfig
top_k_	src/treelearner/parallel_tree_learner.h	/^  int top_k_;$/;"	m	class:LightGBM::VotingParallelTreeLearner
top_rate	include/LightGBM/config.h	/^  double top_rate = 0.2;$/;"	m	struct:LightGBM::BoostingConfig
total_columns_	src/io/parser.hpp	/^  int total_columns_ = -1;$/;"	m	class:LightGBM::CSVParser
total_columns_	src/io/parser.hpp	/^  int total_columns_ = -1;$/;"	m	class:LightGBM::TSVParser
total_size_	src/treelearner/feature_histogram.hpp	/^  int total_size_;$/;"	m	class:LightGBM::HistogramPool
trace	include/LightGBM/R_object_helper.h	/^  unsigned int trace : 1;$/;"	m	struct:lgbm_sxpinfo
train	python-package/lightgbm/__init__.py	/^from .engine import cv, train$/;"	i
train	python-package/lightgbm/engine.py	/^def train(params, train_set, num_boost_round=100,$/;"	f
train	python-package/lightgbm/sklearn.py	/^from .engine import train$/;"	i
train_and_get_predictions	tests/python_package_test/test_engine.py	/^        def train_and_get_predictions(features, labels):$/;"	f	function:TestEngine.test_sliced_data
train_data_	include/LightGBM/application.h	/^  std::unique_ptr<Dataset> train_data_;$/;"	m	class:LightGBM::Application
train_data_	src/boosting/gbdt.h	/^  const Dataset* train_data_;$/;"	m	class:LightGBM::GBDT
train_data_	src/c_api.cpp	/^  const Dataset* train_data_;$/;"	m	class:LightGBM::Booster	file:
train_data_	src/treelearner/serial_tree_learner.h	/^  const Dataset* train_data_;$/;"	m	class:LightGBM::SerialTreeLearner
train_metric_	include/LightGBM/application.h	/^  std::vector<std::unique_ptr<Metric>> train_metric_;$/;"	m	class:LightGBM::Application
train_metric_	src/c_api.cpp	/^  std::vector<std::unique_ptr<Metric>> train_metric_;$/;"	m	class:LightGBM::Booster	file:
train_predict_check	tests/python_package_test/test_consistency.py	/^    def train_predict_check(self, lgb_train, X_test, X_test_fn, sk_pred):$/;"	m	class:FileLoader
train_score_time	src/boosting/gbdt.cpp	/^std::chrono::duration<double, std::milli> train_score_time;$/;"	m	namespace:LightGBM	file:
train_score_updater_	src/boosting/gbdt.h	/^  std::unique_ptr<ScoreUpdater> train_score_updater_;$/;"	m	class:LightGBM::GBDT
train_test_split	tests/python_package_test/test_basic.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	tests/python_package_test/test_engine.py	/^from sklearn.model_selection import train_test_split, TimeSeriesSplit$/;"	i
train_test_split	tests/python_package_test/test_plotting.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	tests/python_package_test/test_sklearn.py	/^from sklearn.model_selection import GridSearchCV, train_test_split$/;"	i
training_metrics_	src/boosting/gbdt.h	/^  std::vector<const Metric*> training_metrics_;$/;"	m	class:LightGBM::GBDT
trans_label_	src/objective/regression_objective.hpp	/^  std::vector<label_t> trans_label_;$/;"	m	class:LightGBM::RegressionL2loss
tree_config	include/LightGBM/config.h	/^  TreeConfig tree_config;$/;"	m	struct:LightGBM::BoostingConfig
tree_config	src/treelearner/feature_histogram.hpp	/^  const TreeConfig* tree_config;$/;"	m	class:LightGBM::FeatureMetainfo
tree_config_	src/treelearner/serial_tree_learner.h	/^  const TreeConfig* tree_config_;$/;"	m	class:LightGBM::SerialTreeLearner
tree_learner_	src/boosting/gbdt.h	/^  std::unique_ptr<TreeLearner> tree_learner_;$/;"	m	class:LightGBM::GBDT
tree_learner_type	include/LightGBM/config.h	/^  std::string tree_learner_type = kDefaultTreeLearnerType;$/;"	m	struct:LightGBM::BoostingConfig
tree_time	src/boosting/gbdt.cpp	/^std::chrono::duration<double, std::milli> tree_time;$/;"	m	namespace:LightGBM	file:
tree_weight_	src/boosting/dart.hpp	/^  std::vector<double> tree_weight_;$/;"	m	class:LightGBM::DART
truelength	include/LightGBM/R_object_helper.h	/^  R_xlen_t truelength;$/;"	m	struct:lgbm_vecsxp
tweedie_variance_power	include/LightGBM/config.h	/^  double tweedie_variance_power = 1.5;$/;"	m	struct:LightGBM::MetricConfig
tweedie_variance_power	include/LightGBM/config.h	/^  double tweedie_variance_power = 1.5;$/;"	m	struct:LightGBM::ObjectiveConfig
type	include/LightGBM/R_object_helper.h	/^  unsigned int type : 5;$/;"	m	struct:lgbm_sxpinfo
type	include/LightGBM/json11.hpp	/^            int>::type = 0>$/;"	m	class:json11::final
type	include/LightGBM/network.h	/^  RecursiveHalvingNodeType type;$/;"	m	class:LightGBM::RecursiveHalvingMap
type	src/io/json11.cpp	/^Json::Type Json::type()                           const { return m_ptr->type();         }$/;"	f	class:json11::Json
u	include/LightGBM/R_object_helper.h	/^  } u;$/;"	m	struct:LGBM_SER	typeref:union:LGBM_SER::__anon1
ulp_diff	src/treelearner/gpu_tree_learner.cpp	/^    static int64_t ulp_diff(Float_t a, Float_t b) {$/;"	f	union:LightGBM::Float_t
uniform_drop	include/LightGBM/config.h	/^  bool uniform_drop = false;$/;"	m	struct:LightGBM::BoostingConfig
unittest	tests/python_package_test/test_basic.py	/^import unittest$/;"	i
unittest	tests/python_package_test/test_consistency.py	/^import unittest$/;"	i
unittest	tests/python_package_test/test_engine.py	/^import unittest$/;"	i
unittest	tests/python_package_test/test_plotting.py	/^import unittest$/;"	i
unittest	tests/python_package_test/test_sklearn.py	/^import unittest$/;"	i
update	python-package/lightgbm/basic.py	/^    def update(self, train_set=None, fobj=None):$/;"	m	class:Booster
use_bagging_	src/treelearner/gpu_tree_learner.h	/^  bool use_bagging_;$/;"	m	class:LightGBM::GPUTreeLearner
use_missing	include/LightGBM/config.h	/^  bool use_missing = true;$/;"	m	struct:LightGBM::IOConfig
use_two_round_loading	include/LightGBM/config.h	/^  bool use_two_round_loading = false;$/;"	m	struct:LightGBM::IOConfig
used_data_count_	src/treelearner/data_partition.hpp	/^  data_size_t used_data_count_;$/;"	m	class:LightGBM::DataPartition
used_data_indices_	src/treelearner/data_partition.hpp	/^  const data_size_t* used_data_indices_;$/;"	m	class:LightGBM::DataPartition
used_feature_map_	include/LightGBM/dataset.h	/^  std::vector<int> used_feature_map_;$/;"	m	class:LightGBM::Dataset
user_options	python-package/setup.py	/^    user_options = install.user_options + [$/;"	v	class:CustomInstall
valid_data_filenames	include/LightGBM/config.h	/^  std::vector<std::string> valid_data_filenames;$/;"	m	struct:LightGBM::IOConfig
valid_data_initscores	include/LightGBM/config.h	/^  std::vector<std::string> valid_data_initscores;$/;"	m	struct:LightGBM::IOConfig
valid_datas_	include/LightGBM/application.h	/^  std::vector<std::unique_ptr<Dataset>> valid_datas_;$/;"	m	class:LightGBM::Application
valid_feature_indices_	src/treelearner/serial_tree_learner.h	/^  std::vector<int> valid_feature_indices_;$/;"	m	class:LightGBM::SerialTreeLearner
valid_metrics_	include/LightGBM/application.h	/^  std::vector<std::vector<std::unique_ptr<Metric>>> valid_metrics_;$/;"	m	class:LightGBM::Application
valid_metrics_	src/boosting/gbdt.h	/^  std::vector<std::vector<const Metric*>> valid_metrics_;$/;"	m	class:LightGBM::GBDT
valid_metrics_	src/c_api.cpp	/^  std::vector<std::vector<std::unique_ptr<Metric>>> valid_metrics_;$/;"	m	class:LightGBM::Booster	file:
valid_score_time	src/boosting/gbdt.cpp	/^std::chrono::duration<double, std::milli> valid_score_time;$/;"	m	namespace:LightGBM	file:
valid_score_updater_	src/boosting/gbdt.h	/^  std::vector<std::unique_ptr<ScoreUpdater>> valid_score_updater_;$/;"	m	class:LightGBM::GBDT
valid_sets	examples/python-guide/advanced_example.py	/^                valid_sets=lgb_eval)$/;"	v
valid_sets	examples/python-guide/advanced_example.py	/^                valid_sets=lgb_eval,$/;"	v
valid_sets	examples/python-guide/advanced_example.py	/^                valid_sets=lgb_train,  # eval training data$/;"	v
valid_sets	examples/python-guide/plot_example.py	/^                valid_sets=[lgb_train, lgb_test],$/;"	v
valid_sets	examples/python-guide/simple_example.py	/^                valid_sets=lgb_eval,$/;"	v
vals_	src/io/sparse_bin.hpp	/^  std::vector<VAL_T> vals_;$/;"	m	class:LightGBM::SparseBin
value	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *value;$/;"	m	struct:lgbm_promsxp	typeref:struct:lgbm_promsxp::LGBM_SER
value	include/LightGBM/R_object_helper.h	/^  struct LGBM_SER *value;$/;"	m	struct:lgbm_symsxp	typeref:struct:lgbm_symsxp::LGBM_SER
value	include/LightGBM/json11.hpp	/^        && std::is_constructible<Json, decltype(std::declval<M>().begin()->second)>::value,$/;"	m	class:json11::final
vecsxp	include/LightGBM/R_object_helper.h	/^  struct lgbm_vecsxp vecsxp;$/;"	m	struct:VECTOR_SER	typeref:struct:VECTOR_SER::lgbm_vecsxp
verbose_eval	examples/python-guide/plot_example.py	/^                verbose_eval=10)$/;"	v
verbosity	include/LightGBM/config.h	/^  int verbosity = 1;$/;"	m	struct:LightGBM::IOConfig
version	.nuget/create_nuget.py	/^version = open('..\/VERSION.txt').read().strip()$/;"	v
version	docs/conf.py	/^version = ''$/;"	v
version	python-package/setup.py	/^    version = open(os.path.join(dir_path, 'lightgbm', 'VERSION.txt')).read().strip()$/;"	v
warnings	python-package/lightgbm/basic.py	/^import warnings$/;"	i
warnings	python-package/lightgbm/engine.py	/^import warnings$/;"	i
warnings	python-package/lightgbm/plotting.py	/^import warnings$/;"	i
warnings	python-package/lightgbm/sklearn.py	/^import warnings$/;"	i
weight_column	include/LightGBM/config.h	/^  std::string weight_column = "";$/;"	m	struct:LightGBM::IOConfig
weight_idx_	include/LightGBM/dataset_loader.h	/^  int weight_idx_;$/;"	m	class:LightGBM::DatasetLoader
weight_load_from_file_	include/LightGBM/dataset.h	/^  bool weight_load_from_file_;$/;"	m	class:LightGBM::Metadata
weight_reader	src/objective/regression_objective.hpp	/^        #define weight_reader(/;"	d
weight_reader	src/objective/regression_objective.hpp	/^        #undef weight_reader$/;"	d
weight_reader	src/objective/regression_objective.hpp	/^      #define weight_reader(/;"	d
weight_reader	src/objective/regression_objective.hpp	/^      #undef weight_reader$/;"	d
weight_reader	src/objective/regression_objective.hpp	/^    #define weight_reader(/;"	d
weight_reader	src/objective/regression_objective.hpp	/^    #undef weight_reader$/;"	d
weights	include/LightGBM/dataset.h	/^  inline const label_t* weights() const {$/;"	f	class:LightGBM::Metadata
weights_	include/LightGBM/dataset.h	/^  std::vector<label_t> weights_;$/;"	m	class:LightGBM::Metadata
weights_	src/metric/binary_metric.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::AUCMetric
weights_	src/metric/binary_metric.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::BinaryMetric
weights_	src/metric/multiclass_metric.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::MulticlassMetric
weights_	src/metric/regression_metric.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::RegressionMetric
weights_	src/metric/xentropy_metric.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::CrossEntropyLambdaMetric
weights_	src/metric/xentropy_metric.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::CrossEntropyMetric
weights_	src/metric/xentropy_metric.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::KullbackLeiblerDivergence
weights_	src/objective/IPWi_rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
weights_	src/objective/IPWij_rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
weights_	src/objective/SCOREwy_rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
weights_	src/objective/SCOREzn_rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
weights_	src/objective/binary_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::BinaryLogloss
weights_	src/objective/e2e_IPWi_rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
weights_	src/objective/e2e_IPWij_rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
weights_	src/objective/multiclass_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::MulticlassSoftmax
weights_	src/objective/rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
weights_	src/objective/regression_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::RegressionL2loss
weights_	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
weights_	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
weights_	src/objective/xentropy_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::CrossEntropy
weights_	src/objective/xentropy_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::CrossEntropyLambda
weights_	src/objective/zinu/ndcg_rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
weights_	src/objective/zinu/score_rank_objective.hpp	/^  const label_t* weights_;$/;"	m	class:LightGBM::LambdarankNDCG
writelines	python-package/lightgbm/basic.py	/^    def writelines(self, lines):$/;"	m	class:_temp_file
x	docs/conf.py	/^    from mock import Mock  # Python 2.x$/;"	i
x	docs/conf.py	/^    from unittest.mock import Mock  # Python 3.x$/;"	i
x	include/LightGBM/utils/random.h	/^  unsigned int x = 123456789;$/;"	m	class:LightGBM::Random
xgboost_dart_mode	include/LightGBM/config.h	/^  bool xgboost_dart_mode = false;$/;"	m	struct:LightGBM::BoostingConfig
y_pred	examples/python-guide/advanced_example.py	/^y_pred = bst.predict(X_test)$/;"	v
y_pred	examples/python-guide/advanced_example.py	/^y_pred = pkl_bst.predict(X_test, num_iteration=7)$/;"	v
y_pred	examples/python-guide/simple_example.py	/^y_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration)$/;"	v
y_pred	examples/python-guide/sklearn_example.py	/^y_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration_)$/;"	v
y_test	examples/python-guide/advanced_example.py	/^y_test = df_test[0].values$/;"	v
y_test	examples/python-guide/plot_example.py	/^y_test = df_test[0].values$/;"	v
y_test	examples/python-guide/simple_example.py	/^y_test = df_test[0].values$/;"	v
y_test	examples/python-guide/sklearn_example.py	/^y_test = df_test[0].values$/;"	v
y_train	examples/python-guide/advanced_example.py	/^y_train = df_train[0].values$/;"	v
y_train	examples/python-guide/plot_example.py	/^y_train = df_train[0].values$/;"	v
y_train	examples/python-guide/simple_example.py	/^y_train = df_train[0].values$/;"	v
y_train	examples/python-guide/sklearn_example.py	/^y_train = df_train[0].values$/;"	v
zero_as_missing	include/LightGBM/config.h	/^  bool zero_as_missing = false;$/;"	m	struct:LightGBM::IOConfig
zero_fraction	include/LightGBM/tree.h	/^    double zero_fraction;$/;"	m	struct:LightGBM::Tree::PathElement
~AUCMetric	src/metric/binary_metric.hpp	/^  virtual ~AUCMetric() {$/;"	f	class:LightGBM::AUCMetric
~Application	src/application/application.cpp	/^Application::~Application() {$/;"	f	class:LightGBM::Application
~Bin	include/LightGBM/bin.h	/^  virtual ~Bin() {}$/;"	f	class:LightGBM::Bin
~BinMapper	src/io/bin.cpp	/^  BinMapper::~BinMapper() {$/;"	f	class:LightGBM::BinMapper
~BinaryLogloss	src/objective/binary_objective.hpp	/^  ~BinaryLogloss() {}$/;"	f	class:LightGBM::BinaryLogloss
~BinaryMetric	src/metric/binary_metric.hpp	/^  virtual ~BinaryMetric() {$/;"	f	class:LightGBM::BinaryMetric
~Booster	src/c_api.cpp	/^  ~Booster() {$/;"	f	class:LightGBM::Booster
~Boosting	include/LightGBM/boosting.h	/^  virtual ~Boosting() {}$/;"	f	class:LightGBM::Boosting
~BoostingConfig	include/LightGBM/config.h	/^  virtual ~BoostingConfig() {}$/;"	f	struct:LightGBM::BoostingConfig
~CSC_RowIterator	src/c_api.cpp	/^  ~CSC_RowIterator() {}$/;"	f	class:CSC_RowIterator
~ConfigBase	include/LightGBM/config.h	/^  virtual ~ConfigBase() {}$/;"	f	struct:LightGBM::ConfigBase
~CrossEntropy	src/objective/xentropy_objective.hpp	/^  ~CrossEntropy() {}$/;"	f	class:LightGBM::CrossEntropy
~CrossEntropyLambda	src/objective/xentropy_objective.hpp	/^  ~CrossEntropyLambda() {}$/;"	f	class:LightGBM::CrossEntropyLambda
~CrossEntropyLambdaMetric	src/metric/xentropy_metric.hpp	/^  virtual ~CrossEntropyLambdaMetric() {}$/;"	f	class:LightGBM::CrossEntropyLambdaMetric
~CrossEntropyMetric	src/metric/xentropy_metric.hpp	/^  virtual ~CrossEntropyMetric() {}$/;"	f	class:LightGBM::CrossEntropyMetric
~DART	src/boosting/dart.hpp	/^  ~DART() { }$/;"	f	class:LightGBM::DART
~DataParallelTreeLearner	src/treelearner/data_parallel_tree_learner.cpp	/^DataParallelTreeLearner<TREELEARNER_T>::~DataParallelTreeLearner() {$/;"	f	class:LightGBM::DataParallelTreeLearner
~DataPartition	src/treelearner/data_partition.hpp	/^  ~DataPartition() {$/;"	f	class:LightGBM::DataPartition
~Dataset	src/io/dataset.cpp	/^Dataset::~Dataset() {$/;"	f	class:LightGBM::Dataset
~DatasetLoader	src/io/dataset_loader.cpp	/^DatasetLoader::~DatasetLoader() {$/;"	f	class:LightGBM::DatasetLoader
~Dense4bitsBin	src/io/dense_nbits_bin.hpp	/^  ~Dense4bitsBin() {$/;"	f	class:LightGBM::Dense4bitsBin
~DenseBin	src/io/dense_bin.hpp	/^  ~DenseBin() {$/;"	f	class:LightGBM::DenseBin
~FeatureGroup	include/LightGBM/feature_group.h	/^  ~FeatureGroup() {$/;"	f	class:LightGBM::FeatureGroup
~FeatureHistogram	src/treelearner/feature_histogram.hpp	/^  ~FeatureHistogram() {$/;"	f	class:LightGBM::FeatureHistogram
~FeatureParallelTreeLearner	src/treelearner/feature_parallel_tree_learner.cpp	/^FeatureParallelTreeLearner<TREELEARNER_T>::~FeatureParallelTreeLearner() {$/;"	f	class:LightGBM::FeatureParallelTreeLearner
~GBDT	src/boosting/gbdt.cpp	/^GBDT::~GBDT() {$/;"	f	class:LightGBM::GBDT
~GOSS	src/boosting/goss.hpp	/^  ~GOSS() {$/;"	f	class:LightGBM::GOSS
~GPUTreeLearner	src/treelearner/gpu_tree_learner.cpp	/^GPUTreeLearner::~GPUTreeLearner() {$/;"	f	class:LightGBM::GPUTreeLearner
~HDFSFile	src/io/file_io.cpp	/^  ~HDFSFile() {$/;"	f	struct:LightGBM::HDFSFile
~HistogramPool	src/treelearner/feature_histogram.hpp	/^  ~HistogramPool() {$/;"	f	class:LightGBM::HistogramPool
~JsonValue	include/LightGBM/json11.hpp	/^    virtual ~JsonValue() {}$/;"	f	class:json11::JsonValue
~KullbackLeiblerDivergence	src/metric/xentropy_metric.hpp	/^  virtual ~KullbackLeiblerDivergence() {}$/;"	f	class:LightGBM::KullbackLeiblerDivergence
~LambdarankNDCG	src/objective/IPWi_rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LambdarankNDCG	src/objective/IPWij_rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LambdarankNDCG	src/objective/SCOREwy_rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LambdarankNDCG	src/objective/SCOREzn_rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LambdarankNDCG	src/objective/e2e_IPWi_rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LambdarankNDCG	src/objective/e2e_IPWij_rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LambdarankNDCG	src/objective/rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LambdarankNDCG	src/objective/verbose_e2e_IPWi_force_rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LambdarankNDCG	src/objective/verbose_e2e_IPWi_rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LambdarankNDCG	src/objective/zinu/ndcg_rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LambdarankNDCG	src/objective/zinu/score_rank_objective.hpp	/^  ~LambdarankNDCG() {$/;"	f	class:LightGBM::LambdarankNDCG
~LeafSplits	src/treelearner/leaf_splits.hpp	/^  ~LeafSplits() {$/;"	f	class:LightGBM::LeafSplits
~Linkers	src/network/linkers_mpi.cpp	/^Linkers::~Linkers() {$/;"	f	class:LightGBM::Linkers
~Linkers	src/network/linkers_socket.cpp	/^Linkers::~Linkers() {$/;"	f	class:LightGBM::Linkers
~LocalFile	src/io/file_io.cpp	/^  virtual ~LocalFile() {$/;"	f	struct:LightGBM::LocalFile
~MapMetric	src/metric/map_metric.hpp	/^  ~MapMetric() {$/;"	f	class:LightGBM::MapMetric
~Metadata	src/io/metadata.cpp	/^Metadata::~Metadata() {$/;"	f	class:LightGBM::Metadata
~Metric	include/LightGBM/metric.h	/^  virtual ~Metric() {}$/;"	f	class:LightGBM::Metric
~MetricConfig	include/LightGBM/config.h	/^  virtual ~MetricConfig() {}$/;"	f	struct:LightGBM::MetricConfig
~MulticlassMetric	src/metric/multiclass_metric.hpp	/^  virtual ~MulticlassMetric() {$/;"	f	class:LightGBM::MulticlassMetric
~MulticlassOVA	src/objective/multiclass_objective.hpp	/^  ~MulticlassOVA() {$/;"	f	class:LightGBM::MulticlassOVA
~MulticlassSoftmax	src/objective/multiclass_objective.hpp	/^  ~MulticlassSoftmax() {$/;"	f	class:LightGBM::MulticlassSoftmax
~NDCGMetric	src/metric/rank_metric.hpp	/^  ~NDCGMetric() {$/;"	f	class:LightGBM::NDCGMetric
~ObjectiveConfig	include/LightGBM/config.h	/^  virtual ~ObjectiveConfig() {}$/;"	f	struct:LightGBM::ObjectiveConfig
~ObjectiveFunction	include/LightGBM/objective_function.h	/^  virtual ~ObjectiveFunction() {}$/;"	f	class:LightGBM::ObjectiveFunction
~OrderedBin	include/LightGBM/bin.h	/^  virtual ~OrderedBin() {}$/;"	f	class:LightGBM::OrderedBin
~OrderedSparseBin	src/io/ordered_sparse_bin.hpp	/^  ~OrderedSparseBin() {$/;"	f	class:LightGBM::OrderedSparseBin
~Parser	include/LightGBM/dataset.h	/^  virtual ~Parser() {}$/;"	f	class:LightGBM::Parser
~Predictor	src/application/predictor.hpp	/^  ~Predictor() {$/;"	f	class:LightGBM::Predictor
~RF	src/boosting/rf.hpp	/^  ~RF() {}$/;"	f	class:LightGBM::RF
~RegressionFairLoss	src/objective/regression_objective.hpp	/^  ~RegressionFairLoss() {}$/;"	f	class:LightGBM::RegressionFairLoss
~RegressionGammaLoss	src/objective/regression_objective.hpp	/^  ~RegressionGammaLoss() {}$/;"	f	class:LightGBM::RegressionGammaLoss
~RegressionHuberLoss	src/objective/regression_objective.hpp	/^  ~RegressionHuberLoss() {$/;"	f	class:LightGBM::RegressionHuberLoss
~RegressionL1loss	src/objective/regression_objective.hpp	/^  ~RegressionL1loss() {}$/;"	f	class:LightGBM::RegressionL1loss
~RegressionL2loss	src/objective/regression_objective.hpp	/^  ~RegressionL2loss() {$/;"	f	class:LightGBM::RegressionL2loss
~RegressionMAPELOSS	src/objective/regression_objective.hpp	/^  ~RegressionMAPELOSS() {}$/;"	f	class:LightGBM::RegressionMAPELOSS
~RegressionMetric	src/metric/regression_metric.hpp	/^  virtual ~RegressionMetric() {$/;"	f	class:LightGBM::RegressionMetric
~RegressionPoissonLoss	src/objective/regression_objective.hpp	/^  ~RegressionPoissonLoss() {}$/;"	f	class:LightGBM::RegressionPoissonLoss
~RegressionQuantileloss	src/objective/regression_objective.hpp	/^  ~RegressionQuantileloss() {}$/;"	f	class:LightGBM::RegressionQuantileloss
~RegressionTweedieLoss	src/objective/regression_objective.hpp	/^  ~RegressionTweedieLoss() {}$/;"	f	class:LightGBM::RegressionTweedieLoss
~ScoreUpdater	src/boosting/score_updater.hpp	/^  ~ScoreUpdater() {$/;"	f	class:LightGBM::ScoreUpdater
~SerialTreeLearner	src/treelearner/serial_tree_learner.cpp	/^SerialTreeLearner::~SerialTreeLearner() {$/;"	f	class:LightGBM::SerialTreeLearner
~SparseBin	src/io/sparse_bin.hpp	/^  ~SparseBin() {$/;"	f	class:LightGBM::SparseBin
~TcpSocket	src/network/socket_wrapper.hpp	/^  ~TcpSocket() {$/;"	f	class:LightGBM::TcpSocket
~TextReader	include/LightGBM/utils/text_reader.h	/^  ~TextReader() {$/;"	f	class:LightGBM::TextReader
~ThreadExceptionHelper	include/LightGBM/utils/openmp_wrapper.h	/^  ~ThreadExceptionHelper() { $/;"	f	class:ThreadExceptionHelper
~Tree	src/io/tree.cpp	/^Tree::~Tree() {$/;"	f	class:LightGBM::Tree
~TreeLearner	include/LightGBM/tree_learner.h	/^  virtual ~TreeLearner() {}$/;"	f	class:LightGBM::TreeLearner
~VirtualFileReader	include/LightGBM/utils/file_io.h	/^  virtual ~VirtualFileReader() {};$/;"	f	struct:LightGBM::VirtualFileReader
~VirtualFileWriter	include/LightGBM/utils/file_io.h	/^  virtual ~VirtualFileWriter() {};$/;"	f	struct:LightGBM::VirtualFileWriter
~VotingParallelTreeLearner	src/treelearner/parallel_tree_learner.h	/^  ~VotingParallelTreeLearner() { }$/;"	f	class:LightGBM::VotingParallelTreeLearner
